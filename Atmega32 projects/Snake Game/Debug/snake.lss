
snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000d20  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000010f8  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000058d  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 37 05 	call	0xa6e	; 0xa6e <main>
  7a:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2c 97       	sbiw	r28, 0x0c	; 12
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	69 87       	std	Y+9, r22	; 0x09
  98:	7a 87       	std	Y+10, r23	; 0x0a
  9a:	8b 87       	std	Y+11, r24	; 0x0b
  9c:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  9e:	89 85       	ldd	r24, Y+9	; 0x09
  a0:	9a 85       	ldd	r25, Y+10	; 0x0a
  a2:	ab 85       	ldd	r26, Y+11	; 0x0b
  a4:	bc 85       	ldd	r27, Y+12	; 0x0c
  a6:	22 e7       	ldi	r18, 0x72	; 114
  a8:	31 e0       	ldi	r19, 0x01	; 1
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	bc 01       	movw	r22, r24
  b0:	cd 01       	movw	r24, r26
  b2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsi3>
  b6:	dc 01       	movw	r26, r24
  b8:	cb 01       	movw	r24, r22
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	ab 83       	std	Y+3, r26	; 0x03
  c0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  c2:	1d 82       	std	Y+5, r1	; 0x05
  c4:	1e 82       	std	Y+6, r1	; 0x06
  c6:	1f 82       	std	Y+7, r1	; 0x07
  c8:	18 86       	std	Y+8, r1	; 0x08
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <Delay_ms+0x62>
	{
		asm("nop");
  cc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  ce:	8d 81       	ldd	r24, Y+5	; 0x05
  d0:	9e 81       	ldd	r25, Y+6	; 0x06
  d2:	af 81       	ldd	r26, Y+7	; 0x07
  d4:	b8 85       	ldd	r27, Y+8	; 0x08
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	a1 1d       	adc	r26, r1
  da:	b1 1d       	adc	r27, r1
  dc:	8d 83       	std	Y+5, r24	; 0x05
  de:	9e 83       	std	Y+6, r25	; 0x06
  e0:	af 83       	std	Y+7, r26	; 0x07
  e2:	b8 87       	std	Y+8, r27	; 0x08
  e4:	2d 81       	ldd	r18, Y+5	; 0x05
  e6:	3e 81       	ldd	r19, Y+6	; 0x06
  e8:	4f 81       	ldd	r20, Y+7	; 0x07
  ea:	58 85       	ldd	r21, Y+8	; 0x08
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	ab 81       	ldd	r26, Y+3	; 0x03
  f2:	bc 81       	ldd	r27, Y+4	; 0x04
  f4:	28 17       	cp	r18, r24
  f6:	39 07       	cpc	r19, r25
  f8:	4a 07       	cpc	r20, r26
  fa:	5b 07       	cpc	r21, r27
  fc:	38 f3       	brcs	.-50     	; 0xcc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  fe:	2c 96       	adiw	r28, 0x0c	; 12
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	cf 91       	pop	r28
 10c:	df 91       	pop	r29
 10e:	08 95       	ret

00000110 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	2c 97       	sbiw	r28, 0x0c	; 12
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	69 87       	std	Y+9, r22	; 0x09
 126:	7a 87       	std	Y+10, r23	; 0x0a
 128:	8b 87       	std	Y+11, r24	; 0x0b
 12a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 12c:	89 85       	ldd	r24, Y+9	; 0x09
 12e:	9a 85       	ldd	r25, Y+10	; 0x0a
 130:	ab 85       	ldd	r26, Y+11	; 0x0b
 132:	bc 85       	ldd	r27, Y+12	; 0x0c
 134:	27 e7       	ldi	r18, 0x77	; 119
 136:	31 e0       	ldi	r19, 0x01	; 1
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	bc 01       	movw	r22, r24
 13e:	cd 01       	movw	r24, r26
 140:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__mulsi3>
 144:	dc 01       	movw	r26, r24
 146:	cb 01       	movw	r24, r22
 148:	89 5d       	subi	r24, 0xD9	; 217
 14a:	94 44       	sbci	r25, 0x44	; 68
 14c:	a0 40       	sbci	r26, 0x00	; 0
 14e:	b0 40       	sbci	r27, 0x00	; 0
 150:	28 ee       	ldi	r18, 0xE8	; 232
 152:	33 e0       	ldi	r19, 0x03	; 3
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	bc 01       	movw	r22, r24
 15a:	cd 01       	movw	r24, r26
 15c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__udivmodsi4>
 160:	da 01       	movw	r26, r20
 162:	c9 01       	movw	r24, r18
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	ab 83       	std	Y+3, r26	; 0x03
 16a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 16c:	1d 82       	std	Y+5, r1	; 0x05
 16e:	1e 82       	std	Y+6, r1	; 0x06
 170:	1f 82       	std	Y+7, r1	; 0x07
 172:	18 86       	std	Y+8, r1	; 0x08
 174:	0c c0       	rjmp	.+24     	; 0x18e <Delay_us+0x7e>
	{
		asm("nop");
 176:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	9e 81       	ldd	r25, Y+6	; 0x06
 17c:	af 81       	ldd	r26, Y+7	; 0x07
 17e:	b8 85       	ldd	r27, Y+8	; 0x08
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	8d 83       	std	Y+5, r24	; 0x05
 188:	9e 83       	std	Y+6, r25	; 0x06
 18a:	af 83       	std	Y+7, r26	; 0x07
 18c:	b8 87       	std	Y+8, r27	; 0x08
 18e:	2d 81       	ldd	r18, Y+5	; 0x05
 190:	3e 81       	ldd	r19, Y+6	; 0x06
 192:	4f 81       	ldd	r20, Y+7	; 0x07
 194:	58 85       	ldd	r21, Y+8	; 0x08
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	ab 81       	ldd	r26, Y+3	; 0x03
 19c:	bc 81       	ldd	r27, Y+4	; 0x04
 19e:	28 17       	cp	r18, r24
 1a0:	39 07       	cpc	r19, r25
 1a2:	4a 07       	cpc	r20, r26
 1a4:	5b 07       	cpc	r21, r27
 1a6:	38 f3       	brcs	.-50     	; 0x176 <Delay_us+0x66>
	{
		asm("nop");
	}
 1a8:	2c 96       	adiw	r28, 0x0c	; 12
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	08 95       	ret

000001ba <DIO_voidInitialize>:
#include "DIO_config.h"
#include "DIO_priv.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1c2:	ea e3       	ldi	r30, 0x3A	; 58
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1ca:	e7 e3       	ldi	r30, 0x37	; 55
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	87 e0       	ldi	r24, 0x07	; 7
 1d0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1d2:	e4 e3       	ldi	r30, 0x34	; 52
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	10 82       	st	Z, r1
	DDRD = DIO_u8_PORTD_DIRECTION;
 1d8:	e1 e3       	ldi	r30, 0x31	; 49
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	80 83       	st	Z, r24
}
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <DIO_voidSetPinValue+0x6>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	60 f5       	brcc	.+88     	; 0x252 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	88 23       	and	r24, r24
 1fe:	a1 f4       	brne	.+40     	; 0x228 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 200:	ab e3       	ldi	r26, 0x3B	; 59
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	eb e3       	ldi	r30, 0x3B	; 59
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_voidSetPinValue+0x38>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_voidSetPinValue+0x34>
 222:	84 2b       	or	r24, r20
 224:	8c 93       	st	X, r24
 226:	b3 c0       	rjmp	.+358    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 228:	ab e3       	ldi	r26, 0x3B	; 59
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	eb e3       	ldi	r30, 0x3B	; 59
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinValue+0x60>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinValue+0x5c>
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	8c 93       	st	X, r24
 250:	9e c0       	rjmp	.+316    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	90 f1       	brcs	.+100    	; 0x2bc <DIO_voidSetPinValue+0xd6>
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	80 31       	cpi	r24, 0x10	; 16
 25c:	78 f5       	brcc	.+94     	; 0x2bc <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	88 50       	subi	r24, 0x08	; 8
 262:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	88 23       	and	r24, r24
 268:	a1 f4       	brne	.+40     	; 0x292 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 26a:	a8 e3       	ldi	r26, 0x38	; 56
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e8 e3       	ldi	r30, 0x38	; 56
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	48 2f       	mov	r20, r24
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_voidSetPinValue+0xa2>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_voidSetPinValue+0x9e>
 28c:	84 2b       	or	r24, r20
 28e:	8c 93       	st	X, r24
 290:	7e c0       	rjmp	.+252    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 292:	a8 e3       	ldi	r26, 0x38	; 56
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	e8 e3       	ldi	r30, 0x38	; 56
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	48 2f       	mov	r20, r24
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 2e       	mov	r0, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_voidSetPinValue+0xca>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_voidSetPinValue+0xc6>
 2b4:	80 95       	com	r24
 2b6:	84 23       	and	r24, r20
 2b8:	8c 93       	st	X, r24
 2ba:	69 c0       	rjmp	.+210    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	80 31       	cpi	r24, 0x10	; 16
 2c0:	90 f1       	brcs	.+100    	; 0x326 <DIO_voidSetPinValue+0x140>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	88 31       	cpi	r24, 0x18	; 24
 2c6:	78 f5       	brcc	.+94     	; 0x326 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	80 51       	subi	r24, 0x10	; 16
 2cc:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	88 23       	and	r24, r24
 2d2:	a1 f4       	brne	.+40     	; 0x2fc <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2d4:	a5 e3       	ldi	r26, 0x35	; 53
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e5 e3       	ldi	r30, 0x35	; 53
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 2e       	mov	r0, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinValue+0x10c>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinValue+0x108>
 2f6:	84 2b       	or	r24, r20
 2f8:	8c 93       	st	X, r24
 2fa:	49 c0       	rjmp	.+146    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2fc:	a5 e3       	ldi	r26, 0x35	; 53
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e5 e3       	ldi	r30, 0x35	; 53
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	48 2f       	mov	r20, r24
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_voidSetPinValue+0x134>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_voidSetPinValue+0x130>
 31e:	80 95       	com	r24
 320:	84 23       	and	r24, r20
 322:	8c 93       	st	X, r24
 324:	34 c0       	rjmp	.+104    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	88 31       	cpi	r24, 0x18	; 24
 32a:	88 f1       	brcs	.+98     	; 0x38e <DIO_voidSetPinValue+0x1a8>
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	80 32       	cpi	r24, 0x20	; 32
 330:	70 f5       	brcc	.+92     	; 0x38e <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 51       	subi	r24, 0x18	; 24
 336:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	88 23       	and	r24, r24
 33c:	a1 f4       	brne	.+40     	; 0x366 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 33e:	a2 e3       	ldi	r26, 0x32	; 50
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e2 e3       	ldi	r30, 0x32	; 50
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 2e       	mov	r0, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_voidSetPinValue+0x176>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_voidSetPinValue+0x172>
 360:	84 2b       	or	r24, r20
 362:	8c 93       	st	X, r24
 364:	14 c0       	rjmp	.+40     	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 366:	a2 e3       	ldi	r26, 0x32	; 50
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	e2 e3       	ldi	r30, 0x32	; 50
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	48 2f       	mov	r20, r24
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 2e       	mov	r0, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_voidSetPinValue+0x19e>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_voidSetPinValue+0x19a>
 388:	80 95       	com	r24
 38a:	84 23       	and	r24, r20
 38c:	8c 93       	st	X, r24
		}			
	}
}
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	cf 91       	pop	r28
 394:	df 91       	pop	r29
 396:	08 95       	ret

00000398 <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
 398:	df 93       	push	r29
 39a:	cf 93       	push	r28
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
 3a0:	62 e3       	ldi	r22, 0x32	; 50
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
	/*Write Function Set command*/
	LCD_voidWriteCmd(0b00111000);
 3ac:	88 e3       	ldi	r24, 0x38	; 56
 3ae:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_voidWriteCmd>

	Delay_us(100);
 3b2:	64 e6       	ldi	r22, 0x64	; 100
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 88 00 	call	0x110	; 0x110 <Delay_us>

	/*Write Display on command*/
	LCD_voidWriteCmd(0b00001100);
 3be:	8c e0       	ldi	r24, 0x0C	; 12
 3c0:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_voidWriteCmd>

	Delay_us(100);
 3c4:	64 e6       	ldi	r22, 0x64	; 100
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 88 00 	call	0x110	; 0x110 <Delay_us>

	/*Write command clear display*/
	LCD_voidWriteCmd(0b00000001);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_voidWriteCmd>

	Delay_ms(2);
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
}
 3e2:	cf 91       	pop	r28
 3e4:	df 91       	pop	r29
 3e6:	08 95       	ret

000003e8 <LCD_voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
extern void LCD_voidWriteData(u8 u8DataCpy)
{
 3e8:	df 93       	push	r29
 3ea:	cf 93       	push	r28
 3ec:	0f 92       	push	r0
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
 3f4:	88 e0       	ldi	r24, 0x08	; 8
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	0e 94 16 02 	call	0x42c	; 0x42c <voidLcdExecute>
}
 402:	0f 90       	pop	r0
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	08 95       	ret

0000040a <LCD_voidWriteCmd>:
/*********************************************/
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
extern void LCD_voidWriteCmd(u8 u8CommandCpy)
{
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	0f 92       	push	r0
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	0e 94 16 02 	call	0x42c	; 0x42c <voidLcdExecute>
}
 424:	0f 90       	pop	r0
 426:	cf 91       	pop	r28
 428:	df 91       	pop	r29
 42a:	08 95       	ret

0000042c <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
 42c:	df 93       	push	r29
 42e:	cf 93       	push	r28
 430:	0f 92       	push	r0
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	89 83       	std	Y+1, r24	; 0x01
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
 438:	89 e0       	ldi	r24, 0x09	; 9
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	if(GET_BIT(u8ValueCpy,0))
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	88 2f       	mov	r24, r24
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	81 70       	andi	r24, 0x01	; 1
 448:	90 70       	andi	r25, 0x00	; 0
 44a:	88 23       	and	r24, r24
 44c:	29 f0       	breq	.+10     	; 0x458 <voidLcdExecute+0x2c>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_0,DIO_u8_HIGH);
 44e:	88 e1       	ldi	r24, 0x18	; 24
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 456:	04 c0       	rjmp	.+8      	; 0x460 <voidLcdExecute+0x34>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_0,DIO_u8_LOW);
 458:	88 e1       	ldi	r24, 0x18	; 24
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,1))
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	88 2f       	mov	r24, r24
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	82 70       	andi	r24, 0x02	; 2
 468:	90 70       	andi	r25, 0x00	; 0
 46a:	95 95       	asr	r25
 46c:	87 95       	ror	r24
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	29 f0       	breq	.+10     	; 0x47c <voidLcdExecute+0x50>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_1,DIO_u8_HIGH);
 472:	89 e1       	ldi	r24, 0x19	; 25
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 47a:	04 c0       	rjmp	.+8      	; 0x484 <voidLcdExecute+0x58>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_1,DIO_u8_LOW);
 47c:	89 e1       	ldi	r24, 0x19	; 25
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,2))
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	88 2f       	mov	r24, r24
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	84 70       	andi	r24, 0x04	; 4
 48c:	90 70       	andi	r25, 0x00	; 0
 48e:	95 95       	asr	r25
 490:	87 95       	ror	r24
 492:	95 95       	asr	r25
 494:	87 95       	ror	r24
 496:	00 97       	sbiw	r24, 0x00	; 0
 498:	29 f0       	breq	.+10     	; 0x4a4 <voidLcdExecute+0x78>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_2,DIO_u8_HIGH);
 49a:	8a e1       	ldi	r24, 0x1A	; 26
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <voidLcdExecute+0x80>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_2,DIO_u8_LOW);
 4a4:	8a e1       	ldi	r24, 0x1A	; 26
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,3))
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	88 2f       	mov	r24, r24
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	88 70       	andi	r24, 0x08	; 8
 4b4:	90 70       	andi	r25, 0x00	; 0
 4b6:	95 95       	asr	r25
 4b8:	87 95       	ror	r24
 4ba:	95 95       	asr	r25
 4bc:	87 95       	ror	r24
 4be:	95 95       	asr	r25
 4c0:	87 95       	ror	r24
 4c2:	00 97       	sbiw	r24, 0x00	; 0
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <voidLcdExecute+0xa4>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_3,DIO_u8_HIGH);
 4c6:	8b e1       	ldi	r24, 0x1B	; 27
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <voidLcdExecute+0xac>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_3,DIO_u8_LOW);
 4d0:	8b e1       	ldi	r24, 0x1B	; 27
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,4))
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	80 71       	andi	r24, 0x10	; 16
 4e0:	90 70       	andi	r25, 0x00	; 0
 4e2:	95 95       	asr	r25
 4e4:	87 95       	ror	r24
 4e6:	95 95       	asr	r25
 4e8:	87 95       	ror	r24
 4ea:	95 95       	asr	r25
 4ec:	87 95       	ror	r24
 4ee:	95 95       	asr	r25
 4f0:	87 95       	ror	r24
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	29 f0       	breq	.+10     	; 0x500 <voidLcdExecute+0xd4>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_4,DIO_u8_HIGH);
 4f6:	8c e1       	ldi	r24, 0x1C	; 28
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <voidLcdExecute+0xdc>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_4,DIO_u8_LOW);
 500:	8c e1       	ldi	r24, 0x1C	; 28
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,5))
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 2f       	mov	r24, r24
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	80 72       	andi	r24, 0x20	; 32
 510:	90 70       	andi	r25, 0x00	; 0
 512:	95 95       	asr	r25
 514:	87 95       	ror	r24
 516:	95 95       	asr	r25
 518:	87 95       	ror	r24
 51a:	95 95       	asr	r25
 51c:	87 95       	ror	r24
 51e:	95 95       	asr	r25
 520:	87 95       	ror	r24
 522:	95 95       	asr	r25
 524:	87 95       	ror	r24
 526:	00 97       	sbiw	r24, 0x00	; 0
 528:	29 f0       	breq	.+10     	; 0x534 <voidLcdExecute+0x108>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_5,DIO_u8_HIGH);
 52a:	8d e1       	ldi	r24, 0x1D	; 29
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 532:	04 c0       	rjmp	.+8      	; 0x53c <voidLcdExecute+0x110>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_5,DIO_u8_LOW);
 534:	8d e1       	ldi	r24, 0x1D	; 29
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,6))
 53c:	89 81       	ldd	r24, Y+1	; 0x01
 53e:	88 2f       	mov	r24, r24
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	80 74       	andi	r24, 0x40	; 64
 544:	90 70       	andi	r25, 0x00	; 0
 546:	08 2e       	mov	r0, r24
 548:	89 2f       	mov	r24, r25
 54a:	00 0c       	add	r0, r0
 54c:	88 1f       	adc	r24, r24
 54e:	99 0b       	sbc	r25, r25
 550:	00 0c       	add	r0, r0
 552:	88 1f       	adc	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	00 97       	sbiw	r24, 0x00	; 0
 558:	29 f0       	breq	.+10     	; 0x564 <voidLcdExecute+0x138>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_6,DIO_u8_HIGH);
 55a:	8e e1       	ldi	r24, 0x1E	; 30
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 562:	04 c0       	rjmp	.+8      	; 0x56c <voidLcdExecute+0x140>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_6,DIO_u8_LOW);
 564:	8e e1       	ldi	r24, 0x1E	; 30
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,7))
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	88 1f       	adc	r24, r24
 570:	88 27       	eor	r24, r24
 572:	88 1f       	adc	r24, r24
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	90 70       	andi	r25, 0x00	; 0
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	29 f0       	breq	.+10     	; 0x588 <voidLcdExecute+0x15c>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_7,DIO_u8_HIGH);
 57e:	8f e1       	ldi	r24, 0x1F	; 31
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 586:	04 c0       	rjmp	.+8      	; 0x590 <voidLcdExecute+0x164>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_7,DIO_u8_LOW);
 588:	8f e1       	ldi	r24, 0x1F	; 31
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
 590:	8a e0       	ldi	r24, 0x0A	; 10
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_us(100);
 598:	64 e6       	ldi	r22, 0x64	; 100
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 88 00 	call	0x110	; 0x110 <Delay_us>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
 5a4:	8a e0       	ldi	r24, 0x0A	; 10
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
}
 5ac:	0f 90       	pop	r0
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <voidLedMatrixOutputImage>:
#include "LED_MATRIX_int.h"
#include "LED_MATRIX_config.h"

u8 cols [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
void voidLedMatrixOutputImage(u8* u8ImageCopy)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <voidLedMatrixOutputImage+0x6>
 5ba:	0f 92       	push	r0
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	9b 83       	std	Y+3, r25	; 0x03
 5c2:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 u8CounterLocal=0; u8CounterLocal< u8_LED_MATRIX_SIZE; u8CounterLocal++)
 5c4:	19 82       	std	Y+1, r1	; 0x01
 5c6:	c9 c1       	rjmp	.+914    	; 0x95a <__stack+0xfb>
	{
		/*Columns from 0 to 7 enable and disable depend on the row*/
		if(GET_BIT(cols[u8CounterLocal],0)){
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	88 2f       	mov	r24, r24
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	fc 01       	movw	r30, r24
 5d0:	e0 5a       	subi	r30, 0xA0	; 160
 5d2:	ff 4f       	sbci	r31, 0xFF	; 255
 5d4:	80 81       	ld	r24, Z
 5d6:	88 2f       	mov	r24, r24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	81 70       	andi	r24, 0x01	; 1
 5dc:	90 70       	andi	r25, 0x00	; 0
 5de:	88 23       	and	r24, r24
 5e0:	29 f0       	breq	.+10     	; 0x5ec <voidLedMatrixOutputImage+0x38>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_0,DIO_u8_HIGH);
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <voidLedMatrixOutputImage+0x40>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_0,DIO_u8_LOW);
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(cols[u8CounterLocal],1)){
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	88 2f       	mov	r24, r24
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	fc 01       	movw	r30, r24
 5fc:	e0 5a       	subi	r30, 0xA0	; 160
 5fe:	ff 4f       	sbci	r31, 0xFF	; 255
 600:	80 81       	ld	r24, Z
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	82 70       	andi	r24, 0x02	; 2
 608:	90 70       	andi	r25, 0x00	; 0
 60a:	95 95       	asr	r25
 60c:	87 95       	ror	r24
 60e:	00 97       	sbiw	r24, 0x00	; 0
 610:	29 f0       	breq	.+10     	; 0x61c <voidLedMatrixOutputImage+0x68>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_1,DIO_u8_HIGH);
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 61a:	04 c0       	rjmp	.+8      	; 0x624 <voidLedMatrixOutputImage+0x70>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_1,DIO_u8_LOW);
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(cols[u8CounterLocal],2)){
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	88 2f       	mov	r24, r24
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	fc 01       	movw	r30, r24
 62c:	e0 5a       	subi	r30, 0xA0	; 160
 62e:	ff 4f       	sbci	r31, 0xFF	; 255
 630:	80 81       	ld	r24, Z
 632:	88 2f       	mov	r24, r24
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	84 70       	andi	r24, 0x04	; 4
 638:	90 70       	andi	r25, 0x00	; 0
 63a:	95 95       	asr	r25
 63c:	87 95       	ror	r24
 63e:	95 95       	asr	r25
 640:	87 95       	ror	r24
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	29 f0       	breq	.+10     	; 0x650 <voidLedMatrixOutputImage+0x9c>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_2,DIO_u8_HIGH);
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 64e:	04 c0       	rjmp	.+8      	; 0x658 <voidLedMatrixOutputImage+0xa4>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_2,DIO_u8_LOW);
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	61 e0       	ldi	r22, 0x01	; 1
 654:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(cols[u8CounterLocal],3)){
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	88 2f       	mov	r24, r24
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	fc 01       	movw	r30, r24
 660:	e0 5a       	subi	r30, 0xA0	; 160
 662:	ff 4f       	sbci	r31, 0xFF	; 255
 664:	80 81       	ld	r24, Z
 666:	88 2f       	mov	r24, r24
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	88 70       	andi	r24, 0x08	; 8
 66c:	90 70       	andi	r25, 0x00	; 0
 66e:	95 95       	asr	r25
 670:	87 95       	ror	r24
 672:	95 95       	asr	r25
 674:	87 95       	ror	r24
 676:	95 95       	asr	r25
 678:	87 95       	ror	r24
 67a:	00 97       	sbiw	r24, 0x00	; 0
 67c:	29 f0       	breq	.+10     	; 0x688 <voidLedMatrixOutputImage+0xd4>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_3,DIO_u8_HIGH);
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 686:	04 c0       	rjmp	.+8      	; 0x690 <voidLedMatrixOutputImage+0xdc>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_3,DIO_u8_LOW);
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(cols[u8CounterLocal],4)){
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	fc 01       	movw	r30, r24
 698:	e0 5a       	subi	r30, 0xA0	; 160
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	80 81       	ld	r24, Z
 69e:	88 2f       	mov	r24, r24
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	80 71       	andi	r24, 0x10	; 16
 6a4:	90 70       	andi	r25, 0x00	; 0
 6a6:	95 95       	asr	r25
 6a8:	87 95       	ror	r24
 6aa:	95 95       	asr	r25
 6ac:	87 95       	ror	r24
 6ae:	95 95       	asr	r25
 6b0:	87 95       	ror	r24
 6b2:	95 95       	asr	r25
 6b4:	87 95       	ror	r24
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	29 f0       	breq	.+10     	; 0x6c4 <voidLedMatrixOutputImage+0x110>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_4,DIO_u8_HIGH);
 6ba:	84 e0       	ldi	r24, 0x04	; 4
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <voidLedMatrixOutputImage+0x118>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_4,DIO_u8_LOW);
 6c4:	84 e0       	ldi	r24, 0x04	; 4
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(cols[u8CounterLocal],5)){
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	fc 01       	movw	r30, r24
 6d4:	e0 5a       	subi	r30, 0xA0	; 160
 6d6:	ff 4f       	sbci	r31, 0xFF	; 255
 6d8:	80 81       	ld	r24, Z
 6da:	88 2f       	mov	r24, r24
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	80 72       	andi	r24, 0x20	; 32
 6e0:	90 70       	andi	r25, 0x00	; 0
 6e2:	95 95       	asr	r25
 6e4:	87 95       	ror	r24
 6e6:	95 95       	asr	r25
 6e8:	87 95       	ror	r24
 6ea:	95 95       	asr	r25
 6ec:	87 95       	ror	r24
 6ee:	95 95       	asr	r25
 6f0:	87 95       	ror	r24
 6f2:	95 95       	asr	r25
 6f4:	87 95       	ror	r24
 6f6:	00 97       	sbiw	r24, 0x00	; 0
 6f8:	29 f0       	breq	.+10     	; 0x704 <voidLedMatrixOutputImage+0x150>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_5,DIO_u8_HIGH);
 6fa:	85 e0       	ldi	r24, 0x05	; 5
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 702:	04 c0       	rjmp	.+8      	; 0x70c <voidLedMatrixOutputImage+0x158>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_5,DIO_u8_LOW);
 704:	85 e0       	ldi	r24, 0x05	; 5
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(cols[u8CounterLocal],6)){
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	88 2f       	mov	r24, r24
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	fc 01       	movw	r30, r24
 714:	e0 5a       	subi	r30, 0xA0	; 160
 716:	ff 4f       	sbci	r31, 0xFF	; 255
 718:	80 81       	ld	r24, Z
 71a:	88 2f       	mov	r24, r24
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	80 74       	andi	r24, 0x40	; 64
 720:	90 70       	andi	r25, 0x00	; 0
 722:	08 2e       	mov	r0, r24
 724:	89 2f       	mov	r24, r25
 726:	00 0c       	add	r0, r0
 728:	88 1f       	adc	r24, r24
 72a:	99 0b       	sbc	r25, r25
 72c:	00 0c       	add	r0, r0
 72e:	88 1f       	adc	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	00 97       	sbiw	r24, 0x00	; 0
 734:	29 f0       	breq	.+10     	; 0x740 <voidLedMatrixOutputImage+0x18c>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_6,DIO_u8_HIGH);
 736:	86 e0       	ldi	r24, 0x06	; 6
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 73e:	04 c0       	rjmp	.+8      	; 0x748 <voidLedMatrixOutputImage+0x194>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_6,DIO_u8_LOW);
 740:	86 e0       	ldi	r24, 0x06	; 6
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(cols[u8CounterLocal],7)){
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	88 2f       	mov	r24, r24
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	fc 01       	movw	r30, r24
 750:	e0 5a       	subi	r30, 0xA0	; 160
 752:	ff 4f       	sbci	r31, 0xFF	; 255
 754:	80 81       	ld	r24, Z
 756:	88 1f       	adc	r24, r24
 758:	88 27       	eor	r24, r24
 75a:	88 1f       	adc	r24, r24
 75c:	88 2f       	mov	r24, r24
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	90 70       	andi	r25, 0x00	; 0
 762:	00 97       	sbiw	r24, 0x00	; 0
 764:	29 f0       	breq	.+10     	; 0x770 <voidLedMatrixOutputImage+0x1bc>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_7,DIO_u8_HIGH);
 766:	87 e0       	ldi	r24, 0x07	; 7
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 76e:	04 c0       	rjmp	.+8      	; 0x778 <voidLedMatrixOutputImage+0x1c4>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_7,DIO_u8_LOW);
 770:	87 e0       	ldi	r24, 0x07	; 7
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}
		/*Out the suitable image on each row*/

		if(GET_BIT(u8ImageCopy[u8CounterLocal],0)){
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	8a 81       	ldd	r24, Y+2	; 0x02
 780:	9b 81       	ldd	r25, Y+3	; 0x03
 782:	fc 01       	movw	r30, r24
 784:	e2 0f       	add	r30, r18
 786:	f3 1f       	adc	r31, r19
 788:	80 81       	ld	r24, Z
 78a:	88 2f       	mov	r24, r24
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	81 70       	andi	r24, 0x01	; 1
 790:	90 70       	andi	r25, 0x00	; 0
 792:	88 23       	and	r24, r24
 794:	29 f0       	breq	.+10     	; 0x7a0 <voidLedMatrixOutputImage+0x1ec>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_0,DIO_u8_HIGH);
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <voidLedMatrixOutputImage+0x1f4>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_0,DIO_u8_LOW);
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(u8ImageCopy[u8CounterLocal],1)){
 7a8:	89 81       	ldd	r24, Y+1	; 0x01
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	9b 81       	ldd	r25, Y+3	; 0x03
 7b2:	fc 01       	movw	r30, r24
 7b4:	e2 0f       	add	r30, r18
 7b6:	f3 1f       	adc	r31, r19
 7b8:	80 81       	ld	r24, Z
 7ba:	88 2f       	mov	r24, r24
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	82 70       	andi	r24, 0x02	; 2
 7c0:	90 70       	andi	r25, 0x00	; 0
 7c2:	95 95       	asr	r25
 7c4:	87 95       	ror	r24
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	29 f0       	breq	.+10     	; 0x7d4 <voidLedMatrixOutputImage+0x220>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_1,DIO_u8_HIGH);
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <voidLedMatrixOutputImage+0x228>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_1,DIO_u8_LOW);
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	61 e0       	ldi	r22, 0x01	; 1
 7d8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(u8ImageCopy[u8CounterLocal],2)){
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	8a 81       	ldd	r24, Y+2	; 0x02
 7e4:	9b 81       	ldd	r25, Y+3	; 0x03
 7e6:	fc 01       	movw	r30, r24
 7e8:	e2 0f       	add	r30, r18
 7ea:	f3 1f       	adc	r31, r19
 7ec:	80 81       	ld	r24, Z
 7ee:	88 2f       	mov	r24, r24
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	84 70       	andi	r24, 0x04	; 4
 7f4:	90 70       	andi	r25, 0x00	; 0
 7f6:	95 95       	asr	r25
 7f8:	87 95       	ror	r24
 7fa:	95 95       	asr	r25
 7fc:	87 95       	ror	r24
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	29 f0       	breq	.+10     	; 0x80c <voidLedMatrixOutputImage+0x258>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_2,DIO_u8_HIGH);
 802:	82 e0       	ldi	r24, 0x02	; 2
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 80a:	04 c0       	rjmp	.+8      	; 0x814 <voidLedMatrixOutputImage+0x260>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_2,DIO_u8_LOW);
 80c:	82 e0       	ldi	r24, 0x02	; 2
 80e:	61 e0       	ldi	r22, 0x01	; 1
 810:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(u8ImageCopy[u8CounterLocal],3)){
 814:	89 81       	ldd	r24, Y+1	; 0x01
 816:	28 2f       	mov	r18, r24
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	8a 81       	ldd	r24, Y+2	; 0x02
 81c:	9b 81       	ldd	r25, Y+3	; 0x03
 81e:	fc 01       	movw	r30, r24
 820:	e2 0f       	add	r30, r18
 822:	f3 1f       	adc	r31, r19
 824:	80 81       	ld	r24, Z
 826:	88 2f       	mov	r24, r24
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	88 70       	andi	r24, 0x08	; 8
 82c:	90 70       	andi	r25, 0x00	; 0
 82e:	95 95       	asr	r25
 830:	87 95       	ror	r24
 832:	95 95       	asr	r25
 834:	87 95       	ror	r24
 836:	95 95       	asr	r25
 838:	87 95       	ror	r24
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	29 f0       	breq	.+10     	; 0x848 <voidLedMatrixOutputImage+0x294>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_3,DIO_u8_HIGH);
 83e:	83 e0       	ldi	r24, 0x03	; 3
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 846:	04 c0       	rjmp	.+8      	; 0x850 <voidLedMatrixOutputImage+0x29c>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_3,DIO_u8_LOW);
 848:	83 e0       	ldi	r24, 0x03	; 3
 84a:	61 e0       	ldi	r22, 0x01	; 1
 84c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(u8ImageCopy[u8CounterLocal],4)){
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	28 2f       	mov	r18, r24
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	8a 81       	ldd	r24, Y+2	; 0x02
 858:	9b 81       	ldd	r25, Y+3	; 0x03
 85a:	fc 01       	movw	r30, r24
 85c:	e2 0f       	add	r30, r18
 85e:	f3 1f       	adc	r31, r19
 860:	80 81       	ld	r24, Z
 862:	88 2f       	mov	r24, r24
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	80 71       	andi	r24, 0x10	; 16
 868:	90 70       	andi	r25, 0x00	; 0
 86a:	95 95       	asr	r25
 86c:	87 95       	ror	r24
 86e:	95 95       	asr	r25
 870:	87 95       	ror	r24
 872:	95 95       	asr	r25
 874:	87 95       	ror	r24
 876:	95 95       	asr	r25
 878:	87 95       	ror	r24
 87a:	00 97       	sbiw	r24, 0x00	; 0
 87c:	29 f0       	breq	.+10     	; 0x888 <__stack+0x29>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_4,DIO_u8_HIGH);
 87e:	84 e0       	ldi	r24, 0x04	; 4
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 886:	04 c0       	rjmp	.+8      	; 0x890 <__stack+0x31>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_4,DIO_u8_LOW);
 888:	84 e0       	ldi	r24, 0x04	; 4
 88a:	61 e0       	ldi	r22, 0x01	; 1
 88c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(u8ImageCopy[u8CounterLocal],5)){
 890:	89 81       	ldd	r24, Y+1	; 0x01
 892:	28 2f       	mov	r18, r24
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	8a 81       	ldd	r24, Y+2	; 0x02
 898:	9b 81       	ldd	r25, Y+3	; 0x03
 89a:	fc 01       	movw	r30, r24
 89c:	e2 0f       	add	r30, r18
 89e:	f3 1f       	adc	r31, r19
 8a0:	80 81       	ld	r24, Z
 8a2:	88 2f       	mov	r24, r24
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	80 72       	andi	r24, 0x20	; 32
 8a8:	90 70       	andi	r25, 0x00	; 0
 8aa:	95 95       	asr	r25
 8ac:	87 95       	ror	r24
 8ae:	95 95       	asr	r25
 8b0:	87 95       	ror	r24
 8b2:	95 95       	asr	r25
 8b4:	87 95       	ror	r24
 8b6:	95 95       	asr	r25
 8b8:	87 95       	ror	r24
 8ba:	95 95       	asr	r25
 8bc:	87 95       	ror	r24
 8be:	00 97       	sbiw	r24, 0x00	; 0
 8c0:	29 f0       	breq	.+10     	; 0x8cc <__stack+0x6d>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_5,DIO_u8_HIGH);
 8c2:	85 e0       	ldi	r24, 0x05	; 5
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__stack+0x75>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_5,DIO_u8_LOW);
 8cc:	85 e0       	ldi	r24, 0x05	; 5
 8ce:	61 e0       	ldi	r22, 0x01	; 1
 8d0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(u8ImageCopy[u8CounterLocal],6)){
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	9b 81       	ldd	r25, Y+3	; 0x03
 8de:	fc 01       	movw	r30, r24
 8e0:	e2 0f       	add	r30, r18
 8e2:	f3 1f       	adc	r31, r19
 8e4:	80 81       	ld	r24, Z
 8e6:	88 2f       	mov	r24, r24
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	80 74       	andi	r24, 0x40	; 64
 8ec:	90 70       	andi	r25, 0x00	; 0
 8ee:	08 2e       	mov	r0, r24
 8f0:	89 2f       	mov	r24, r25
 8f2:	00 0c       	add	r0, r0
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 0b       	sbc	r25, r25
 8f8:	00 0c       	add	r0, r0
 8fa:	88 1f       	adc	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	00 97       	sbiw	r24, 0x00	; 0
 900:	29 f0       	breq	.+10     	; 0x90c <__stack+0xad>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_6,DIO_u8_HIGH);
 902:	86 e0       	ldi	r24, 0x06	; 6
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0xb5>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_6,DIO_u8_LOW);
 90c:	86 e0       	ldi	r24, 0x06	; 6
 90e:	61 e0       	ldi	r22, 0x01	; 1
 910:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}

		if(GET_BIT(u8ImageCopy[u8CounterLocal],7)){
 914:	89 81       	ldd	r24, Y+1	; 0x01
 916:	28 2f       	mov	r18, r24
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	8a 81       	ldd	r24, Y+2	; 0x02
 91c:	9b 81       	ldd	r25, Y+3	; 0x03
 91e:	fc 01       	movw	r30, r24
 920:	e2 0f       	add	r30, r18
 922:	f3 1f       	adc	r31, r19
 924:	80 81       	ld	r24, Z
 926:	88 1f       	adc	r24, r24
 928:	88 27       	eor	r24, r24
 92a:	88 1f       	adc	r24, r24
 92c:	88 2f       	mov	r24, r24
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	90 70       	andi	r25, 0x00	; 0
 932:	00 97       	sbiw	r24, 0x00	; 0
 934:	29 f0       	breq	.+10     	; 0x940 <__stack+0xe1>
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_7,DIO_u8_HIGH);
 936:	87 e0       	ldi	r24, 0x07	; 7
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 93e:	04 c0       	rjmp	.+8      	; 0x948 <__stack+0xe9>
		}
		else
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_7,DIO_u8_LOW);
 940:	87 e0       	ldi	r24, 0x07	; 7
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		}
		Delay_ms(u8_LED_MATRIX_POV_DELAY);
 948:	62 e0       	ldi	r22, 0x02	; 2
 94a:	70 e0       	ldi	r23, 0x00	; 0
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>

u8 cols [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
void voidLedMatrixOutputImage(u8* u8ImageCopy)
{

	for(u8 u8CounterLocal=0; u8CounterLocal< u8_LED_MATRIX_SIZE; u8CounterLocal++)
 954:	89 81       	ldd	r24, Y+1	; 0x01
 956:	8f 5f       	subi	r24, 0xFF	; 255
 958:	89 83       	std	Y+1, r24	; 0x01
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	88 30       	cpi	r24, 0x08	; 8
 95e:	08 f4       	brcc	.+2      	; 0x962 <__stack+0x103>
 960:	33 ce       	rjmp	.-922    	; 0x5c8 <voidLedMatrixOutputImage+0x14>
		{
			DIO_voidSetPinValue(u8_LED_MATRIX_PIN_COL_7,DIO_u8_LOW);
		}
		Delay_ms(u8_LED_MATRIX_POV_DELAY);
	}
}
 962:	0f 90       	pop	r0
 964:	0f 90       	pop	r0
 966:	0f 90       	pop	r0
 968:	cf 91       	pop	r28
 96a:	df 91       	pop	r29
 96c:	08 95       	ret

0000096e <SevenSeg_voidDisplayOnSeg>:
#include "SEVENSEG_int.h"
#include "SEVENSEG_priv.h"

/*Display on Seven segment take a u8 variable a display it on the seven segment */
void SevenSeg_voidDisplayOnSeg(u8 u8PaternCpy)
{
 96e:	df 93       	push	r29
 970:	cf 93       	push	r28
 972:	0f 92       	push	r0
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
 978:	89 83       	std	Y+1, r24	; 0x01
	/*if the seven segment type is Anode type*/
#if u8_SEVENSEG_TYPE == u8_SEVENSEG_ANODE
	/*then set the bit of the common with high value*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_COMMON,DIO_u8_HIGH);
 97a:	88 e0       	ldi	r24, 0x08	; 8
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 0 of the sent variable and out it on the seven segment A*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_A,GET_BIT(u8PaternCpy,0));
 982:	89 81       	ldd	r24, Y+1	; 0x01
 984:	98 2f       	mov	r25, r24
 986:	91 70       	andi	r25, 0x01	; 1
 988:	88 e1       	ldi	r24, 0x18	; 24
 98a:	69 2f       	mov	r22, r25
 98c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 1 of the sent variable and out it on the seven segment B*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_B,GET_BIT(u8PaternCpy,1));
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	88 2f       	mov	r24, r24
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	82 70       	andi	r24, 0x02	; 2
 998:	90 70       	andi	r25, 0x00	; 0
 99a:	95 95       	asr	r25
 99c:	87 95       	ror	r24
 99e:	98 2f       	mov	r25, r24
 9a0:	89 e1       	ldi	r24, 0x19	; 25
 9a2:	69 2f       	mov	r22, r25
 9a4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 2 of the sent variable and out it on the seven segment C*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_C,GET_BIT(u8PaternCpy,2));
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	88 2f       	mov	r24, r24
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	84 70       	andi	r24, 0x04	; 4
 9b0:	90 70       	andi	r25, 0x00	; 0
 9b2:	95 95       	asr	r25
 9b4:	87 95       	ror	r24
 9b6:	95 95       	asr	r25
 9b8:	87 95       	ror	r24
 9ba:	98 2f       	mov	r25, r24
 9bc:	8a e1       	ldi	r24, 0x1A	; 26
 9be:	69 2f       	mov	r22, r25
 9c0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 3 of the sent variable and out it on the seven segment D*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_D,GET_BIT(u8PaternCpy,3));
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	88 2f       	mov	r24, r24
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	88 70       	andi	r24, 0x08	; 8
 9cc:	90 70       	andi	r25, 0x00	; 0
 9ce:	95 95       	asr	r25
 9d0:	87 95       	ror	r24
 9d2:	95 95       	asr	r25
 9d4:	87 95       	ror	r24
 9d6:	95 95       	asr	r25
 9d8:	87 95       	ror	r24
 9da:	98 2f       	mov	r25, r24
 9dc:	8b e1       	ldi	r24, 0x1B	; 27
 9de:	69 2f       	mov	r22, r25
 9e0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 4 of the sent variable and out it on the seven segment E*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_E,GET_BIT(u8PaternCpy,4));
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	88 2f       	mov	r24, r24
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	80 71       	andi	r24, 0x10	; 16
 9ec:	90 70       	andi	r25, 0x00	; 0
 9ee:	95 95       	asr	r25
 9f0:	87 95       	ror	r24
 9f2:	95 95       	asr	r25
 9f4:	87 95       	ror	r24
 9f6:	95 95       	asr	r25
 9f8:	87 95       	ror	r24
 9fa:	95 95       	asr	r25
 9fc:	87 95       	ror	r24
 9fe:	98 2f       	mov	r25, r24
 a00:	8c e1       	ldi	r24, 0x1C	; 28
 a02:	69 2f       	mov	r22, r25
 a04:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 5 of the sent variable and out it on the seven segment F*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_F,GET_BIT(u8PaternCpy,5));
 a08:	89 81       	ldd	r24, Y+1	; 0x01
 a0a:	88 2f       	mov	r24, r24
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	80 72       	andi	r24, 0x20	; 32
 a10:	90 70       	andi	r25, 0x00	; 0
 a12:	95 95       	asr	r25
 a14:	87 95       	ror	r24
 a16:	95 95       	asr	r25
 a18:	87 95       	ror	r24
 a1a:	95 95       	asr	r25
 a1c:	87 95       	ror	r24
 a1e:	95 95       	asr	r25
 a20:	87 95       	ror	r24
 a22:	95 95       	asr	r25
 a24:	87 95       	ror	r24
 a26:	98 2f       	mov	r25, r24
 a28:	8d e1       	ldi	r24, 0x1D	; 29
 a2a:	69 2f       	mov	r22, r25
 a2c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 6 of the sent variable and out it on the seven segment G*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_G,GET_BIT(u8PaternCpy,6));
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	88 2f       	mov	r24, r24
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	80 74       	andi	r24, 0x40	; 64
 a38:	90 70       	andi	r25, 0x00	; 0
 a3a:	08 2e       	mov	r0, r24
 a3c:	89 2f       	mov	r24, r25
 a3e:	00 0c       	add	r0, r0
 a40:	88 1f       	adc	r24, r24
 a42:	99 0b       	sbc	r25, r25
 a44:	00 0c       	add	r0, r0
 a46:	88 1f       	adc	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	98 2f       	mov	r25, r24
 a4c:	8e e1       	ldi	r24, 0x1E	; 30
 a4e:	69 2f       	mov	r22, r25
 a50:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 7 of the sent variable and out it on the seven segment DOT*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_DOT,GET_BIT(u8PaternCpy,7));
 a54:	89 81       	ldd	r24, Y+1	; 0x01
 a56:	98 2f       	mov	r25, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	99 27       	eor	r25, r25
 a5c:	99 1f       	adc	r25, r25
 a5e:	8f e1       	ldi	r24, 0x1F	; 31
 a60:	69 2f       	mov	r22, r25
 a62:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	/*get bit 7 of the sent variable and out it on the seven segment DOT*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_DOT,!GET_BIT(u8PaternCpy,7));
#endif


}
 a66:	0f 90       	pop	r0
 a68:	cf 91       	pop	r28
 a6a:	df 91       	pop	r29
 a6c:	08 95       	ret

00000a6e <main>:
#include "DELAY.h"
#include "DIO_register.h"
#include "SEVENSEG_int.h"
#include "LCD_int.h"
void main (void)
{
 a6e:	df 93       	push	r29
 a70:	cf 93       	push	r28
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
 a76:	a2 97       	sbiw	r28, 0x22	; 34
 a78:	0f b6       	in	r0, 0x3f	; 63
 a7a:	f8 94       	cli
 a7c:	de bf       	out	0x3e, r29	; 62
 a7e:	0f be       	out	0x3f, r0	; 63
 a80:	cd bf       	out	0x3d, r28	; 61
	u8 cols [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
 a82:	ce 01       	movw	r24, r28
 a84:	04 96       	adiw	r24, 0x04	; 4
 a86:	9a 8f       	std	Y+26, r25	; 0x1a
 a88:	89 8f       	std	Y+25, r24	; 0x19
 a8a:	ad e6       	ldi	r26, 0x6D	; 109
 a8c:	b0 e0       	ldi	r27, 0x00	; 0
 a8e:	bc 8f       	std	Y+28, r27	; 0x1c
 a90:	ab 8f       	std	Y+27, r26	; 0x1b
 a92:	b8 e0       	ldi	r27, 0x08	; 8
 a94:	bd 8f       	std	Y+29, r27	; 0x1d
 a96:	eb 8d       	ldd	r30, Y+27	; 0x1b
 a98:	fc 8d       	ldd	r31, Y+28	; 0x1c
 a9a:	00 80       	ld	r0, Z
 a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 aa0:	01 96       	adiw	r24, 0x01	; 1
 aa2:	9c 8f       	std	Y+28, r25	; 0x1c
 aa4:	8b 8f       	std	Y+27, r24	; 0x1b
 aa6:	a9 8d       	ldd	r26, Y+25	; 0x19
 aa8:	ba 8d       	ldd	r27, Y+26	; 0x1a
 aaa:	0c 92       	st	X, r0
 aac:	e9 8d       	ldd	r30, Y+25	; 0x19
 aae:	fa 8d       	ldd	r31, Y+26	; 0x1a
 ab0:	31 96       	adiw	r30, 0x01	; 1
 ab2:	fa 8f       	std	Y+26, r31	; 0x1a
 ab4:	e9 8f       	std	Y+25, r30	; 0x19
 ab6:	fd 8d       	ldd	r31, Y+29	; 0x1d
 ab8:	f1 50       	subi	r31, 0x01	; 1
 aba:	fd 8f       	std	Y+29, r31	; 0x1d
 abc:	8d 8d       	ldd	r24, Y+29	; 0x1d
 abe:	88 23       	and	r24, r24
 ac0:	51 f7       	brne	.-44     	; 0xa96 <main+0x28>
	//LED_MATRIX ROWS PORT D, COL PORT A
	u8 rows_Image1 [8]={248, 0, 0, 0, 0, 0, 0, 0};
 ac2:	88 e0       	ldi	r24, 0x08	; 8
 ac4:	fe 01       	movw	r30, r28
 ac6:	3c 96       	adiw	r30, 0x0c	; 12
 ac8:	df 01       	movw	r26, r30
 aca:	98 2f       	mov	r25, r24
 acc:	1d 92       	st	X+, r1
 ace:	9a 95       	dec	r25
 ad0:	e9 f7       	brne	.-6      	; 0xacc <main+0x5e>
 ad2:	88 ef       	ldi	r24, 0xF8	; 248
 ad4:	8c 87       	std	Y+12, r24	; 0x0c
	u8 chars[5]={'s','n','a','k','e'};
 ad6:	de 01       	movw	r26, r28
 ad8:	54 96       	adiw	r26, 0x14	; 20
 ada:	bf 8f       	std	Y+31, r27	; 0x1f
 adc:	ae 8f       	std	Y+30, r26	; 0x1e
 ade:	e8 e6       	ldi	r30, 0x68	; 104
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	f9 a3       	std	Y+33, r31	; 0x21
 ae4:	e8 a3       	std	Y+32, r30	; 0x20
 ae6:	f5 e0       	ldi	r31, 0x05	; 5
 ae8:	fa a3       	std	Y+34, r31	; 0x22
 aea:	a8 a1       	ldd	r26, Y+32	; 0x20
 aec:	b9 a1       	ldd	r27, Y+33	; 0x21
 aee:	0c 90       	ld	r0, X
 af0:	e8 a1       	ldd	r30, Y+32	; 0x20
 af2:	f9 a1       	ldd	r31, Y+33	; 0x21
 af4:	31 96       	adiw	r30, 0x01	; 1
 af6:	f9 a3       	std	Y+33, r31	; 0x21
 af8:	e8 a3       	std	Y+32, r30	; 0x20
 afa:	ae 8d       	ldd	r26, Y+30	; 0x1e
 afc:	bf 8d       	ldd	r27, Y+31	; 0x1f
 afe:	0c 92       	st	X, r0
 b00:	ee 8d       	ldd	r30, Y+30	; 0x1e
 b02:	ff 8d       	ldd	r31, Y+31	; 0x1f
 b04:	31 96       	adiw	r30, 0x01	; 1
 b06:	ff 8f       	std	Y+31, r31	; 0x1f
 b08:	ee 8f       	std	Y+30, r30	; 0x1e
 b0a:	fa a1       	ldd	r31, Y+34	; 0x22
 b0c:	f1 50       	subi	r31, 0x01	; 1
 b0e:	fa a3       	std	Y+34, r31	; 0x22
 b10:	8a a1       	ldd	r24, Y+34	; 0x22
 b12:	88 23       	and	r24, r24
 b14:	51 f7       	brne	.-44     	; 0xaea <main+0x7c>
	u8 o=0;
 b16:	1b 82       	std	Y+3, r1	; 0x03
	DIO_voidInitialize();
 b18:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_voidInitialize>
	LCD_voidInitialize();
 b1c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_voidInitialize>

	while (1)
	{
		rows_Image1[0]=rows_Image1[0]>>1;
 b20:	8c 85       	ldd	r24, Y+12	; 0x0c
 b22:	86 95       	lsr	r24
 b24:	8c 87       	std	Y+12, r24	; 0x0c
		rows_Image1[1]=rows_Image1[1]<<1;
 b26:	8d 85       	ldd	r24, Y+13	; 0x0d
 b28:	88 0f       	add	r24, r24
 b2a:	8d 87       	std	Y+13, r24	; 0x0d
		rows_Image1[2]=rows_Image1[2]>>1;
 b2c:	8e 85       	ldd	r24, Y+14	; 0x0e
 b2e:	86 95       	lsr	r24
 b30:	8e 87       	std	Y+14, r24	; 0x0e
		rows_Image1[3]=rows_Image1[3]<<1;
 b32:	8f 85       	ldd	r24, Y+15	; 0x0f
 b34:	88 0f       	add	r24, r24
 b36:	8f 87       	std	Y+15, r24	; 0x0f
		rows_Image1[4]=rows_Image1[4]>>1;
 b38:	88 89       	ldd	r24, Y+16	; 0x10
 b3a:	86 95       	lsr	r24
 b3c:	88 8b       	std	Y+16, r24	; 0x10
		rows_Image1[5]=rows_Image1[5]<<1;
 b3e:	89 89       	ldd	r24, Y+17	; 0x11
 b40:	88 0f       	add	r24, r24
 b42:	89 8b       	std	Y+17, r24	; 0x11
		rows_Image1[6]=rows_Image1[6]>>1;
 b44:	8a 89       	ldd	r24, Y+18	; 0x12
 b46:	86 95       	lsr	r24
 b48:	8a 8b       	std	Y+18, r24	; 0x12
		rows_Image1[7]=rows_Image1[7]<<1;
 b4a:	8b 89       	ldd	r24, Y+19	; 0x13
 b4c:	88 0f       	add	r24, r24
 b4e:	8b 8b       	std	Y+19, r24	; 0x13
		if(GET_BIT(rows_Image1[0],0)==1)
 b50:	8c 85       	ldd	r24, Y+12	; 0x0c
 b52:	88 2f       	mov	r24, r24
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	81 70       	andi	r24, 0x01	; 1
 b58:	90 70       	andi	r25, 0x00	; 0
 b5a:	88 23       	and	r24, r24
 b5c:	19 f0       	breq	.+6      	; 0xb64 <main+0xf6>
		{
			SET_BIT(rows_Image1[1],0);
 b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
 b60:	81 60       	ori	r24, 0x01	; 1
 b62:	8d 87       	std	Y+13, r24	; 0x0d
		}

		if(GET_BIT(rows_Image1[1],7)==1)
 b64:	8d 85       	ldd	r24, Y+13	; 0x0d
 b66:	88 1f       	adc	r24, r24
 b68:	88 27       	eor	r24, r24
 b6a:	88 1f       	adc	r24, r24
 b6c:	88 2f       	mov	r24, r24
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	90 70       	andi	r25, 0x00	; 0
 b72:	81 30       	cpi	r24, 0x01	; 1
 b74:	91 05       	cpc	r25, r1
 b76:	19 f4       	brne	.+6      	; 0xb7e <main+0x110>
		{
			SET_BIT(rows_Image1[2],7);
 b78:	8e 85       	ldd	r24, Y+14	; 0x0e
 b7a:	80 68       	ori	r24, 0x80	; 128
 b7c:	8e 87       	std	Y+14, r24	; 0x0e

		}
		if(GET_BIT(rows_Image1[2],0)==1)
 b7e:	8e 85       	ldd	r24, Y+14	; 0x0e
 b80:	88 2f       	mov	r24, r24
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	81 70       	andi	r24, 0x01	; 1
 b86:	90 70       	andi	r25, 0x00	; 0
 b88:	88 23       	and	r24, r24
 b8a:	19 f0       	breq	.+6      	; 0xb92 <main+0x124>
		{
			SET_BIT(rows_Image1[3],0);
 b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
 b8e:	81 60       	ori	r24, 0x01	; 1
 b90:	8f 87       	std	Y+15, r24	; 0x0f

		}
		if(GET_BIT(rows_Image1[3],7)==1)
 b92:	8f 85       	ldd	r24, Y+15	; 0x0f
 b94:	88 1f       	adc	r24, r24
 b96:	88 27       	eor	r24, r24
 b98:	88 1f       	adc	r24, r24
 b9a:	88 2f       	mov	r24, r24
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	90 70       	andi	r25, 0x00	; 0
 ba0:	81 30       	cpi	r24, 0x01	; 1
 ba2:	91 05       	cpc	r25, r1
 ba4:	19 f4       	brne	.+6      	; 0xbac <main+0x13e>
		{
			SET_BIT(rows_Image1[4],7);
 ba6:	88 89       	ldd	r24, Y+16	; 0x10
 ba8:	80 68       	ori	r24, 0x80	; 128
 baa:	88 8b       	std	Y+16, r24	; 0x10

		}
		//////////////
		if(GET_BIT(rows_Image1[4],0)==1)
 bac:	88 89       	ldd	r24, Y+16	; 0x10
 bae:	88 2f       	mov	r24, r24
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	81 70       	andi	r24, 0x01	; 1
 bb4:	90 70       	andi	r25, 0x00	; 0
 bb6:	88 23       	and	r24, r24
 bb8:	19 f0       	breq	.+6      	; 0xbc0 <main+0x152>
		{
			SET_BIT(rows_Image1[5],0);
 bba:	89 89       	ldd	r24, Y+17	; 0x11
 bbc:	81 60       	ori	r24, 0x01	; 1
 bbe:	89 8b       	std	Y+17, r24	; 0x11

		}

		if(GET_BIT(rows_Image1[5],7)==1)
 bc0:	89 89       	ldd	r24, Y+17	; 0x11
 bc2:	88 1f       	adc	r24, r24
 bc4:	88 27       	eor	r24, r24
 bc6:	88 1f       	adc	r24, r24
 bc8:	88 2f       	mov	r24, r24
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	90 70       	andi	r25, 0x00	; 0
 bce:	81 30       	cpi	r24, 0x01	; 1
 bd0:	91 05       	cpc	r25, r1
 bd2:	19 f4       	brne	.+6      	; 0xbda <main+0x16c>
		{
			SET_BIT(rows_Image1[6],7);
 bd4:	8a 89       	ldd	r24, Y+18	; 0x12
 bd6:	80 68       	ori	r24, 0x80	; 128
 bd8:	8a 8b       	std	Y+18, r24	; 0x12
		}
		if(GET_BIT(rows_Image1[6],0)==1)
 bda:	8a 89       	ldd	r24, Y+18	; 0x12
 bdc:	88 2f       	mov	r24, r24
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	81 70       	andi	r24, 0x01	; 1
 be2:	90 70       	andi	r25, 0x00	; 0
 be4:	88 23       	and	r24, r24
 be6:	19 f0       	breq	.+6      	; 0xbee <main+0x180>
		{
			SET_BIT(rows_Image1[7],0);
 be8:	8b 89       	ldd	r24, Y+19	; 0x13
 bea:	81 60       	ori	r24, 0x01	; 1
 bec:	8b 8b       	std	Y+19, r24	; 0x13
		}
		if(GET_BIT(rows_Image1[7],7)==1)
 bee:	8b 89       	ldd	r24, Y+19	; 0x13
 bf0:	88 1f       	adc	r24, r24
 bf2:	88 27       	eor	r24, r24
 bf4:	88 1f       	adc	r24, r24
 bf6:	88 2f       	mov	r24, r24
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	90 70       	andi	r25, 0x00	; 0
 bfc:	81 30       	cpi	r24, 0x01	; 1
 bfe:	91 05       	cpc	r25, r1
 c00:	19 f4       	brne	.+6      	; 0xc08 <main+0x19a>
		{
			SET_BIT(rows_Image1[0],7);
 c02:	8c 85       	ldd	r24, Y+12	; 0x0c
 c04:	80 68       	ori	r24, 0x80	; 128
 c06:	8c 87       	std	Y+12, r24	; 0x0c
		}
		//////////////

		for(u8 j=0;j<62;j++)
 c08:	1a 82       	std	Y+2, r1	; 0x02
 c0a:	2d c0       	rjmp	.+90     	; 0xc66 <main+0x1f8>
		{
			for(u8 i=0;i<8;i++)
 c0c:	19 82       	std	Y+1, r1	; 0x01
 c0e:	21 c0       	rjmp	.+66     	; 0xc52 <main+0x1e4>
			{
				PORTA=cols[i];
 c10:	ab e3       	ldi	r26, 0x3B	; 59
 c12:	b0 e0       	ldi	r27, 0x00	; 0
 c14:	89 81       	ldd	r24, Y+1	; 0x01
 c16:	28 2f       	mov	r18, r24
 c18:	30 e0       	ldi	r19, 0x00	; 0
 c1a:	ce 01       	movw	r24, r28
 c1c:	04 96       	adiw	r24, 0x04	; 4
 c1e:	fc 01       	movw	r30, r24
 c20:	e2 0f       	add	r30, r18
 c22:	f3 1f       	adc	r31, r19
 c24:	80 81       	ld	r24, Z
 c26:	8c 93       	st	X, r24
				PORTD=rows_Image1[i];
 c28:	a2 e3       	ldi	r26, 0x32	; 50
 c2a:	b0 e0       	ldi	r27, 0x00	; 0
 c2c:	89 81       	ldd	r24, Y+1	; 0x01
 c2e:	28 2f       	mov	r18, r24
 c30:	30 e0       	ldi	r19, 0x00	; 0
 c32:	ce 01       	movw	r24, r28
 c34:	0c 96       	adiw	r24, 0x0c	; 12
 c36:	fc 01       	movw	r30, r24
 c38:	e2 0f       	add	r30, r18
 c3a:	f3 1f       	adc	r31, r19
 c3c:	80 81       	ld	r24, Z
 c3e:	8c 93       	st	X, r24
				Delay_ms(2);
 c40:	62 e0       	ldi	r22, 0x02	; 2
 c42:	70 e0       	ldi	r23, 0x00	; 0
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
		}
		//////////////

		for(u8 j=0;j<62;j++)
		{
			for(u8 i=0;i<8;i++)
 c4c:	89 81       	ldd	r24, Y+1	; 0x01
 c4e:	8f 5f       	subi	r24, 0xFF	; 255
 c50:	89 83       	std	Y+1, r24	; 0x01
 c52:	89 81       	ldd	r24, Y+1	; 0x01
 c54:	88 30       	cpi	r24, 0x08	; 8
 c56:	e0 f2       	brcs	.-72     	; 0xc10 <main+0x1a2>
			{
				PORTA=cols[i];
				PORTD=rows_Image1[i];
				Delay_ms(2);
			}
		PORTA=0xff;
 c58:	eb e3       	ldi	r30, 0x3B	; 59
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	8f ef       	ldi	r24, 0xFF	; 255
 c5e:	80 83       	st	Z, r24
		{
			SET_BIT(rows_Image1[0],7);
		}
		//////////////

		for(u8 j=0;j<62;j++)
 c60:	8a 81       	ldd	r24, Y+2	; 0x02
 c62:	8f 5f       	subi	r24, 0xFF	; 255
 c64:	8a 83       	std	Y+2, r24	; 0x02
 c66:	8a 81       	ldd	r24, Y+2	; 0x02
 c68:	8e 33       	cpi	r24, 0x3E	; 62
 c6a:	80 f2       	brcs	.-96     	; 0xc0c <main+0x19e>
				PORTD=rows_Image1[i];
				Delay_ms(2);
			}
		PORTA=0xff;
		}
		if(o==5)
 c6c:	8b 81       	ldd	r24, Y+3	; 0x03
 c6e:	85 30       	cpi	r24, 0x05	; 5
 c70:	29 f4       	brne	.+10     	; 0xc7c <main+0x20e>
				{
					o=-1;
 c72:	8f ef       	ldi	r24, 0xFF	; 255
 c74:	8b 83       	std	Y+3, r24	; 0x03
					LCD_voidWriteCmd(0b00000001);
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_voidWriteCmd>

				}
				LCD_voidWriteData(chars[o]);
 c7c:	8b 81       	ldd	r24, Y+3	; 0x03
 c7e:	28 2f       	mov	r18, r24
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	ce 01       	movw	r24, r28
 c84:	44 96       	adiw	r24, 0x14	; 20
 c86:	fc 01       	movw	r30, r24
 c88:	e2 0f       	add	r30, r18
 c8a:	f3 1f       	adc	r31, r19
 c8c:	80 81       	ld	r24, Z
 c8e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_voidWriteData>
				//Delay_ms(1);
				o++;
 c92:	8b 81       	ldd	r24, Y+3	; 0x03
 c94:	8f 5f       	subi	r24, 0xFF	; 255
 c96:	8b 83       	std	Y+3, r24	; 0x03
 c98:	43 cf       	rjmp	.-378    	; 0xb20 <main+0xb2>

00000c9a <__mulsi3>:
 c9a:	62 9f       	mul	r22, r18
 c9c:	d0 01       	movw	r26, r0
 c9e:	73 9f       	mul	r23, r19
 ca0:	f0 01       	movw	r30, r0
 ca2:	82 9f       	mul	r24, r18
 ca4:	e0 0d       	add	r30, r0
 ca6:	f1 1d       	adc	r31, r1
 ca8:	64 9f       	mul	r22, r20
 caa:	e0 0d       	add	r30, r0
 cac:	f1 1d       	adc	r31, r1
 cae:	92 9f       	mul	r25, r18
 cb0:	f0 0d       	add	r31, r0
 cb2:	83 9f       	mul	r24, r19
 cb4:	f0 0d       	add	r31, r0
 cb6:	74 9f       	mul	r23, r20
 cb8:	f0 0d       	add	r31, r0
 cba:	65 9f       	mul	r22, r21
 cbc:	f0 0d       	add	r31, r0
 cbe:	99 27       	eor	r25, r25
 cc0:	72 9f       	mul	r23, r18
 cc2:	b0 0d       	add	r27, r0
 cc4:	e1 1d       	adc	r30, r1
 cc6:	f9 1f       	adc	r31, r25
 cc8:	63 9f       	mul	r22, r19
 cca:	b0 0d       	add	r27, r0
 ccc:	e1 1d       	adc	r30, r1
 cce:	f9 1f       	adc	r31, r25
 cd0:	bd 01       	movw	r22, r26
 cd2:	cf 01       	movw	r24, r30
 cd4:	11 24       	eor	r1, r1
 cd6:	08 95       	ret

00000cd8 <__udivmodsi4>:
 cd8:	a1 e2       	ldi	r26, 0x21	; 33
 cda:	1a 2e       	mov	r1, r26
 cdc:	aa 1b       	sub	r26, r26
 cde:	bb 1b       	sub	r27, r27
 ce0:	fd 01       	movw	r30, r26
 ce2:	0d c0       	rjmp	.+26     	; 0xcfe <__udivmodsi4_ep>

00000ce4 <__udivmodsi4_loop>:
 ce4:	aa 1f       	adc	r26, r26
 ce6:	bb 1f       	adc	r27, r27
 ce8:	ee 1f       	adc	r30, r30
 cea:	ff 1f       	adc	r31, r31
 cec:	a2 17       	cp	r26, r18
 cee:	b3 07       	cpc	r27, r19
 cf0:	e4 07       	cpc	r30, r20
 cf2:	f5 07       	cpc	r31, r21
 cf4:	20 f0       	brcs	.+8      	; 0xcfe <__udivmodsi4_ep>
 cf6:	a2 1b       	sub	r26, r18
 cf8:	b3 0b       	sbc	r27, r19
 cfa:	e4 0b       	sbc	r30, r20
 cfc:	f5 0b       	sbc	r31, r21

00000cfe <__udivmodsi4_ep>:
 cfe:	66 1f       	adc	r22, r22
 d00:	77 1f       	adc	r23, r23
 d02:	88 1f       	adc	r24, r24
 d04:	99 1f       	adc	r25, r25
 d06:	1a 94       	dec	r1
 d08:	69 f7       	brne	.-38     	; 0xce4 <__udivmodsi4_loop>
 d0a:	60 95       	com	r22
 d0c:	70 95       	com	r23
 d0e:	80 95       	com	r24
 d10:	90 95       	com	r25
 d12:	9b 01       	movw	r18, r22
 d14:	ac 01       	movw	r20, r24
 d16:	bd 01       	movw	r22, r26
 d18:	cf 01       	movw	r24, r30
 d1a:	08 95       	ret

00000d1c <_exit>:
 d1c:	f8 94       	cli

00000d1e <__stop_program>:
 d1e:	ff cf       	rjmp	.-2      	; 0xd1e <__stop_program>
