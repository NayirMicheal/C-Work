
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000718  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000078c  2**0
                  ALLOC
  2 .stab         00000b4c  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000050d  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 34 03 	call	0x668	; 0x668 <main>
  74:	0c 94 8a 03 	jmp	0x714	; 0x714 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	2c 97       	sbiw	r28, 0x0c	; 12
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	69 87       	std	Y+9, r22	; 0x09
  92:	7a 87       	std	Y+10, r23	; 0x0a
  94:	8b 87       	std	Y+11, r24	; 0x0b
  96:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  98:	89 85       	ldd	r24, Y+9	; 0x09
  9a:	9a 85       	ldd	r25, Y+10	; 0x0a
  9c:	ab 85       	ldd	r26, Y+11	; 0x0b
  9e:	bc 85       	ldd	r27, Y+12	; 0x0c
  a0:	22 e7       	ldi	r18, 0x72	; 114
  a2:	31 e0       	ldi	r19, 0x01	; 1
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	bc 01       	movw	r22, r24
  aa:	cd 01       	movw	r24, r26
  ac:	0e 94 49 03 	call	0x692	; 0x692 <__mulsi3>
  b0:	dc 01       	movw	r26, r24
  b2:	cb 01       	movw	r24, r22
  b4:	89 83       	std	Y+1, r24	; 0x01
  b6:	9a 83       	std	Y+2, r25	; 0x02
  b8:	ab 83       	std	Y+3, r26	; 0x03
  ba:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  bc:	1d 82       	std	Y+5, r1	; 0x05
  be:	1e 82       	std	Y+6, r1	; 0x06
  c0:	1f 82       	std	Y+7, r1	; 0x07
  c2:	18 86       	std	Y+8, r1	; 0x08
  c4:	0c c0       	rjmp	.+24     	; 0xde <Delay_ms+0x62>
	{
		asm("nop");
  c6:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  c8:	8d 81       	ldd	r24, Y+5	; 0x05
  ca:	9e 81       	ldd	r25, Y+6	; 0x06
  cc:	af 81       	ldd	r26, Y+7	; 0x07
  ce:	b8 85       	ldd	r27, Y+8	; 0x08
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	a1 1d       	adc	r26, r1
  d4:	b1 1d       	adc	r27, r1
  d6:	8d 83       	std	Y+5, r24	; 0x05
  d8:	9e 83       	std	Y+6, r25	; 0x06
  da:	af 83       	std	Y+7, r26	; 0x07
  dc:	b8 87       	std	Y+8, r27	; 0x08
  de:	2d 81       	ldd	r18, Y+5	; 0x05
  e0:	3e 81       	ldd	r19, Y+6	; 0x06
  e2:	4f 81       	ldd	r20, Y+7	; 0x07
  e4:	58 85       	ldd	r21, Y+8	; 0x08
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	ab 81       	ldd	r26, Y+3	; 0x03
  ec:	bc 81       	ldd	r27, Y+4	; 0x04
  ee:	28 17       	cp	r18, r24
  f0:	39 07       	cpc	r19, r25
  f2:	4a 07       	cpc	r20, r26
  f4:	5b 07       	cpc	r21, r27
  f6:	38 f3       	brcs	.-50     	; 0xc6 <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  f8:	2c 96       	adiw	r28, 0x0c	; 12
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	cf 91       	pop	r28
 106:	df 91       	pop	r29
 108:	08 95       	ret

0000010a <Delay_us>:
void Delay_us(u32 DelayValue)
{
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	2c 97       	sbiw	r28, 0x0c	; 12
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	69 87       	std	Y+9, r22	; 0x09
 120:	7a 87       	std	Y+10, r23	; 0x0a
 122:	8b 87       	std	Y+11, r24	; 0x0b
 124:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 126:	89 85       	ldd	r24, Y+9	; 0x09
 128:	9a 85       	ldd	r25, Y+10	; 0x0a
 12a:	ab 85       	ldd	r26, Y+11	; 0x0b
 12c:	bc 85       	ldd	r27, Y+12	; 0x0c
 12e:	27 e7       	ldi	r18, 0x77	; 119
 130:	31 e0       	ldi	r19, 0x01	; 1
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	bc 01       	movw	r22, r24
 138:	cd 01       	movw	r24, r26
 13a:	0e 94 49 03 	call	0x692	; 0x692 <__mulsi3>
 13e:	dc 01       	movw	r26, r24
 140:	cb 01       	movw	r24, r22
 142:	89 5d       	subi	r24, 0xD9	; 217
 144:	94 44       	sbci	r25, 0x44	; 68
 146:	a0 40       	sbci	r26, 0x00	; 0
 148:	b0 40       	sbci	r27, 0x00	; 0
 14a:	28 ee       	ldi	r18, 0xE8	; 232
 14c:	33 e0       	ldi	r19, 0x03	; 3
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	bc 01       	movw	r22, r24
 154:	cd 01       	movw	r24, r26
 156:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__udivmodsi4>
 15a:	da 01       	movw	r26, r20
 15c:	c9 01       	movw	r24, r18
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	9a 83       	std	Y+2, r25	; 0x02
 162:	ab 83       	std	Y+3, r26	; 0x03
 164:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 166:	1d 82       	std	Y+5, r1	; 0x05
 168:	1e 82       	std	Y+6, r1	; 0x06
 16a:	1f 82       	std	Y+7, r1	; 0x07
 16c:	18 86       	std	Y+8, r1	; 0x08
 16e:	0c c0       	rjmp	.+24     	; 0x188 <Delay_us+0x7e>
	{
		asm("nop");
 170:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 172:	8d 81       	ldd	r24, Y+5	; 0x05
 174:	9e 81       	ldd	r25, Y+6	; 0x06
 176:	af 81       	ldd	r26, Y+7	; 0x07
 178:	b8 85       	ldd	r27, Y+8	; 0x08
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	a1 1d       	adc	r26, r1
 17e:	b1 1d       	adc	r27, r1
 180:	8d 83       	std	Y+5, r24	; 0x05
 182:	9e 83       	std	Y+6, r25	; 0x06
 184:	af 83       	std	Y+7, r26	; 0x07
 186:	b8 87       	std	Y+8, r27	; 0x08
 188:	2d 81       	ldd	r18, Y+5	; 0x05
 18a:	3e 81       	ldd	r19, Y+6	; 0x06
 18c:	4f 81       	ldd	r20, Y+7	; 0x07
 18e:	58 85       	ldd	r21, Y+8	; 0x08
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	9a 81       	ldd	r25, Y+2	; 0x02
 194:	ab 81       	ldd	r26, Y+3	; 0x03
 196:	bc 81       	ldd	r27, Y+4	; 0x04
 198:	28 17       	cp	r18, r24
 19a:	39 07       	cpc	r19, r25
 19c:	4a 07       	cpc	r20, r26
 19e:	5b 07       	cpc	r21, r27
 1a0:	38 f3       	brcs	.-50     	; 0x170 <Delay_us+0x66>
	{
		asm("nop");
	}
 1a2:	2c 96       	adiw	r28, 0x0c	; 12
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	08 95       	ret

000001b4 <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1bc:	ea e3       	ldi	r30, 0x3A	; 58
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1c4:	e7 e3       	ldi	r30, 0x37	; 55
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	10 82       	st	Z, r1
	DDRC = DIO_u8_PORTC_DIRECTION;
 1ca:	e4 e3       	ldi	r30, 0x34	; 52
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	10 82       	st	Z, r1
	DDRD = DIO_u8_PORTD_DIRECTION;
 1d0:	e1 e3       	ldi	r30, 0x31	; 49
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	10 82       	st	Z, r1
}
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	08 95       	ret

000001dc <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <DIO_voidSetPinValue+0x6>
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	60 f5       	brcc	.+88     	; 0x248 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	88 23       	and	r24, r24
 1f4:	a1 f4       	brne	.+40     	; 0x21e <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 1f6:	ab e3       	ldi	r26, 0x3B	; 59
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	eb e3       	ldi	r30, 0x3B	; 59
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	48 2f       	mov	r20, r24
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 2e       	mov	r0, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_voidSetPinValue+0x38>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_voidSetPinValue+0x34>
 218:	84 2b       	or	r24, r20
 21a:	8c 93       	st	X, r24
 21c:	b3 c0       	rjmp	.+358    	; 0x384 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 21e:	ab e3       	ldi	r26, 0x3B	; 59
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	eb e3       	ldi	r30, 0x3B	; 59
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	48 2f       	mov	r20, r24
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 2e       	mov	r0, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_voidSetPinValue+0x60>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_voidSetPinValue+0x5c>
 240:	80 95       	com	r24
 242:	84 23       	and	r24, r20
 244:	8c 93       	st	X, r24
 246:	9e c0       	rjmp	.+316    	; 0x384 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	88 30       	cpi	r24, 0x08	; 8
 24c:	90 f1       	brcs	.+100    	; 0x2b2 <DIO_voidSetPinValue+0xd6>
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	80 31       	cpi	r24, 0x10	; 16
 252:	78 f5       	brcc	.+94     	; 0x2b2 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	88 50       	subi	r24, 0x08	; 8
 258:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	88 23       	and	r24, r24
 25e:	a1 f4       	brne	.+40     	; 0x288 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 260:	a8 e3       	ldi	r26, 0x38	; 56
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e8 e3       	ldi	r30, 0x38	; 56
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	48 2f       	mov	r20, r24
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 2e       	mov	r0, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_voidSetPinValue+0xa2>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_voidSetPinValue+0x9e>
 282:	84 2b       	or	r24, r20
 284:	8c 93       	st	X, r24
 286:	7e c0       	rjmp	.+252    	; 0x384 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 288:	a8 e3       	ldi	r26, 0x38	; 56
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	e8 e3       	ldi	r30, 0x38	; 56
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	48 2f       	mov	r20, r24
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	28 2f       	mov	r18, r24
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 2e       	mov	r0, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_voidSetPinValue+0xca>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_voidSetPinValue+0xc6>
 2aa:	80 95       	com	r24
 2ac:	84 23       	and	r24, r20
 2ae:	8c 93       	st	X, r24
 2b0:	69 c0       	rjmp	.+210    	; 0x384 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	80 31       	cpi	r24, 0x10	; 16
 2b6:	90 f1       	brcs	.+100    	; 0x31c <DIO_voidSetPinValue+0x140>
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	88 31       	cpi	r24, 0x18	; 24
 2bc:	78 f5       	brcc	.+94     	; 0x31c <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	80 51       	subi	r24, 0x10	; 16
 2c2:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	88 23       	and	r24, r24
 2c8:	a1 f4       	brne	.+40     	; 0x2f2 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2ca:	a5 e3       	ldi	r26, 0x35	; 53
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	e5 e3       	ldi	r30, 0x35	; 53
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	48 2f       	mov	r20, r24
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 2e       	mov	r0, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_voidSetPinValue+0x10c>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	0a 94       	dec	r0
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_voidSetPinValue+0x108>
 2ec:	84 2b       	or	r24, r20
 2ee:	8c 93       	st	X, r24
 2f0:	49 c0       	rjmp	.+146    	; 0x384 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2f2:	a5 e3       	ldi	r26, 0x35	; 53
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	e5 e3       	ldi	r30, 0x35	; 53
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	48 2f       	mov	r20, r24
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	28 2f       	mov	r18, r24
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 2e       	mov	r0, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_voidSetPinValue+0x134>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_voidSetPinValue+0x130>
 314:	80 95       	com	r24
 316:	84 23       	and	r24, r20
 318:	8c 93       	st	X, r24
 31a:	34 c0       	rjmp	.+104    	; 0x384 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	88 f1       	brcs	.+98     	; 0x384 <DIO_voidSetPinValue+0x1a8>
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	80 32       	cpi	r24, 0x20	; 32
 326:	70 f5       	brcc	.+92     	; 0x384 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	88 51       	subi	r24, 0x18	; 24
 32c:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	88 23       	and	r24, r24
 332:	a1 f4       	brne	.+40     	; 0x35c <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 334:	a2 e3       	ldi	r26, 0x32	; 50
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e2 e3       	ldi	r30, 0x32	; 50
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	48 2f       	mov	r20, r24
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 2e       	mov	r0, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_voidSetPinValue+0x176>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_voidSetPinValue+0x172>
 356:	84 2b       	or	r24, r20
 358:	8c 93       	st	X, r24
 35a:	14 c0       	rjmp	.+40     	; 0x384 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 35c:	a2 e3       	ldi	r26, 0x32	; 50
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e2 e3       	ldi	r30, 0x32	; 50
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_voidSetPinValue+0x19e>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_voidSetPinValue+0x19a>
 37e:	80 95       	com	r24
 380:	84 23       	and	r24, r20
 382:	8c 93       	st	X, r24
		}			
	}
}
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	cf 91       	pop	r28
 38a:	df 91       	pop	r29
 38c:	08 95       	ret

0000038e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 38e:	df 93       	push	r29
 390:	cf 93       	push	r28
 392:	00 d0       	rcall	.+0      	; 0x394 <DIO_u8GetPinValue+0x6>
 394:	00 d0       	rcall	.+0      	; 0x396 <DIO_u8GetPinValue+0x8>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 39c:	8c 81       	ldd	r24, Y+4	; 0x04
 39e:	88 30       	cpi	r24, 0x08	; 8
 3a0:	00 f5       	brcc	.+64     	; 0x3e2 <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3a6:	e9 e3       	ldi	r30, 0x39	; 57
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	48 2f       	mov	r20, r24
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8GetPinValue+0x32>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	2a 95       	dec	r18
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8GetPinValue+0x2e>
 3c4:	9a 01       	movw	r18, r20
 3c6:	28 23       	and	r18, r24
 3c8:	39 23       	and	r19, r25
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	88 2f       	mov	r24, r24
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	a9 01       	movw	r20, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8GetPinValue+0x4a>
 3d4:	55 95       	asr	r21
 3d6:	47 95       	ror	r20
 3d8:	8a 95       	dec	r24
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8GetPinValue+0x46>
 3dc:	ca 01       	movw	r24, r20
 3de:	8a 83       	std	Y+2, r24	; 0x02
 3e0:	74 c0       	rjmp	.+232    	; 0x4ca <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 3e2:	8c 81       	ldd	r24, Y+4	; 0x04
 3e4:	80 31       	cpi	r24, 0x10	; 16
 3e6:	20 f1       	brcs	.+72     	; 0x430 <DIO_u8GetPinValue+0xa2>
 3e8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ea:	88 31       	cpi	r24, 0x18	; 24
 3ec:	08 f5       	brcc	.+66     	; 0x430 <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 3ee:	8c 81       	ldd	r24, Y+4	; 0x04
 3f0:	88 50       	subi	r24, 0x08	; 8
 3f2:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 3f4:	e6 e3       	ldi	r30, 0x36	; 54
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8GetPinValue+0x80>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	2a 95       	dec	r18
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_u8GetPinValue+0x7c>
 412:	9a 01       	movw	r18, r20
 414:	28 23       	and	r18, r24
 416:	39 23       	and	r19, r25
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	88 2f       	mov	r24, r24
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	a9 01       	movw	r20, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_u8GetPinValue+0x98>
 422:	55 95       	asr	r21
 424:	47 95       	ror	r20
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_u8GetPinValue+0x94>
 42a:	ca 01       	movw	r24, r20
 42c:	8a 83       	std	Y+2, r24	; 0x02
 42e:	4d c0       	rjmp	.+154    	; 0x4ca <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 430:	8c 81       	ldd	r24, Y+4	; 0x04
 432:	80 31       	cpi	r24, 0x10	; 16
 434:	20 f1       	brcs	.+72     	; 0x47e <DIO_u8GetPinValue+0xf0>
 436:	8c 81       	ldd	r24, Y+4	; 0x04
 438:	88 31       	cpi	r24, 0x18	; 24
 43a:	08 f5       	brcc	.+66     	; 0x47e <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 43c:	8c 81       	ldd	r24, Y+4	; 0x04
 43e:	80 51       	subi	r24, 0x10	; 16
 440:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 442:	e6 e3       	ldi	r30, 0x36	; 54
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	48 2f       	mov	r20, r24
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	8b 81       	ldd	r24, Y+3	; 0x03
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_u8GetPinValue+0xce>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	2a 95       	dec	r18
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_u8GetPinValue+0xca>
 460:	9a 01       	movw	r18, r20
 462:	28 23       	and	r18, r24
 464:	39 23       	and	r19, r25
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	88 2f       	mov	r24, r24
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	a9 01       	movw	r20, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_u8GetPinValue+0xe6>
 470:	55 95       	asr	r21
 472:	47 95       	ror	r20
 474:	8a 95       	dec	r24
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_u8GetPinValue+0xe2>
 478:	ca 01       	movw	r24, r20
 47a:	8a 83       	std	Y+2, r24	; 0x02
 47c:	26 c0       	rjmp	.+76     	; 0x4ca <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 47e:	8c 81       	ldd	r24, Y+4	; 0x04
 480:	88 31       	cpi	r24, 0x18	; 24
 482:	18 f1       	brcs	.+70     	; 0x4ca <DIO_u8GetPinValue+0x13c>
 484:	8c 81       	ldd	r24, Y+4	; 0x04
 486:	80 32       	cpi	r24, 0x20	; 32
 488:	00 f5       	brcc	.+64     	; 0x4ca <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 48a:	8c 81       	ldd	r24, Y+4	; 0x04
 48c:	88 51       	subi	r24, 0x18	; 24
 48e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 490:	e0 e3       	ldi	r30, 0x30	; 48
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	48 2f       	mov	r20, r24
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_u8GetPinValue+0x11c>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	2a 95       	dec	r18
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_u8GetPinValue+0x118>
 4ae:	9a 01       	movw	r18, r20
 4b0:	28 23       	and	r18, r24
 4b2:	39 23       	and	r19, r25
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	88 2f       	mov	r24, r24
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	a9 01       	movw	r20, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_u8GetPinValue+0x134>
 4be:	55 95       	asr	r21
 4c0:	47 95       	ror	r20
 4c2:	8a 95       	dec	r24
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_u8GetPinValue+0x130>
 4c6:	ca 01       	movw	r24, r20
 4c8:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	88 23       	and	r24, r24
 4ce:	19 f4       	brne	.+6      	; 0x4d6 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	89 83       	std	Y+1, r24	; 0x01
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	09 f4       	brne	.+2      	; 0x4de <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4de:	89 81       	ldd	r24, Y+1	; 0x01
}
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	cf 91       	pop	r28
 4ea:	df 91       	pop	r29
 4ec:	08 95       	ret

000004ee <EXTI_voidInit>:
#include"EXTI_config.h"
#include "EXTI_int.h"
/*this function shall intialize the EXTI and*/
/*Set its ooperation initially disabled*/
void EXTI_voidInit(void)
{
 4ee:	df 93       	push	r29
 4f0:	cf 93       	push	r28
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
	/*set EXTI 0 mode to Interrupt on change*/
	SET_BIT(MCUCR,0);
 4f6:	a5 e5       	ldi	r26, 0x55	; 85
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e5 e5       	ldi	r30, 0x55	; 85
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	81 60       	ori	r24, 0x01	; 1
 502:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
 504:	a5 e5       	ldi	r26, 0x55	; 85
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	e5 e5       	ldi	r30, 0x55	; 85
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	8d 7f       	andi	r24, 0xFD	; 253
 510:	8c 93       	st	X, r24

	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
 512:	ab e5       	ldi	r26, 0x5B	; 91
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	eb e5       	ldi	r30, 0x5B	; 91
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	8f 7b       	andi	r24, 0xBF	; 191
 51e:	8c 93       	st	X, r24

	/*Clear Flag*/
	SET_BIT(GIFR,6);
 520:	aa e5       	ldi	r26, 0x5A	; 90
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	ea e5       	ldi	r30, 0x5A	; 90
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	80 64       	ori	r24, 0x40	; 64
 52c:	8c 93       	st	X, r24
}
 52e:	cf 91       	pop	r28
 530:	df 91       	pop	r29
 532:	08 95       	ret

00000534 <EXTI_voidSetCallback>:

/*this function shall set the callback pointer*/
/*to the recieved address*/
void EXTI_voidSetCallback(void (*ptrCpy)(void))
{
 534:	df 93       	push	r29
 536:	cf 93       	push	r28
 538:	00 d0       	rcall	.+0      	; 0x53a <EXTI_voidSetCallback+0x6>
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	9a 83       	std	Y+2, r25	; 0x02
 540:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidCallback=ptrCpy;
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	9a 81       	ldd	r25, Y+2	; 0x02
 546:	90 93 61 00 	sts	0x0061, r25
 54a:	80 93 60 00 	sts	0x0060, r24
}
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <EXTI_voidEnable>:

/*this function shall enable the external interrupt*/
void EXTI_voidEnable(void)
{
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
 560:	ab e5       	ldi	r26, 0x5B	; 91
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	eb e5       	ldi	r30, 0x5B	; 91
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	80 64       	ori	r24, 0x40	; 64
 56c:	8c 93       	st	X, r24

}
 56e:	cf 91       	pop	r28
 570:	df 91       	pop	r29
 572:	08 95       	ret

00000574 <EXTI_voidDisable>:

/*this function shall disable the external interrupt*/
void EXTI_voidDisable(void)
{
 574:	df 93       	push	r29
 576:	cf 93       	push	r28
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
 57c:	ab e5       	ldi	r26, 0x5B	; 91
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	eb e5       	ldi	r30, 0x5B	; 91
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	8f 7b       	andi	r24, 0xBF	; 191
 588:	8c 93       	st	X, r24

}
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <__vector_1>:

void  __vector_1  (void) __attribute__((signal,used));
void  __vector_1  (void)
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
 5b2:	df 93       	push	r29
 5b4:	cf 93       	push	r28
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallback();
 5ba:	e0 91 60 00 	lds	r30, 0x0060
 5be:	f0 91 61 00 	lds	r31, 0x0061
 5c2:	09 95       	icall
}
 5c4:	cf 91       	pop	r28
 5c6:	df 91       	pop	r29
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 5f2:	af e5       	ldi	r26, 0x5F	; 95
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	ef e5       	ldi	r30, 0x5F	; 95
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	80 68       	ori	r24, 0x80	; 128
 5fe:	8c 93       	st	X, r24
}
 600:	cf 91       	pop	r28
 602:	df 91       	pop	r29
 604:	08 95       	ret

00000606 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 606:	df 93       	push	r29
 608:	cf 93       	push	r28
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 60e:	af e5       	ldi	r26, 0x5F	; 95
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	ef e5       	ldi	r30, 0x5F	; 95
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	8f 77       	andi	r24, 0x7F	; 127
 61a:	8c 93       	st	X, r24
}
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <App>:
#include "DELAY.h"
#include "DIO_int.h"
#include"GIE_int.h"
#include "EXTI_int.h"
void App(void)
{
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
	static u8 flag=0;
	if(flag==0)
 62a:	80 91 62 00 	lds	r24, 0x0062
 62e:	88 23       	and	r24, r24
 630:	41 f4       	brne	.+16     	; 0x642 <App+0x20>
	{
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_voidSetPinValue>
		flag=1;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	80 93 62 00 	sts	0x0062, r24
 640:	0a c0       	rjmp	.+20     	; 0x656 <App+0x34>

	}
	else if(flag==1)
 642:	80 91 62 00 	lds	r24, 0x0062
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	31 f4       	brne	.+12     	; 0x656 <App+0x34>
	{
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_voidSetPinValue>
		flag=0;
 652:	10 92 62 00 	sts	0x0062, r1
	}
Delay_ms(200);
 656:	68 ec       	ldi	r22, 0xC8	; 200
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 3e 00 	call	0x7c	; 0x7c <Delay_ms>
}
 662:	cf 91       	pop	r28
 664:	df 91       	pop	r29
 666:	08 95       	ret

00000668 <main>:
void main(void)
{
 668:	df 93       	push	r29
 66a:	cf 93       	push	r28
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 670:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_26,DIO_u8_HIGH);
 674:	8a e1       	ldi	r24, 0x1A	; 26
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_voidSetPinValue>
	EXTI_voidInit();
 67c:	0e 94 77 02 	call	0x4ee	; 0x4ee <EXTI_voidInit>
	EXTI_voidSetCallback(App);
 680:	81 e1       	ldi	r24, 0x11	; 17
 682:	93 e0       	ldi	r25, 0x03	; 3
 684:	0e 94 9a 02 	call	0x534	; 0x534 <EXTI_voidSetCallback>
	EXTI_voidEnable();
 688:	0e 94 ac 02 	call	0x558	; 0x558 <EXTI_voidEnable>
	GIE_EnableGlobalInterrupt();
 68c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <GIE_EnableGlobalInterrupt>
 690:	ff cf       	rjmp	.-2      	; 0x690 <main+0x28>

00000692 <__mulsi3>:
 692:	62 9f       	mul	r22, r18
 694:	d0 01       	movw	r26, r0
 696:	73 9f       	mul	r23, r19
 698:	f0 01       	movw	r30, r0
 69a:	82 9f       	mul	r24, r18
 69c:	e0 0d       	add	r30, r0
 69e:	f1 1d       	adc	r31, r1
 6a0:	64 9f       	mul	r22, r20
 6a2:	e0 0d       	add	r30, r0
 6a4:	f1 1d       	adc	r31, r1
 6a6:	92 9f       	mul	r25, r18
 6a8:	f0 0d       	add	r31, r0
 6aa:	83 9f       	mul	r24, r19
 6ac:	f0 0d       	add	r31, r0
 6ae:	74 9f       	mul	r23, r20
 6b0:	f0 0d       	add	r31, r0
 6b2:	65 9f       	mul	r22, r21
 6b4:	f0 0d       	add	r31, r0
 6b6:	99 27       	eor	r25, r25
 6b8:	72 9f       	mul	r23, r18
 6ba:	b0 0d       	add	r27, r0
 6bc:	e1 1d       	adc	r30, r1
 6be:	f9 1f       	adc	r31, r25
 6c0:	63 9f       	mul	r22, r19
 6c2:	b0 0d       	add	r27, r0
 6c4:	e1 1d       	adc	r30, r1
 6c6:	f9 1f       	adc	r31, r25
 6c8:	bd 01       	movw	r22, r26
 6ca:	cf 01       	movw	r24, r30
 6cc:	11 24       	eor	r1, r1
 6ce:	08 95       	ret

000006d0 <__udivmodsi4>:
 6d0:	a1 e2       	ldi	r26, 0x21	; 33
 6d2:	1a 2e       	mov	r1, r26
 6d4:	aa 1b       	sub	r26, r26
 6d6:	bb 1b       	sub	r27, r27
 6d8:	fd 01       	movw	r30, r26
 6da:	0d c0       	rjmp	.+26     	; 0x6f6 <__udivmodsi4_ep>

000006dc <__udivmodsi4_loop>:
 6dc:	aa 1f       	adc	r26, r26
 6de:	bb 1f       	adc	r27, r27
 6e0:	ee 1f       	adc	r30, r30
 6e2:	ff 1f       	adc	r31, r31
 6e4:	a2 17       	cp	r26, r18
 6e6:	b3 07       	cpc	r27, r19
 6e8:	e4 07       	cpc	r30, r20
 6ea:	f5 07       	cpc	r31, r21
 6ec:	20 f0       	brcs	.+8      	; 0x6f6 <__udivmodsi4_ep>
 6ee:	a2 1b       	sub	r26, r18
 6f0:	b3 0b       	sbc	r27, r19
 6f2:	e4 0b       	sbc	r30, r20
 6f4:	f5 0b       	sbc	r31, r21

000006f6 <__udivmodsi4_ep>:
 6f6:	66 1f       	adc	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	1a 94       	dec	r1
 700:	69 f7       	brne	.-38     	; 0x6dc <__udivmodsi4_loop>
 702:	60 95       	com	r22
 704:	70 95       	com	r23
 706:	80 95       	com	r24
 708:	90 95       	com	r25
 70a:	9b 01       	movw	r18, r22
 70c:	ac 01       	movw	r20, r24
 70e:	bd 01       	movw	r22, r26
 710:	cf 01       	movw	r24, r30
 712:	08 95       	ret

00000714 <_exit>:
 714:	f8 94       	cli

00000716 <__stop_program>:
 716:	ff cf       	rjmp	.-2      	; 0x716 <__stop_program>
