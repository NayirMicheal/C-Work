
Car_Parking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ed2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000ed2  00000f66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800098  00800098  00000f9e  2**0
                  ALLOC
  3 .stab         00001710  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000096c  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_10>
  2c:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 05 	call	0xb62	; 0xb62 <main>
  8a:	0c 94 67 07 	jmp	0xece	; 0xece <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 45 07 	call	0xe8a	; 0xe8a <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1ea:	e1 e3       	ldi	r30, 0x31	; 49
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8a ef       	ldi	r24, 0xFA	; 250
 1f0:	80 83       	st	Z, r24
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_voidSetPinValue+0x6>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 30       	cpi	r24, 0x08	; 8
 20a:	60 f5       	brcc	.+88     	; 0x264 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	88 23       	and	r24, r24
 210:	a1 f4       	brne	.+40     	; 0x23a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 212:	ab e3       	ldi	r26, 0x3B	; 59
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x38>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x34>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	b3 c0       	rjmp	.+358    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 23a:	ab e3       	ldi	r26, 0x3B	; 59
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	eb e3       	ldi	r30, 0x3B	; 59
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0x60>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0x5c>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	9e c0       	rjmp	.+316    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	90 f1       	brcs	.+100    	; 0x2ce <DIO_voidSetPinValue+0xd6>
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	80 31       	cpi	r24, 0x10	; 16
 26e:	78 f5       	brcc	.+94     	; 0x2ce <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 50       	subi	r24, 0x08	; 8
 274:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	88 23       	and	r24, r24
 27a:	a1 f4       	brne	.+40     	; 0x2a4 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27c:	a8 e3       	ldi	r26, 0x38	; 56
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e8 e3       	ldi	r30, 0x38	; 56
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xa2>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0x9e>
 29e:	84 2b       	or	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a4:	a8 e3       	ldi	r26, 0x38	; 56
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinValue+0xca>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinValue+0xc6>
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 31       	cpi	r24, 0x10	; 16
 2d2:	90 f1       	brcs	.+100    	; 0x338 <DIO_voidSetPinValue+0x140>
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 31       	cpi	r24, 0x18	; 24
 2d8:	78 f5       	brcc	.+94     	; 0x338 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	80 51       	subi	r24, 0x10	; 16
 2de:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	88 23       	and	r24, r24
 2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e6:	a5 e3       	ldi	r26, 0x35	; 53
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e5 e3       	ldi	r30, 0x35	; 53
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x10c>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x108>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	49 c0       	rjmp	.+146    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30e:	a5 e3       	ldi	r26, 0x35	; 53
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e5 e3       	ldi	r30, 0x35	; 53
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x134>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x130>
 330:	80 95       	com	r24
 332:	84 23       	and	r24, r20
 334:	8c 93       	st	X, r24
 336:	34 c0       	rjmp	.+104    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	70 f5       	brcc	.+92     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 51       	subi	r24, 0x18	; 24
 348:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 23       	and	r24, r24
 34e:	a1 f4       	brne	.+40     	; 0x378 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 350:	a2 e3       	ldi	r26, 0x32	; 50
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e2 e3       	ldi	r30, 0x32	; 50
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x176>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x172>
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 378:	a2 e3       	ldi	r26, 0x32	; 50
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e2 e3       	ldi	r30, 0x32	; 50
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x19e>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x19a>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	8c 93       	st	X, r24
		}			
	}
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8GetPinValue+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	00 f5       	brcc	.+64     	; 0x3fe <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c2:	e9 e3       	ldi	r30, 0x39	; 57
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8GetPinValue+0x32>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	2a 95       	dec	r18
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8GetPinValue+0x2e>
 3e0:	9a 01       	movw	r18, r20
 3e2:	28 23       	and	r18, r24
 3e4:	39 23       	and	r19, r25
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPinValue+0x4a>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPinValue+0x46>
 3f8:	ca 01       	movw	r24, r20
 3fa:	8a 83       	std	Y+2, r24	; 0x02
 3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 3fe:	8c 81       	ldd	r24, Y+4	; 0x04
 400:	88 30       	cpi	r24, 0x08	; 8
 402:	20 f1       	brcs	.+72     	; 0x44c <DIO_u8GetPinValue+0xa2>
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	80 31       	cpi	r24, 0x10	; 16
 408:	08 f5       	brcc	.+66     	; 0x44c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	88 50       	subi	r24, 0x08	; 8
 40e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 410:	e6 e3       	ldi	r30, 0x36	; 54
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8GetPinValue+0x80>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	2a 95       	dec	r18
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8GetPinValue+0x7c>
 42e:	9a 01       	movw	r18, r20
 430:	28 23       	and	r18, r24
 432:	39 23       	and	r19, r25
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a9 01       	movw	r20, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0x98>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0x94>
 446:	ca 01       	movw	r24, r20
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	4d c0       	rjmp	.+154    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	80 31       	cpi	r24, 0x10	; 16
 450:	20 f1       	brcs	.+72     	; 0x49a <DIO_u8GetPinValue+0xf0>
 452:	8c 81       	ldd	r24, Y+4	; 0x04
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	08 f5       	brcc	.+66     	; 0x49a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	80 51       	subi	r24, 0x10	; 16
 45c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45e:	e6 e3       	ldi	r30, 0x36	; 54
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8GetPinValue+0xce>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8GetPinValue+0xca>
 47c:	9a 01       	movw	r18, r20
 47e:	28 23       	and	r18, r24
 480:	39 23       	and	r19, r25
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a9 01       	movw	r20, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8GetPinValue+0xe6>
 48c:	55 95       	asr	r21
 48e:	47 95       	ror	r20
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8GetPinValue+0xe2>
 494:	ca 01       	movw	r24, r20
 496:	8a 83       	std	Y+2, r24	; 0x02
 498:	26 c0       	rjmp	.+76     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	88 31       	cpi	r24, 0x18	; 24
 49e:	18 f1       	brcs	.+70     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	80 32       	cpi	r24, 0x20	; 32
 4a4:	00 f5       	brcc	.+64     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	88 51       	subi	r24, 0x18	; 24
 4aa:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4ac:	e0 e3       	ldi	r30, 0x30	; 48
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0x11c>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	2a 95       	dec	r18
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0x118>
 4ca:	9a 01       	movw	r18, r20
 4cc:	28 23       	and	r18, r24
 4ce:	39 23       	and	r19, r25
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a9 01       	movw	r20, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8GetPinValue+0x134>
 4da:	55 95       	asr	r21
 4dc:	47 95       	ror	r20
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8GetPinValue+0x130>
 4e2:	ca 01       	movw	r24, r20
 4e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	88 23       	and	r24, r24
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <EXTI_voidInit>:
#include"EXTI_config.h"
#include "EXTI_int.h"
/*this function shall intialize the EXTI and*/
/*Set its ooperation initially disabled*/
void EXTI_voidInit(void)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
#if EXTI_u8_MODE == EXTI_u8_ON_CHANGE
	/*set EXTI 0 mode to Interrupt on change*/
	SET_BIT(MCUCR,0);
 512:	a5 e5       	ldi	r26, 0x55	; 85
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	e5 e5       	ldi	r30, 0x55	; 85
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	81 60       	ori	r24, 0x01	; 1
 51e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
 520:	a5 e5       	ldi	r26, 0x55	; 85
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	e5 e5       	ldi	r30, 0x55	; 85
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	8d 7f       	andi	r24, 0xFD	; 253
 52c:	8c 93       	st	X, r24
#elif EXTI_u8_MODE == EXTI_u8_RAISING_EDGE
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#endif
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
 52e:	ab e5       	ldi	r26, 0x5B	; 91
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	eb e5       	ldi	r30, 0x5B	; 91
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	8f 7b       	andi	r24, 0xBF	; 191
 53a:	8c 93       	st	X, r24

	/*Clear Flag*/
	SET_BIT(GIFR,6);
 53c:	aa e5       	ldi	r26, 0x5A	; 90
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	ea e5       	ldi	r30, 0x5A	; 90
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	80 64       	ori	r24, 0x40	; 64
 548:	8c 93       	st	X, r24
}
 54a:	cf 91       	pop	r28
 54c:	df 91       	pop	r29
 54e:	08 95       	ret

00000550 <EXTI_voidSetCallback>:

/*this function shall set the callback pointer*/
/*to the recieved address*/
void EXTI_voidSetCallback(void (*ptrCpy)(void))
{
 550:	df 93       	push	r29
 552:	cf 93       	push	r28
 554:	00 d0       	rcall	.+0      	; 0x556 <EXTI_voidSetCallback+0x6>
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	9a 83       	std	Y+2, r25	; 0x02
 55c:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidCallback=ptrCpy;
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	9a 81       	ldd	r25, Y+2	; 0x02
 562:	90 93 99 00 	sts	0x0099, r25
 566:	80 93 98 00 	sts	0x0098, r24
}
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	cf 91       	pop	r28
 570:	df 91       	pop	r29
 572:	08 95       	ret

00000574 <EXTI_voidEnable>:

/*this function shall enable the external interrupt*/
void EXTI_voidEnable(void)
{
 574:	df 93       	push	r29
 576:	cf 93       	push	r28
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
 57c:	ab e5       	ldi	r26, 0x5B	; 91
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	eb e5       	ldi	r30, 0x5B	; 91
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	80 64       	ori	r24, 0x40	; 64
 588:	8c 93       	st	X, r24

}
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <EXTI_voidDisable>:

/*this function shall disable the external interrupt*/
void EXTI_voidDisable(void)
{
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
 598:	ab e5       	ldi	r26, 0x5B	; 91
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	eb e5       	ldi	r30, 0x5B	; 91
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	8f 7b       	andi	r24, 0xBF	; 191
 5a4:	8c 93       	st	X, r24

}
 5a6:	cf 91       	pop	r28
 5a8:	df 91       	pop	r29
 5aa:	08 95       	ret

000005ac <__vector_1>:

void  __vector_1  (void) __attribute__((signal,used));
void  __vector_1  (void)
{
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	0f 92       	push	r0
 5b4:	11 24       	eor	r1, r1
 5b6:	2f 93       	push	r18
 5b8:	3f 93       	push	r19
 5ba:	4f 93       	push	r20
 5bc:	5f 93       	push	r21
 5be:	6f 93       	push	r22
 5c0:	7f 93       	push	r23
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	af 93       	push	r26
 5c8:	bf 93       	push	r27
 5ca:	ef 93       	push	r30
 5cc:	ff 93       	push	r31
 5ce:	df 93       	push	r29
 5d0:	cf 93       	push	r28
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallback();
 5d6:	e0 91 98 00 	lds	r30, 0x0098
 5da:	f0 91 99 00 	lds	r31, 0x0099
 5de:	09 95       	icall
}
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	7f 91       	pop	r23
 5f2:	6f 91       	pop	r22
 5f4:	5f 91       	pop	r21
 5f6:	4f 91       	pop	r20
 5f8:	3f 91       	pop	r19
 5fa:	2f 91       	pop	r18
 5fc:	0f 90       	pop	r0
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	0f 90       	pop	r0
 602:	1f 90       	pop	r1
 604:	18 95       	reti

00000606 <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 606:	df 93       	push	r29
 608:	cf 93       	push	r28
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 60e:	af e5       	ldi	r26, 0x5F	; 95
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	ef e5       	ldi	r30, 0x5F	; 95
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	80 68       	ori	r24, 0x80	; 128
 61a:	8c 93       	st	X, r24
}
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 62a:	af e5       	ldi	r26, 0x5F	; 95
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	ef e5       	ldi	r30, 0x5F	; 95
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	8f 77       	andi	r24, 0x7F	; 127
 636:	8c 93       	st	X, r24
}
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
 646:	62 e3       	ldi	r22, 0x32	; 50
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*Write Function Set command*/
	voidWriteCmd(0b00110000 | (LCD_u8_FONT<<2) | (LCD_u8_NUM_OF_LINES<<3));
 652:	88 e3       	ldi	r24, 0x38	; 56
 654:	0e 94 58 03 	call	0x6b0	; 0x6b0 <voidWriteCmd>

	Delay_ms(1);
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write Display on command*/
	voidWriteCmd(0b00001000 | (LCD_u8_BLINK_ON_OFF<<0) | (LCD_u8_CURSOR_ON_OFF<<1) | (LCD_u8_DISPLAY_ON_OFF<<2));
 664:	8c e0       	ldi	r24, 0x0C	; 12
 666:	0e 94 58 03 	call	0x6b0	; 0x6b0 <voidWriteCmd>

	Delay_ms(1);
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write command clear display*/
	voidWriteCmd(0b00000001);
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 58 03 	call	0x6b0	; 0x6b0 <voidWriteCmd>

	Delay_ms(2);
 67c:	62 e0       	ldi	r22, 0x02	; 2
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 688:	cf 91       	pop	r28
 68a:	df 91       	pop	r29
 68c:	08 95       	ret

0000068e <voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
static void voidWriteData(u8 u8DataCpy)
{
 68e:	df 93       	push	r29
 690:	cf 93       	push	r28
 692:	0f 92       	push	r0
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
 69a:	8d e1       	ldi	r24, 0x1D	; 29
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <voidLcdExecute>
}
 6a8:	0f 90       	pop	r0
 6aa:	cf 91       	pop	r28
 6ac:	df 91       	pop	r29
 6ae:	08 95       	ret

000006b0 <voidWriteCmd>:
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
static void voidWriteCmd(u8 u8CommandCpy)
{
 6b0:	df 93       	push	r29
 6b2:	cf 93       	push	r28
 6b4:	0f 92       	push	r0
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
 6ba:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
 6bc:	8d e1       	ldi	r24, 0x1D	; 29
 6be:	61 e0       	ldi	r22, 0x01	; 1
 6c0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
 6c4:	89 81       	ldd	r24, Y+1	; 0x01
 6c6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <voidLcdExecute>
}
 6ca:	0f 90       	pop	r0
 6cc:	cf 91       	pop	r28
 6ce:	df 91       	pop	r29
 6d0:	08 95       	ret

000006d2 <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
 6d2:	df 93       	push	r29
 6d4:	cf 93       	push	r28
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <voidLcdExecute+0x6>
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	8a 83       	std	Y+2, r24	; 0x02
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
 6de:	8e e1       	ldi	r24, 0x1E	; 30
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 6e6:	19 82       	std	Y+1, r1	; 0x01
 6e8:	34 c0       	rjmp	.+104    	; 0x752 <voidLcdExecute+0x80>
	{
		if(GET_BIT(u8ValueCpy,u8PinsCounterLocal))
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	48 2f       	mov	r20, r24
 6ee:	50 e0       	ldi	r21, 0x00	; 0
 6f0:	89 81       	ldd	r24, Y+1	; 0x01
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <voidLcdExecute+0x2e>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	2a 95       	dec	r18
 702:	e2 f7       	brpl	.-8      	; 0x6fc <voidLcdExecute+0x2a>
 704:	9a 01       	movw	r18, r20
 706:	28 23       	and	r18, r24
 708:	39 23       	and	r19, r25
 70a:	89 81       	ldd	r24, Y+1	; 0x01
 70c:	88 2f       	mov	r24, r24
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	a9 01       	movw	r20, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <voidLcdExecute+0x46>
 714:	55 95       	asr	r21
 716:	47 95       	ror	r20
 718:	8a 95       	dec	r24
 71a:	e2 f7       	brpl	.-8      	; 0x714 <voidLcdExecute+0x42>
 71c:	ca 01       	movw	r24, r20
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	59 f0       	breq	.+22     	; 0x738 <voidLcdExecute+0x66>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_HIGH);
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	88 2f       	mov	r24, r24
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	fc 01       	movw	r30, r24
 72a:	e6 58       	subi	r30, 0x86	; 134
 72c:	ff 4f       	sbci	r31, 0xFF	; 255
 72e:	80 81       	ld	r24, Z
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
 736:	0a c0       	rjmp	.+20     	; 0x74c <voidLcdExecute+0x7a>
		}
			else
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
 738:	89 81       	ldd	r24, Y+1	; 0x01
 73a:	88 2f       	mov	r24, r24
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	fc 01       	movw	r30, r24
 740:	e6 58       	subi	r30, 0x86	; 134
 742:	ff 4f       	sbci	r31, 0xFF	; 255
 744:	80 81       	ld	r24, Z
 746:	61 e0       	ldi	r22, 0x01	; 1
 748:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
static void voidLcdExecute(u8 u8ValueCpy)
{
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	8f 5f       	subi	r24, 0xFF	; 255
 750:	89 83       	std	Y+1, r24	; 0x01
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	88 30       	cpi	r24, 0x08	; 8
 756:	48 f2       	brcs	.-110    	; 0x6ea <voidLcdExecute+0x18>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
		}
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
 758:	8f e1       	ldi	r24, 0x1F	; 31
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_ms(1);
 760:	61 e0       	ldi	r22, 0x01	; 1
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
 76c:	8f e1       	ldi	r24, 0x1F	; 31
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
}
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	cf 91       	pop	r28
 77a:	df 91       	pop	r29
 77c:	08 95       	ret

0000077e <LCD_voidWriteStringXY>:


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
 77e:	df 93       	push	r29
 780:	cf 93       	push	r28
 782:	00 d0       	rcall	.+0      	; 0x784 <LCD_voidWriteStringXY+0x6>
 784:	00 d0       	rcall	.+0      	; 0x786 <LCD_voidWriteStringXY+0x8>
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	9a 83       	std	Y+2, r25	; 0x02
 78c:	89 83       	std	Y+1, r24	; 0x01
 78e:	6b 83       	std	Y+3, r22	; 0x03
 790:	4c 83       	std	Y+4, r20	; 0x04
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
 792:	8c 81       	ldd	r24, Y+4	; 0x04
 794:	88 2f       	mov	r24, r24
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	00 24       	eor	r0, r0
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	07 94       	ror	r0
 7a0:	96 95       	lsr	r25
 7a2:	87 95       	ror	r24
 7a4:	07 94       	ror	r0
 7a6:	98 2f       	mov	r25, r24
 7a8:	80 2d       	mov	r24, r0
 7aa:	98 2f       	mov	r25, r24
 7ac:	90 68       	ori	r25, 0x80	; 128
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	89 2b       	or	r24, r25
 7b2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <voidWriteCmd>
 7b6:	0a c0       	rjmp	.+20     	; 0x7cc <LCD_voidWriteStringXY+0x4e>
	while(*u8PtrCpy)
	{
		voidWriteData(*u8PtrCpy);
 7b8:	e9 81       	ldd	r30, Y+1	; 0x01
 7ba:	fa 81       	ldd	r31, Y+2	; 0x02
 7bc:	80 81       	ld	r24, Z
 7be:	0e 94 47 03 	call	0x68e	; 0x68e <voidWriteData>
		u8PtrCpy++;
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
 7c4:	9a 81       	ldd	r25, Y+2	; 0x02
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	9a 83       	std	Y+2, r25	; 0x02
 7ca:	89 83       	std	Y+1, r24	; 0x01


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
	while(*u8PtrCpy)
 7cc:	e9 81       	ldd	r30, Y+1	; 0x01
 7ce:	fa 81       	ldd	r31, Y+2	; 0x02
 7d0:	80 81       	ld	r24, Z
 7d2:	88 23       	and	r24, r24
 7d4:	89 f7       	brne	.-30     	; 0x7b8 <LCD_voidWriteStringXY+0x3a>
	{
		voidWriteData(*u8PtrCpy);
		u8PtrCpy++;
	}
}
 7d6:	0f 90       	pop	r0
 7d8:	0f 90       	pop	r0
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
 7de:	cf 91       	pop	r28
 7e0:	df 91       	pop	r29
 7e2:	08 95       	ret

000007e4 <LCD_voidWriteStringCurrentPosition>:
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
 7e4:	df 93       	push	r29
 7e6:	cf 93       	push	r28
 7e8:	00 d0       	rcall	.+0      	; 0x7ea <LCD_voidWriteStringCurrentPosition+0x6>
 7ea:	cd b7       	in	r28, 0x3d	; 61
 7ec:	de b7       	in	r29, 0x3e	; 62
 7ee:	9a 83       	std	Y+2, r25	; 0x02
 7f0:	89 83       	std	Y+1, r24	; 0x01
 7f2:	0a c0       	rjmp	.+20     	; 0x808 <LCD_voidWriteStringCurrentPosition+0x24>
	while(*u8PtrCpy)
		{
			voidWriteData(*u8PtrCpy);
 7f4:	e9 81       	ldd	r30, Y+1	; 0x01
 7f6:	fa 81       	ldd	r31, Y+2	; 0x02
 7f8:	80 81       	ld	r24, Z
 7fa:	0e 94 47 03 	call	0x68e	; 0x68e <voidWriteData>
			u8PtrCpy++;
 7fe:	89 81       	ldd	r24, Y+1	; 0x01
 800:	9a 81       	ldd	r25, Y+2	; 0x02
 802:	01 96       	adiw	r24, 0x01	; 1
 804:	9a 83       	std	Y+2, r25	; 0x02
 806:	89 83       	std	Y+1, r24	; 0x01
		u8PtrCpy++;
	}
}
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
	while(*u8PtrCpy)
 808:	e9 81       	ldd	r30, Y+1	; 0x01
 80a:	fa 81       	ldd	r31, Y+2	; 0x02
 80c:	80 81       	ld	r24, Z
 80e:	88 23       	and	r24, r24
 810:	89 f7       	brne	.-30     	; 0x7f4 <LCD_voidWriteStringCurrentPosition+0x10>
		{
			voidWriteData(*u8PtrCpy);
			u8PtrCpy++;
		}
}
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	cf 91       	pop	r28
 818:	df 91       	pop	r29
 81a:	08 95       	ret

0000081c <LCD_voidClearDisplay>:
extern void LCD_voidClearDisplay(void)
{
 81c:	df 93       	push	r29
 81e:	cf 93       	push	r28
 820:	cd b7       	in	r28, 0x3d	; 61
 822:	de b7       	in	r29, 0x3e	; 62
	voidWriteCmd(0b00000001);
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 58 03 	call	0x6b0	; 0x6b0 <voidWriteCmd>
	Delay_ms(2);
 82a:	62 e0       	ldi	r22, 0x02	; 2
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 836:	cf 91       	pop	r28
 838:	df 91       	pop	r29
 83a:	08 95       	ret

0000083c <LCD_voidDrawCustomChar>:

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
 83c:	df 93       	push	r29
 83e:	cf 93       	push	r28
 840:	00 d0       	rcall	.+0      	; 0x842 <LCD_voidDrawCustomChar+0x6>
 842:	00 d0       	rcall	.+0      	; 0x844 <LCD_voidDrawCustomChar+0x8>
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	9b 83       	std	Y+3, r25	; 0x03
 84a:	8a 83       	std	Y+2, r24	; 0x02
 84c:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
 84e:	8c 81       	ldd	r24, Y+4	; 0x04
 850:	88 2f       	mov	r24, r24
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	80 64       	ori	r24, 0x40	; 64
 862:	0e 94 58 03 	call	0x6b0	; 0x6b0 <voidWriteCmd>
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 866:	19 82       	std	Y+1, r1	; 0x01
 868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	28 2f       	mov	r18, r24
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	9b 81       	ldd	r25, Y+3	; 0x03
 874:	fc 01       	movw	r30, r24
 876:	e2 0f       	add	r30, r18
 878:	f3 1f       	adc	r31, r19
 87a:	80 81       	ld	r24, Z
 87c:	0e 94 47 03 	call	0x68e	; 0x68e <voidWriteData>
}

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 880:	89 81       	ldd	r24, Y+1	; 0x01
 882:	8f 5f       	subi	r24, 0xFF	; 255
 884:	89 83       	std	Y+1, r24	; 0x01
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	88 30       	cpi	r24, 0x08	; 8
 88a:	78 f3       	brcs	.-34     	; 0x86a <__stack+0xb>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
	}
}
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	0f 90       	pop	r0
 894:	cf 91       	pop	r28
 896:	df 91       	pop	r29
 898:	08 95       	ret

0000089a <LCD_voidWriteCustomChar>:

extern void LCD_voidWriteCustomChar(u8 u8IndexCpy ,u8 u8XPositionCpy,u8 u8YPositionCpy)
{
 89a:	df 93       	push	r29
 89c:	cf 93       	push	r28
 89e:	00 d0       	rcall	.+0      	; 0x8a0 <LCD_voidWriteCustomChar+0x6>
 8a0:	0f 92       	push	r0
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
 8a6:	89 83       	std	Y+1, r24	; 0x01
 8a8:	6a 83       	std	Y+2, r22	; 0x02
 8aa:	4b 83       	std	Y+3, r20	; 0x03
	voidWriteCmd((0x80 | (u8YPositionCpy<<6) | u8XPositionCpy));
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	88 2f       	mov	r24, r24
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	00 24       	eor	r0, r0
 8b4:	96 95       	lsr	r25
 8b6:	87 95       	ror	r24
 8b8:	07 94       	ror	r0
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	07 94       	ror	r0
 8c0:	98 2f       	mov	r25, r24
 8c2:	80 2d       	mov	r24, r0
 8c4:	98 2f       	mov	r25, r24
 8c6:	90 68       	ori	r25, 0x80	; 128
 8c8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ca:	89 2b       	or	r24, r25
 8cc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <voidWriteCmd>
	voidWriteData(u8IndexCpy);
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	0e 94 47 03 	call	0x68e	; 0x68e <voidWriteData>
}
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	0f 90       	pop	r0
 8dc:	cf 91       	pop	r28
 8de:	df 91       	pop	r29
 8e0:	08 95       	ret

000008e2 <TIM_voidInitialize>:
static void (* TIM_CallBack) (void);
static void (* TIM_CallBack_CTC) (void);

/*Description: This function shall init the Timer prephiral*/
void TIM_voidInitialize(void)
{
 8e2:	df 93       	push	r29
 8e4:	cf 93       	push	r28
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
	/*clear flag*/
	SET_BIT(TIFR,0);
 8ea:	a8 e5       	ldi	r26, 0x58	; 88
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	e8 e5       	ldi	r30, 0x58	; 88
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	81 60       	ori	r24, 0x01	; 1
 8f6:	8c 93       	st	X, r24
	SET_BIT(TIFR,1);
 8f8:	a8 e5       	ldi	r26, 0x58	; 88
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	e8 e5       	ldi	r30, 0x58	; 88
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	82 60       	ori	r24, 0x02	; 2
 904:	8c 93       	st	X, r24
	/*disable interrupt for counting and ctc*/
	CLR_BIT(TIMSK,0);
 906:	a9 e5       	ldi	r26, 0x59	; 89
 908:	b0 e0       	ldi	r27, 0x00	; 0
 90a:	e9 e5       	ldi	r30, 0x59	; 89
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	8e 7f       	andi	r24, 0xFE	; 254
 912:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
 914:	a9 e5       	ldi	r26, 0x59	; 89
 916:	b0 e0       	ldi	r27, 0x00	; 0
 918:	e9 e5       	ldi	r30, 0x59	; 89
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	8d 7f       	andi	r24, 0xFD	; 253
 920:	8c 93       	st	X, r24
#elif TIM_u8_MODE== TIM_u8_CTC_MODE
#if TIM_u8_MODE_CTC == TIM_u8_CTC_NORMAL
	CLR_BIT(TCCR0,4);
	CLR_BIT(TCCR0,5);
#elif TIM_u8_MODE_CTC == TIM_u8_CTC_TOGGLE
	SET_BIT(TCCR0,4);
 922:	a3 e5       	ldi	r26, 0x53	; 83
 924:	b0 e0       	ldi	r27, 0x00	; 0
 926:	e3 e5       	ldi	r30, 0x53	; 83
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	80 61       	ori	r24, 0x10	; 16
 92e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
 930:	a3 e5       	ldi	r26, 0x53	; 83
 932:	b0 e0       	ldi	r27, 0x00	; 0
 934:	e3 e5       	ldi	r30, 0x53	; 83
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	8f 7d       	andi	r24, 0xDF	; 223
 93c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
#elif TIM_u8_MODE_CTC == TIM_u8_CTC_SET
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#endif
	OCR0=TIM_u8_OCR0_VALUE;
 93e:	ec e5       	ldi	r30, 0x5C	; 92
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	83 ed       	ldi	r24, 0xD3	; 211
 944:	80 83       	st	Z, r24
	SET_BIT(TCCR0,3);
 946:	a3 e5       	ldi	r26, 0x53	; 83
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	e3 e5       	ldi	r30, 0x53	; 83
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	88 60       	ori	r24, 0x08	; 8
 952:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
 954:	a3 e5       	ldi	r26, 0x53	; 83
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	e3 e5       	ldi	r30, 0x53	; 83
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	8f 7b       	andi	r24, 0xBF	; 191
 960:	8c 93       	st	X, r24
#endif
	/*set prescaler (which powers the timer not the interrupt but the timer it self)*/
#if TIM_u16_PRESCALER == TIM_u16_NO_DIVISON
	TCCR0 |= TIM_u8_NO_DIV_MASK;
 962:	a3 e5       	ldi	r26, 0x53	; 83
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	e3 e5       	ldi	r30, 0x53	; 83
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 81       	ld	r24, Z
 96c:	81 60       	ori	r24, 0x01	; 1
 96e:	8c 93       	st	X, r24
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_256
	TCCR0 |= TIM_u8_DIV_BY_256_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_1024
	TCCR0 |= TIM_u8_DIV_BY_1024_MASK;
#endif
}
 970:	cf 91       	pop	r28
 972:	df 91       	pop	r29
 974:	08 95       	ret

00000976 <TIM_voidEnableInt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInt(void)
{
 976:	df 93       	push	r29
 978:	cf 93       	push	r28
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
 97e:	a9 e5       	ldi	r26, 0x59	; 89
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	e9 e5       	ldi	r30, 0x59	; 89
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	81 60       	ori	r24, 0x01	; 1
 98a:	8c 93       	st	X, r24
}
 98c:	cf 91       	pop	r28
 98e:	df 91       	pop	r29
 990:	08 95       	ret

00000992 <TIM_voidDisableInt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInt(void)
{
 992:	df 93       	push	r29
 994:	cf 93       	push	r28
 996:	cd b7       	in	r28, 0x3d	; 61
 998:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
 99a:	a9 e5       	ldi	r26, 0x59	; 89
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	e9 e5       	ldi	r30, 0x59	; 89
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	8e 7f       	andi	r24, 0xFE	; 254
 9a6:	8c 93       	st	X, r24
}
 9a8:	cf 91       	pop	r28
 9aa:	df 91       	pop	r29
 9ac:	08 95       	ret

000009ae <TIM_voidEnableIntCTC>:

/*Description: enable Timer interrupt CTC*/
void TIM_voidEnableIntCTC(void)
{
 9ae:	df 93       	push	r29
 9b0:	cf 93       	push	r28
 9b2:	cd b7       	in	r28, 0x3d	; 61
 9b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
 9b6:	a9 e5       	ldi	r26, 0x59	; 89
 9b8:	b0 e0       	ldi	r27, 0x00	; 0
 9ba:	e9 e5       	ldi	r30, 0x59	; 89
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	82 60       	ori	r24, 0x02	; 2
 9c2:	8c 93       	st	X, r24
}
 9c4:	cf 91       	pop	r28
 9c6:	df 91       	pop	r29
 9c8:	08 95       	ret

000009ca <TIM_voidDisableIntCTC>:

/*Description: disable Timer interrupt CTC*/
void TIM_voidDisableIntCTC(void)
{
 9ca:	df 93       	push	r29
 9cc:	cf 93       	push	r28
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
 9d2:	a9 e5       	ldi	r26, 0x59	; 89
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	e9 e5       	ldi	r30, 0x59	; 89
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	8d 7f       	andi	r24, 0xFD	; 253
 9de:	8c 93       	st	X, r24
}
 9e0:	cf 91       	pop	r28
 9e2:	df 91       	pop	r29
 9e4:	08 95       	ret

000009e6 <TIM_voidSetCallBack>:


/*Description: set Timer callback function*/
void TIM_voidSetCallBack(void (* ptrCpy) (void))
{
 9e6:	df 93       	push	r29
 9e8:	cf 93       	push	r28
 9ea:	00 d0       	rcall	.+0      	; 0x9ec <TIM_voidSetCallBack+0x6>
 9ec:	cd b7       	in	r28, 0x3d	; 61
 9ee:	de b7       	in	r29, 0x3e	; 62
 9f0:	9a 83       	std	Y+2, r25	; 0x02
 9f2:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack=ptrCpy;
 9f4:	89 81       	ldd	r24, Y+1	; 0x01
 9f6:	9a 81       	ldd	r25, Y+2	; 0x02
 9f8:	90 93 9b 00 	sts	0x009B, r25
 9fc:	80 93 9a 00 	sts	0x009A, r24
}
 a00:	0f 90       	pop	r0
 a02:	0f 90       	pop	r0
 a04:	cf 91       	pop	r28
 a06:	df 91       	pop	r29
 a08:	08 95       	ret

00000a0a <TIM_voidSetCallBackCTC>:

/*Description: set CTC Timer callback function*/
void TIM_voidSetCallBackCTC(void (* ptrCpy) (void))
{
 a0a:	df 93       	push	r29
 a0c:	cf 93       	push	r28
 a0e:	00 d0       	rcall	.+0      	; 0xa10 <TIM_voidSetCallBackCTC+0x6>
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
 a14:	9a 83       	std	Y+2, r25	; 0x02
 a16:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack_CTC=ptrCpy;
 a18:	89 81       	ldd	r24, Y+1	; 0x01
 a1a:	9a 81       	ldd	r25, Y+2	; 0x02
 a1c:	90 93 9d 00 	sts	0x009D, r25
 a20:	80 93 9c 00 	sts	0x009C, r24
}
 a24:	0f 90       	pop	r0
 a26:	0f 90       	pop	r0
 a28:	cf 91       	pop	r28
 a2a:	df 91       	pop	r29
 a2c:	08 95       	ret

00000a2e <TIM_voidInitCountingRegister>:

/*Description: init timer register*/
void TIM_voidInitCountingRegister(u8 u8ValueCpy)
{
 a2e:	df 93       	push	r29
 a30:	cf 93       	push	r28
 a32:	0f 92       	push	r0
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
 a3a:	e2 e5       	ldi	r30, 0x52	; 82
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	89 81       	ldd	r24, Y+1	; 0x01
 a40:	80 83       	st	Z, r24
}
 a42:	0f 90       	pop	r0
 a44:	cf 91       	pop	r28
 a46:	df 91       	pop	r29
 a48:	08 95       	ret

00000a4a <TIM_voidInitCTCRegister>:

/*Description: init OCR0 timer register*/
void TIM_voidInitCTCRegister(u8 u8ValueCpy)
{
 a4a:	df 93       	push	r29
 a4c:	cf 93       	push	r28
 a4e:	0f 92       	push	r0
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62
 a54:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8ValueCpy;
 a56:	ec e5       	ldi	r30, 0x5C	; 92
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	80 83       	st	Z, r24
}
 a5e:	0f 90       	pop	r0
 a60:	cf 91       	pop	r28
 a62:	df 91       	pop	r29
 a64:	08 95       	ret

00000a66 <__vector_11>:

void __vector_11 (void)__attribute__((signal,used));
void __vector_11 (void)
{
 a66:	1f 92       	push	r1
 a68:	0f 92       	push	r0
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	0f 92       	push	r0
 a6e:	11 24       	eor	r1, r1
 a70:	2f 93       	push	r18
 a72:	3f 93       	push	r19
 a74:	4f 93       	push	r20
 a76:	5f 93       	push	r21
 a78:	6f 93       	push	r22
 a7a:	7f 93       	push	r23
 a7c:	8f 93       	push	r24
 a7e:	9f 93       	push	r25
 a80:	af 93       	push	r26
 a82:	bf 93       	push	r27
 a84:	ef 93       	push	r30
 a86:	ff 93       	push	r31
 a88:	df 93       	push	r29
 a8a:	cf 93       	push	r28
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack();
 a90:	e0 91 9a 00 	lds	r30, 0x009A
 a94:	f0 91 9b 00 	lds	r31, 0x009B
 a98:	09 95       	icall
}
 a9a:	cf 91       	pop	r28
 a9c:	df 91       	pop	r29
 a9e:	ff 91       	pop	r31
 aa0:	ef 91       	pop	r30
 aa2:	bf 91       	pop	r27
 aa4:	af 91       	pop	r26
 aa6:	9f 91       	pop	r25
 aa8:	8f 91       	pop	r24
 aaa:	7f 91       	pop	r23
 aac:	6f 91       	pop	r22
 aae:	5f 91       	pop	r21
 ab0:	4f 91       	pop	r20
 ab2:	3f 91       	pop	r19
 ab4:	2f 91       	pop	r18
 ab6:	0f 90       	pop	r0
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	0f 90       	pop	r0
 abc:	1f 90       	pop	r1
 abe:	18 95       	reti

00000ac0 <__vector_10>:


void __vector_10 (void)__attribute__((signal,used));
void __vector_10 (void)
{
 ac0:	1f 92       	push	r1
 ac2:	0f 92       	push	r0
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	0f 92       	push	r0
 ac8:	11 24       	eor	r1, r1
 aca:	2f 93       	push	r18
 acc:	3f 93       	push	r19
 ace:	4f 93       	push	r20
 ad0:	5f 93       	push	r21
 ad2:	6f 93       	push	r22
 ad4:	7f 93       	push	r23
 ad6:	8f 93       	push	r24
 ad8:	9f 93       	push	r25
 ada:	af 93       	push	r26
 adc:	bf 93       	push	r27
 ade:	ef 93       	push	r30
 ae0:	ff 93       	push	r31
 ae2:	df 93       	push	r29
 ae4:	cf 93       	push	r28
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack_CTC();
 aea:	e0 91 9c 00 	lds	r30, 0x009C
 aee:	f0 91 9d 00 	lds	r31, 0x009D
 af2:	09 95       	icall
}
 af4:	cf 91       	pop	r28
 af6:	df 91       	pop	r29
 af8:	ff 91       	pop	r31
 afa:	ef 91       	pop	r30
 afc:	bf 91       	pop	r27
 afe:	af 91       	pop	r26
 b00:	9f 91       	pop	r25
 b02:	8f 91       	pop	r24
 b04:	7f 91       	pop	r23
 b06:	6f 91       	pop	r22
 b08:	5f 91       	pop	r21
 b0a:	4f 91       	pop	r20
 b0c:	3f 91       	pop	r19
 b0e:	2f 91       	pop	r18
 b10:	0f 90       	pop	r0
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	0f 90       	pop	r0
 b16:	1f 90       	pop	r1
 b18:	18 95       	reti

00000b1a <parKCar>:
static u8 digitOne,digitTwo;
u8* arr [10]={(u8 *)"0",(u8 *)"1",(u8 *)"2",(u8 *)"3",(u8 *)"4",(u8 *)"5",(u8 *)"6",(u8 *)"7",(u8 *)"8",(u8 *)"9"};
void Motor(void);

void parKCar(void)
{
 b1a:	df 93       	push	r29
 b1c:	cf 93       	push	r28
 b1e:	cd b7       	in	r28, 0x3d	; 61
 b20:	de b7       	in	r29, 0x3e	; 62
	static u8 firsttime=0;
	if(1==firsttime && cars !=0)
 b22:	80 91 9f 00 	lds	r24, 0x009F
 b26:	81 30       	cpi	r24, 0x01	; 1
 b28:	b1 f4       	brne	.+44     	; 0xb56 <parKCar+0x3c>
 b2a:	80 91 83 00 	lds	r24, 0x0083
 b2e:	88 23       	and	r24, r24
 b30:	91 f0       	breq	.+36     	; 0xb56 <parKCar+0x3c>
	{
		Exti_flag=TOG_BIT(Exti_flag_back,0);
 b32:	90 91 9e 00 	lds	r25, 0x009E
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	89 27       	eor	r24, r25
 b3a:	80 93 9e 00 	sts	0x009E, r24
 b3e:	80 91 9e 00 	lds	r24, 0x009E
 b42:	80 93 82 00 	sts	0x0082, r24
		TOG_BIT(PORTB,0);
 b46:	a8 e3       	ldi	r26, 0x38	; 56
 b48:	b0 e0       	ldi	r27, 0x00	; 0
 b4a:	e8 e3       	ldi	r30, 0x38	; 56
 b4c:	f0 e0       	ldi	r31, 0x00	; 0
 b4e:	90 81       	ld	r25, Z
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	89 27       	eor	r24, r25
 b54:	8c 93       	st	X, r24
	}
	firsttime=1;
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	80 93 9f 00 	sts	0x009F, r24
}
 b5c:	cf 91       	pop	r28
 b5e:	df 91       	pop	r29
 b60:	08 95       	ret

00000b62 <main>:
void main(void)
{
 b62:	df 93       	push	r29
 b64:	cf 93       	push	r28
 b66:	cd b7       	in	r28, 0x3d	; 61
 b68:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 b6a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_26,DIO_u8_HIGH); // for IR Reciever pull up
 b6e:	8a e1       	ldi	r24, 0x1A	; 26
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	LCD_voidInitialize();
 b76:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_voidInitialize>
	TIM_voidInitialize();
 b7a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <TIM_voidInitialize>
	EXTI_voidInit();
 b7e:	0e 94 85 02 	call	0x50a	; 0x50a <EXTI_voidInit>
	EXTI_voidSetCallback(parKCar);
 b82:	8d e8       	ldi	r24, 0x8D	; 141
 b84:	95 e0       	ldi	r25, 0x05	; 5
 b86:	0e 94 a8 02 	call	0x550	; 0x550 <EXTI_voidSetCallback>
	EXTI_voidEnable(); // on pin 26 pin D2
 b8a:	0e 94 ba 02 	call	0x574	; 0x574 <EXTI_voidEnable>
	GIE_EnableGlobalInterrupt();
 b8e:	0e 94 03 03 	call	0x606	; 0x606 <GIE_EnableGlobalInterrupt>
	LCD_voidWriteStringCurrentPosition((u8 *)"cars:");
 b92:	84 e7       	ldi	r24, 0x74	; 116
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_voidWriteStringCurrentPosition>
	digitOne=cars % 10;
 b9a:	80 91 83 00 	lds	r24, 0x0083
 b9e:	9a e0       	ldi	r25, 0x0A	; 10
 ba0:	69 2f       	mov	r22, r25
 ba2:	0e 94 39 07 	call	0xe72	; 0xe72 <__udivmodqi4>
 ba6:	89 2f       	mov	r24, r25
 ba8:	80 93 a0 00 	sts	0x00A0, r24
	digitTwo=cars / 10;
 bac:	80 91 83 00 	lds	r24, 0x0083
 bb0:	9a e0       	ldi	r25, 0x0A	; 10
 bb2:	69 2f       	mov	r22, r25
 bb4:	0e 94 39 07 	call	0xe72	; 0xe72 <__udivmodqi4>
 bb8:	80 93 a1 00 	sts	0x00A1, r24
	LCD_voidWriteStringXY(arr[digitOne],7,0);
 bbc:	80 91 a0 00 	lds	r24, 0x00A0
 bc0:	88 2f       	mov	r24, r24
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	88 0f       	add	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	fc 01       	movw	r30, r24
 bca:	ec 57       	subi	r30, 0x7C	; 124
 bcc:	ff 4f       	sbci	r31, 0xFF	; 255
 bce:	80 81       	ld	r24, Z
 bd0:	91 81       	ldd	r25, Z+1	; 0x01
 bd2:	67 e0       	ldi	r22, 0x07	; 7
 bd4:	40 e0       	ldi	r20, 0x00	; 0
 bd6:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_voidWriteStringXY>
	LCD_voidWriteStringXY(arr[digitTwo],6,0);
 bda:	80 91 a1 00 	lds	r24, 0x00A1
 bde:	88 2f       	mov	r24, r24
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	88 0f       	add	r24, r24
 be4:	99 1f       	adc	r25, r25
 be6:	fc 01       	movw	r30, r24
 be8:	ec 57       	subi	r30, 0x7C	; 124
 bea:	ff 4f       	sbci	r31, 0xFF	; 255
 bec:	80 81       	ld	r24, Z
 bee:	91 81       	ldd	r25, Z+1	; 0x01
 bf0:	66 e0       	ldi	r22, 0x06	; 6
 bf2:	40 e0       	ldi	r20, 0x00	; 0
 bf4:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_voidWriteStringXY>
	while(1)
	{
		if(0==Exti_flag || 1==Exti_flag)
 bf8:	80 91 82 00 	lds	r24, 0x0082
 bfc:	88 23       	and	r24, r24
 bfe:	21 f0       	breq	.+8      	; 0xc08 <main+0xa6>
 c00:	80 91 82 00 	lds	r24, 0x0082
 c04:	81 30       	cpi	r24, 0x01	; 1
 c06:	c1 f7       	brne	.-16     	; 0xbf8 <main+0x96>
		{
			Motor();
 c08:	0e 94 07 06 	call	0xc0e	; 0xc0e <Motor>
 c0c:	f5 cf       	rjmp	.-22     	; 0xbf8 <main+0x96>

00000c0e <Motor>:
		}
	}
}
void Motor(void)
{
 c0e:	df 93       	push	r29
 c10:	cf 93       	push	r28
 c12:	00 d0       	rcall	.+0      	; 0xc14 <Motor+0x6>
 c14:	cd b7       	in	r28, 0x3d	; 61
 c16:	de b7       	in	r29, 0x3e	; 62
	if((cars !=0 )&&(1==Exti_flag))
 c18:	80 91 83 00 	lds	r24, 0x0083
 c1c:	88 23       	and	r24, r24
 c1e:	09 f4       	brne	.+2      	; 0xc22 <Motor+0x14>
 c20:	67 c0       	rjmp	.+206    	; 0xcf0 <Motor+0xe2>
 c22:	80 91 82 00 	lds	r24, 0x0082
 c26:	81 30       	cpi	r24, 0x01	; 1
 c28:	09 f0       	breq	.+2      	; 0xc2c <Motor+0x1e>
 c2a:	62 c0       	rjmp	.+196    	; 0xcf0 <Motor+0xe2>
	{
		if(cars >=0)
		{
			for(u8 i=0;i<128;i++)
 c2c:	1a 82       	std	Y+2, r1	; 0x02
 c2e:	5b c0       	rjmp	.+182    	; 0xce6 <Motor+0xd8>
			{
				DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 c30:	80 e0       	ldi	r24, 0x00	; 0
 c32:	60 e0       	ldi	r22, 0x00	; 0
 c34:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 c38:	81 e0       	ldi	r24, 0x01	; 1
 c3a:	61 e0       	ldi	r22, 0x01	; 1
 c3c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 c40:	82 e0       	ldi	r24, 0x02	; 2
 c42:	61 e0       	ldi	r22, 0x01	; 1
 c44:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 c48:	83 e0       	ldi	r24, 0x03	; 3
 c4a:	61 e0       	ldi	r22, 0x01	; 1
 c4c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				Delay_ms(2);
 c50:	62 e0       	ldi	r22, 0x02	; 2
 c52:	70 e0       	ldi	r23, 0x00	; 0
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	61 e0       	ldi	r22, 0x01	; 1
 c60:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_HIGH);
 c64:	81 e0       	ldi	r24, 0x01	; 1
 c66:	60 e0       	ldi	r22, 0x00	; 0
 c68:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 c6c:	82 e0       	ldi	r24, 0x02	; 2
 c6e:	61 e0       	ldi	r22, 0x01	; 1
 c70:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 c74:	83 e0       	ldi	r24, 0x03	; 3
 c76:	61 e0       	ldi	r22, 0x01	; 1
 c78:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				Delay_ms(2);
 c7c:	62 e0       	ldi	r22, 0x02	; 2
 c7e:	70 e0       	ldi	r23, 0x00	; 0
 c80:	80 e0       	ldi	r24, 0x00	; 0
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	61 e0       	ldi	r22, 0x01	; 1
 c8c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 c90:	81 e0       	ldi	r24, 0x01	; 1
 c92:	61 e0       	ldi	r22, 0x01	; 1
 c94:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_HIGH);
 c98:	82 e0       	ldi	r24, 0x02	; 2
 c9a:	60 e0       	ldi	r22, 0x00	; 0
 c9c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 ca0:	83 e0       	ldi	r24, 0x03	; 3
 ca2:	61 e0       	ldi	r22, 0x01	; 1
 ca4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				Delay_ms(2);
 ca8:	62 e0       	ldi	r22, 0x02	; 2
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	80 e0       	ldi	r24, 0x00	; 0
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
				DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 cb4:	80 e0       	ldi	r24, 0x00	; 0
 cb6:	61 e0       	ldi	r22, 0x01	; 1
 cb8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 cbc:	81 e0       	ldi	r24, 0x01	; 1
 cbe:	61 e0       	ldi	r22, 0x01	; 1
 cc0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 cc4:	82 e0       	ldi	r24, 0x02	; 2
 cc6:	61 e0       	ldi	r22, 0x01	; 1
 cc8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_HIGH);
 ccc:	83 e0       	ldi	r24, 0x03	; 3
 cce:	60 e0       	ldi	r22, 0x00	; 0
 cd0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				Delay_ms(2);
 cd4:	62 e0       	ldi	r22, 0x02	; 2
 cd6:	70 e0       	ldi	r23, 0x00	; 0
 cd8:	80 e0       	ldi	r24, 0x00	; 0
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
{
	if((cars !=0 )&&(1==Exti_flag))
	{
		if(cars >=0)
		{
			for(u8 i=0;i<128;i++)
 ce0:	8a 81       	ldd	r24, Y+2	; 0x02
 ce2:	8f 5f       	subi	r24, 0xFF	; 255
 ce4:	8a 83       	std	Y+2, r24	; 0x02
 ce6:	8a 81       	ldd	r24, Y+2	; 0x02
 ce8:	88 23       	and	r24, r24
 cea:	0c f0       	brlt	.+2      	; 0xcee <Motor+0xe0>
 cec:	a1 cf       	rjmp	.-190    	; 0xc30 <Motor+0x22>
 cee:	9a c0       	rjmp	.+308    	; 0xe24 <Motor+0x216>
				Delay_ms(2);
			}

		}
	}
	else if((0==Exti_flag))
 cf0:	80 91 82 00 	lds	r24, 0x0082
 cf4:	88 23       	and	r24, r24
 cf6:	09 f0       	breq	.+2      	; 0xcfa <Motor+0xec>
 cf8:	95 c0       	rjmp	.+298    	; 0xe24 <Motor+0x216>
	{
		cars--;
 cfa:	80 91 83 00 	lds	r24, 0x0083
 cfe:	81 50       	subi	r24, 0x01	; 1
 d00:	80 93 83 00 	sts	0x0083, r24
		digitOne=cars % 10;
 d04:	80 91 83 00 	lds	r24, 0x0083
 d08:	9a e0       	ldi	r25, 0x0A	; 10
 d0a:	69 2f       	mov	r22, r25
 d0c:	0e 94 39 07 	call	0xe72	; 0xe72 <__udivmodqi4>
 d10:	89 2f       	mov	r24, r25
 d12:	80 93 a0 00 	sts	0x00A0, r24
		digitTwo=cars / 10;
 d16:	80 91 83 00 	lds	r24, 0x0083
 d1a:	9a e0       	ldi	r25, 0x0A	; 10
 d1c:	69 2f       	mov	r22, r25
 d1e:	0e 94 39 07 	call	0xe72	; 0xe72 <__udivmodqi4>
 d22:	80 93 a1 00 	sts	0x00A1, r24
		LCD_voidWriteStringXY(arr[digitOne],7,0);
 d26:	80 91 a0 00 	lds	r24, 0x00A0
 d2a:	88 2f       	mov	r24, r24
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	88 0f       	add	r24, r24
 d30:	99 1f       	adc	r25, r25
 d32:	fc 01       	movw	r30, r24
 d34:	ec 57       	subi	r30, 0x7C	; 124
 d36:	ff 4f       	sbci	r31, 0xFF	; 255
 d38:	80 81       	ld	r24, Z
 d3a:	91 81       	ldd	r25, Z+1	; 0x01
 d3c:	67 e0       	ldi	r22, 0x07	; 7
 d3e:	40 e0       	ldi	r20, 0x00	; 0
 d40:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_voidWriteStringXY>
		LCD_voidWriteStringXY(arr[digitTwo],6,0);
 d44:	80 91 a1 00 	lds	r24, 0x00A1
 d48:	88 2f       	mov	r24, r24
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	88 0f       	add	r24, r24
 d4e:	99 1f       	adc	r25, r25
 d50:	fc 01       	movw	r30, r24
 d52:	ec 57       	subi	r30, 0x7C	; 124
 d54:	ff 4f       	sbci	r31, 0xFF	; 255
 d56:	80 81       	ld	r24, Z
 d58:	91 81       	ldd	r25, Z+1	; 0x01
 d5a:	66 e0       	ldi	r22, 0x06	; 6
 d5c:	40 e0       	ldi	r20, 0x00	; 0
 d5e:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_voidWriteStringXY>
		for(u8 i=0;i<128;i++)
 d62:	19 82       	std	Y+1, r1	; 0x01
 d64:	5b c0       	rjmp	.+182    	; 0xe1c <Motor+0x20e>
		{
			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 d66:	80 e0       	ldi	r24, 0x00	; 0
 d68:	61 e0       	ldi	r22, 0x01	; 1
 d6a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 d6e:	81 e0       	ldi	r24, 0x01	; 1
 d70:	61 e0       	ldi	r22, 0x01	; 1
 d72:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 d76:	82 e0       	ldi	r24, 0x02	; 2
 d78:	61 e0       	ldi	r22, 0x01	; 1
 d7a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_HIGH);
 d7e:	83 e0       	ldi	r24, 0x03	; 3
 d80:	60 e0       	ldi	r22, 0x00	; 0
 d82:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			Delay_ms(2);
 d86:	62 e0       	ldi	r22, 0x02	; 2
 d88:	70 e0       	ldi	r23, 0x00	; 0
 d8a:	80 e0       	ldi	r24, 0x00	; 0
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 d92:	80 e0       	ldi	r24, 0x00	; 0
 d94:	61 e0       	ldi	r22, 0x01	; 1
 d96:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 d9a:	81 e0       	ldi	r24, 0x01	; 1
 d9c:	61 e0       	ldi	r22, 0x01	; 1
 d9e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_HIGH);
 da2:	82 e0       	ldi	r24, 0x02	; 2
 da4:	60 e0       	ldi	r22, 0x00	; 0
 da6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 daa:	83 e0       	ldi	r24, 0x03	; 3
 dac:	61 e0       	ldi	r22, 0x01	; 1
 dae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			Delay_ms(2);
 db2:	62 e0       	ldi	r22, 0x02	; 2
 db4:	70 e0       	ldi	r23, 0x00	; 0
 db6:	80 e0       	ldi	r24, 0x00	; 0
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 dbe:	80 e0       	ldi	r24, 0x00	; 0
 dc0:	61 e0       	ldi	r22, 0x01	; 1
 dc2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_HIGH);
 dc6:	81 e0       	ldi	r24, 0x01	; 1
 dc8:	60 e0       	ldi	r22, 0x00	; 0
 dca:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 dce:	82 e0       	ldi	r24, 0x02	; 2
 dd0:	61 e0       	ldi	r22, 0x01	; 1
 dd2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 dd6:	83 e0       	ldi	r24, 0x03	; 3
 dd8:	61 e0       	ldi	r22, 0x01	; 1
 dda:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			Delay_ms(2);
 dde:	62 e0       	ldi	r22, 0x02	; 2
 de0:	70 e0       	ldi	r23, 0x00	; 0
 de2:	80 e0       	ldi	r24, 0x00	; 0
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 dea:	80 e0       	ldi	r24, 0x00	; 0
 dec:	60 e0       	ldi	r22, 0x00	; 0
 dee:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 df2:	81 e0       	ldi	r24, 0x01	; 1
 df4:	61 e0       	ldi	r22, 0x01	; 1
 df6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 dfa:	82 e0       	ldi	r24, 0x02	; 2
 dfc:	61 e0       	ldi	r22, 0x01	; 1
 dfe:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 e02:	83 e0       	ldi	r24, 0x03	; 3
 e04:	61 e0       	ldi	r22, 0x01	; 1
 e06:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			Delay_ms(2);
 e0a:	62 e0       	ldi	r22, 0x02	; 2
 e0c:	70 e0       	ldi	r23, 0x00	; 0
 e0e:	80 e0       	ldi	r24, 0x00	; 0
 e10:	90 e0       	ldi	r25, 0x00	; 0
 e12:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		cars--;
		digitOne=cars % 10;
		digitTwo=cars / 10;
		LCD_voidWriteStringXY(arr[digitOne],7,0);
		LCD_voidWriteStringXY(arr[digitTwo],6,0);
		for(u8 i=0;i<128;i++)
 e16:	89 81       	ldd	r24, Y+1	; 0x01
 e18:	8f 5f       	subi	r24, 0xFF	; 255
 e1a:	89 83       	std	Y+1, r24	; 0x01
 e1c:	89 81       	ldd	r24, Y+1	; 0x01
 e1e:	88 23       	and	r24, r24
 e20:	0c f0       	brlt	.+2      	; 0xe24 <Motor+0x216>
 e22:	a1 cf       	rjmp	.-190    	; 0xd66 <Motor+0x158>
			DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
			DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
			Delay_ms(2);
		}
	}
	Exti_flag=2;
 e24:	82 e0       	ldi	r24, 0x02	; 2
 e26:	80 93 82 00 	sts	0x0082, r24
}
 e2a:	0f 90       	pop	r0
 e2c:	0f 90       	pop	r0
 e2e:	cf 91       	pop	r28
 e30:	df 91       	pop	r29
 e32:	08 95       	ret

00000e34 <__mulsi3>:
 e34:	62 9f       	mul	r22, r18
 e36:	d0 01       	movw	r26, r0
 e38:	73 9f       	mul	r23, r19
 e3a:	f0 01       	movw	r30, r0
 e3c:	82 9f       	mul	r24, r18
 e3e:	e0 0d       	add	r30, r0
 e40:	f1 1d       	adc	r31, r1
 e42:	64 9f       	mul	r22, r20
 e44:	e0 0d       	add	r30, r0
 e46:	f1 1d       	adc	r31, r1
 e48:	92 9f       	mul	r25, r18
 e4a:	f0 0d       	add	r31, r0
 e4c:	83 9f       	mul	r24, r19
 e4e:	f0 0d       	add	r31, r0
 e50:	74 9f       	mul	r23, r20
 e52:	f0 0d       	add	r31, r0
 e54:	65 9f       	mul	r22, r21
 e56:	f0 0d       	add	r31, r0
 e58:	99 27       	eor	r25, r25
 e5a:	72 9f       	mul	r23, r18
 e5c:	b0 0d       	add	r27, r0
 e5e:	e1 1d       	adc	r30, r1
 e60:	f9 1f       	adc	r31, r25
 e62:	63 9f       	mul	r22, r19
 e64:	b0 0d       	add	r27, r0
 e66:	e1 1d       	adc	r30, r1
 e68:	f9 1f       	adc	r31, r25
 e6a:	bd 01       	movw	r22, r26
 e6c:	cf 01       	movw	r24, r30
 e6e:	11 24       	eor	r1, r1
 e70:	08 95       	ret

00000e72 <__udivmodqi4>:
 e72:	99 1b       	sub	r25, r25
 e74:	79 e0       	ldi	r23, 0x09	; 9
 e76:	04 c0       	rjmp	.+8      	; 0xe80 <__udivmodqi4_ep>

00000e78 <__udivmodqi4_loop>:
 e78:	99 1f       	adc	r25, r25
 e7a:	96 17       	cp	r25, r22
 e7c:	08 f0       	brcs	.+2      	; 0xe80 <__udivmodqi4_ep>
 e7e:	96 1b       	sub	r25, r22

00000e80 <__udivmodqi4_ep>:
 e80:	88 1f       	adc	r24, r24
 e82:	7a 95       	dec	r23
 e84:	c9 f7       	brne	.-14     	; 0xe78 <__udivmodqi4_loop>
 e86:	80 95       	com	r24
 e88:	08 95       	ret

00000e8a <__udivmodsi4>:
 e8a:	a1 e2       	ldi	r26, 0x21	; 33
 e8c:	1a 2e       	mov	r1, r26
 e8e:	aa 1b       	sub	r26, r26
 e90:	bb 1b       	sub	r27, r27
 e92:	fd 01       	movw	r30, r26
 e94:	0d c0       	rjmp	.+26     	; 0xeb0 <__udivmodsi4_ep>

00000e96 <__udivmodsi4_loop>:
 e96:	aa 1f       	adc	r26, r26
 e98:	bb 1f       	adc	r27, r27
 e9a:	ee 1f       	adc	r30, r30
 e9c:	ff 1f       	adc	r31, r31
 e9e:	a2 17       	cp	r26, r18
 ea0:	b3 07       	cpc	r27, r19
 ea2:	e4 07       	cpc	r30, r20
 ea4:	f5 07       	cpc	r31, r21
 ea6:	20 f0       	brcs	.+8      	; 0xeb0 <__udivmodsi4_ep>
 ea8:	a2 1b       	sub	r26, r18
 eaa:	b3 0b       	sbc	r27, r19
 eac:	e4 0b       	sbc	r30, r20
 eae:	f5 0b       	sbc	r31, r21

00000eb0 <__udivmodsi4_ep>:
 eb0:	66 1f       	adc	r22, r22
 eb2:	77 1f       	adc	r23, r23
 eb4:	88 1f       	adc	r24, r24
 eb6:	99 1f       	adc	r25, r25
 eb8:	1a 94       	dec	r1
 eba:	69 f7       	brne	.-38     	; 0xe96 <__udivmodsi4_loop>
 ebc:	60 95       	com	r22
 ebe:	70 95       	com	r23
 ec0:	80 95       	com	r24
 ec2:	90 95       	com	r25
 ec4:	9b 01       	movw	r18, r22
 ec6:	ac 01       	movw	r20, r24
 ec8:	bd 01       	movw	r22, r26
 eca:	cf 01       	movw	r24, r30
 ecc:	08 95       	ret

00000ece <_exit>:
 ece:	f8 94       	cli

00000ed0 <__stop_program>:
 ed0:	ff cf       	rjmp	.-2      	; 0xed0 <__stop_program>
