
FreqReading.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000101c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  0000101c  000010b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080009c  0080009c  000010ec  2**0
                  ALLOC
  3 .stab         000018fc  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a94  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_10>
      2c:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 06 	call	0xd88	; 0xd88 <main>
      8a:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2c 97       	sbiw	r28, 0x0c	; 12
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	69 87       	std	Y+9, r22	; 0x09
      a8:	7a 87       	std	Y+10, r23	; 0x0a
      aa:	8b 87       	std	Y+11, r24	; 0x0b
      ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
      ae:	89 85       	ldd	r24, Y+9	; 0x09
      b0:	9a 85       	ldd	r25, Y+10	; 0x0a
      b2:	ab 85       	ldd	r26, Y+11	; 0x0b
      b4:	bc 85       	ldd	r27, Y+12	; 0x0c
      b6:	22 e7       	ldi	r18, 0x72	; 114
      b8:	31 e0       	ldi	r19, 0x01	; 1
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	50 e0       	ldi	r21, 0x00	; 0
      be:	bc 01       	movw	r22, r24
      c0:	cd 01       	movw	r24, r26
      c2:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsi3>
      c6:	dc 01       	movw	r26, r24
      c8:	cb 01       	movw	r24, r22
      ca:	89 83       	std	Y+1, r24	; 0x01
      cc:	9a 83       	std	Y+2, r25	; 0x02
      ce:	ab 83       	std	Y+3, r26	; 0x03
      d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
      d2:	1d 82       	std	Y+5, r1	; 0x05
      d4:	1e 82       	std	Y+6, r1	; 0x06
      d6:	1f 82       	std	Y+7, r1	; 0x07
      d8:	18 86       	std	Y+8, r1	; 0x08
      da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
      dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
      de:	8d 81       	ldd	r24, Y+5	; 0x05
      e0:	9e 81       	ldd	r25, Y+6	; 0x06
      e2:	af 81       	ldd	r26, Y+7	; 0x07
      e4:	b8 85       	ldd	r27, Y+8	; 0x08
      e6:	01 96       	adiw	r24, 0x01	; 1
      e8:	a1 1d       	adc	r26, r1
      ea:	b1 1d       	adc	r27, r1
      ec:	8d 83       	std	Y+5, r24	; 0x05
      ee:	9e 83       	std	Y+6, r25	; 0x06
      f0:	af 83       	std	Y+7, r26	; 0x07
      f2:	b8 87       	std	Y+8, r27	; 0x08
      f4:	2d 81       	ldd	r18, Y+5	; 0x05
      f6:	3e 81       	ldd	r19, Y+6	; 0x06
      f8:	4f 81       	ldd	r20, Y+7	; 0x07
      fa:	58 85       	ldd	r21, Y+8	; 0x08
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	9a 81       	ldd	r25, Y+2	; 0x02
     100:	ab 81       	ldd	r26, Y+3	; 0x03
     102:	bc 81       	ldd	r27, Y+4	; 0x04
     104:	28 17       	cp	r18, r24
     106:	39 07       	cpc	r19, r25
     108:	4a 07       	cpc	r20, r26
     10a:	5b 07       	cpc	r21, r27
     10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
     10e:	2c 96       	adiw	r28, 0x0c	; 12
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	de bf       	out	0x3e, r29	; 62
     116:	0f be       	out	0x3f, r0	; 63
     118:	cd bf       	out	0x3d, r28	; 61
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
     128:	2c 97       	sbiw	r28, 0x0c	; 12
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	de bf       	out	0x3e, r29	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	cd bf       	out	0x3d, r28	; 61
     134:	69 87       	std	Y+9, r22	; 0x09
     136:	7a 87       	std	Y+10, r23	; 0x0a
     138:	8b 87       	std	Y+11, r24	; 0x0b
     13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
     13c:	89 85       	ldd	r24, Y+9	; 0x09
     13e:	9a 85       	ldd	r25, Y+10	; 0x0a
     140:	ab 85       	ldd	r26, Y+11	; 0x0b
     142:	bc 85       	ldd	r27, Y+12	; 0x0c
     144:	27 e7       	ldi	r18, 0x77	; 119
     146:	31 e0       	ldi	r19, 0x01	; 1
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	bc 01       	movw	r22, r24
     14e:	cd 01       	movw	r24, r26
     150:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsi3>
     154:	dc 01       	movw	r26, r24
     156:	cb 01       	movw	r24, r22
     158:	89 5d       	subi	r24, 0xD9	; 217
     15a:	94 44       	sbci	r25, 0x44	; 68
     15c:	a0 40       	sbci	r26, 0x00	; 0
     15e:	b0 40       	sbci	r27, 0x00	; 0
     160:	28 ee       	ldi	r18, 0xE8	; 232
     162:	33 e0       	ldi	r19, 0x03	; 3
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	bc 01       	movw	r22, r24
     16a:	cd 01       	movw	r24, r26
     16c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__udivmodsi4>
     170:	da 01       	movw	r26, r20
     172:	c9 01       	movw	r24, r18
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	ab 83       	std	Y+3, r26	; 0x03
     17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
     17c:	1d 82       	std	Y+5, r1	; 0x05
     17e:	1e 82       	std	Y+6, r1	; 0x06
     180:	1f 82       	std	Y+7, r1	; 0x07
     182:	18 86       	std	Y+8, r1	; 0x08
     184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
     186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
     188:	8d 81       	ldd	r24, Y+5	; 0x05
     18a:	9e 81       	ldd	r25, Y+6	; 0x06
     18c:	af 81       	ldd	r26, Y+7	; 0x07
     18e:	b8 85       	ldd	r27, Y+8	; 0x08
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	8d 83       	std	Y+5, r24	; 0x05
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	af 83       	std	Y+7, r26	; 0x07
     19c:	b8 87       	std	Y+8, r27	; 0x08
     19e:	2d 81       	ldd	r18, Y+5	; 0x05
     1a0:	3e 81       	ldd	r19, Y+6	; 0x06
     1a2:	4f 81       	ldd	r20, Y+7	; 0x07
     1a4:	58 85       	ldd	r21, Y+8	; 0x08
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	ab 81       	ldd	r26, Y+3	; 0x03
     1ac:	bc 81       	ldd	r27, Y+4	; 0x04
     1ae:	28 17       	cp	r18, r24
     1b0:	39 07       	cpc	r19, r25
     1b2:	4a 07       	cpc	r20, r26
     1b4:	5b 07       	cpc	r21, r27
     1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
     1b8:	2c 96       	adiw	r28, 0x0c	; 12
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	cf 91       	pop	r28
     1c6:	df 91       	pop	r29
     1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
     1ca:	df 93       	push	r29
     1cc:	cf 93       	push	r28
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
     1d2:	ea e3       	ldi	r30, 0x3A	; 58
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
     1da:	e7 e3       	ldi	r30, 0x37	; 55
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
     1e2:	e4 e3       	ldi	r30, 0x34	; 52
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
     1ea:	e1 e3       	ldi	r30, 0x31	; 49
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	8b ef       	ldi	r24, 0xFB	; 251
     1f0:	80 83       	st	Z, r24
}
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_voidSetPinValue+0x6>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	88 30       	cpi	r24, 0x08	; 8
     20a:	60 f5       	brcc	.+88     	; 0x264 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
     20c:	8a 81       	ldd	r24, Y+2	; 0x02
     20e:	88 23       	and	r24, r24
     210:	a1 f4       	brne	.+40     	; 0x23a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
     212:	ab e3       	ldi	r26, 0x3B	; 59
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	eb e3       	ldi	r30, 0x3B	; 59
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	48 2f       	mov	r20, r24
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	28 2f       	mov	r18, r24
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 2e       	mov	r0, r18
     22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x38>
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	0a 94       	dec	r0
     232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x34>
     234:	84 2b       	or	r24, r20
     236:	8c 93       	st	X, r24
     238:	b3 c0       	rjmp	.+358    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
     23a:	ab e3       	ldi	r26, 0x3B	; 59
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	eb e3       	ldi	r30, 0x3B	; 59
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	48 2f       	mov	r20, r24
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	28 2f       	mov	r18, r24
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 2e       	mov	r0, r18
     252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0x60>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0x5c>
     25c:	80 95       	com	r24
     25e:	84 23       	and	r24, r20
     260:	8c 93       	st	X, r24
     262:	9e c0       	rjmp	.+316    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	88 30       	cpi	r24, 0x08	; 8
     268:	90 f1       	brcs	.+100    	; 0x2ce <DIO_voidSetPinValue+0xd6>
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	80 31       	cpi	r24, 0x10	; 16
     26e:	78 f5       	brcc	.+94     	; 0x2ce <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	88 50       	subi	r24, 0x08	; 8
     274:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
     276:	8a 81       	ldd	r24, Y+2	; 0x02
     278:	88 23       	and	r24, r24
     27a:	a1 f4       	brne	.+40     	; 0x2a4 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
     27c:	a8 e3       	ldi	r26, 0x38	; 56
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	e8 e3       	ldi	r30, 0x38	; 56
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	48 2f       	mov	r20, r24
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	28 2f       	mov	r18, r24
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	02 2e       	mov	r0, r18
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xa2>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0x9e>
     29e:	84 2b       	or	r24, r20
     2a0:	8c 93       	st	X, r24
     2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
     2a4:	a8 e3       	ldi	r26, 0x38	; 56
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e8 e3       	ldi	r30, 0x38	; 56
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	48 2f       	mov	r20, r24
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	28 2f       	mov	r18, r24
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 2e       	mov	r0, r18
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinValue+0xca>
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	0a 94       	dec	r0
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinValue+0xc6>
     2c6:	80 95       	com	r24
     2c8:	84 23       	and	r24, r20
     2ca:	8c 93       	st	X, r24
     2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	80 31       	cpi	r24, 0x10	; 16
     2d2:	90 f1       	brcs	.+100    	; 0x338 <DIO_voidSetPinValue+0x140>
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	88 31       	cpi	r24, 0x18	; 24
     2d8:	78 f5       	brcc	.+94     	; 0x338 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	80 51       	subi	r24, 0x10	; 16
     2de:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
     2e0:	8a 81       	ldd	r24, Y+2	; 0x02
     2e2:	88 23       	and	r24, r24
     2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
     2e6:	a5 e3       	ldi	r26, 0x35	; 53
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e5 e3       	ldi	r30, 0x35	; 53
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	48 2f       	mov	r20, r24
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	28 2f       	mov	r18, r24
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	02 2e       	mov	r0, r18
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x10c>
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x108>
     308:	84 2b       	or	r24, r20
     30a:	8c 93       	st	X, r24
     30c:	49 c0       	rjmp	.+146    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
     30e:	a5 e3       	ldi	r26, 0x35	; 53
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	e5 e3       	ldi	r30, 0x35	; 53
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	48 2f       	mov	r20, r24
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	28 2f       	mov	r18, r24
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 2e       	mov	r0, r18
     326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x134>
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x130>
     330:	80 95       	com	r24
     332:	84 23       	and	r24, r20
     334:	8c 93       	st	X, r24
     336:	34 c0       	rjmp	.+104    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 31       	cpi	r24, 0x18	; 24
     33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	80 32       	cpi	r24, 0x20	; 32
     342:	70 f5       	brcc	.+92     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	88 51       	subi	r24, 0x18	; 24
     348:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	88 23       	and	r24, r24
     34e:	a1 f4       	brne	.+40     	; 0x378 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
     350:	a2 e3       	ldi	r26, 0x32	; 50
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e2 e3       	ldi	r30, 0x32	; 50
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	48 2f       	mov	r20, r24
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	02 2e       	mov	r0, r18
     368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x176>
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	0a 94       	dec	r0
     370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x172>
     372:	84 2b       	or	r24, r20
     374:	8c 93       	st	X, r24
     376:	14 c0       	rjmp	.+40     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
     378:	a2 e3       	ldi	r26, 0x32	; 50
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e2 e3       	ldi	r30, 0x32	; 50
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	48 2f       	mov	r20, r24
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 2e       	mov	r0, r18
     390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x19e>
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	0a 94       	dec	r0
     398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x19a>
     39a:	80 95       	com	r24
     39c:	84 23       	and	r24, r20
     39e:	8c 93       	st	X, r24
		}			
	}
}
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	cf 91       	pop	r28
     3a6:	df 91       	pop	r29
     3a8:	08 95       	ret

000003aa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
     3aa:	df 93       	push	r29
     3ac:	cf 93       	push	r28
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x6>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8GetPinValue+0x8>
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	88 30       	cpi	r24, 0x08	; 8
     3bc:	00 f5       	brcc	.+64     	; 0x3fe <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
     3be:	8c 81       	ldd	r24, Y+4	; 0x04
     3c0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
     3c2:	e9 e3       	ldi	r30, 0x39	; 57
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	48 2f       	mov	r20, r24
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8GetPinValue+0x32>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	2a 95       	dec	r18
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8GetPinValue+0x2e>
     3e0:	9a 01       	movw	r18, r20
     3e2:	28 23       	and	r18, r24
     3e4:	39 23       	and	r19, r25
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	a9 01       	movw	r20, r18
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPinValue+0x4a>
     3f0:	55 95       	asr	r21
     3f2:	47 95       	ror	r20
     3f4:	8a 95       	dec	r24
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPinValue+0x46>
     3f8:	ca 01       	movw	r24, r20
     3fa:	8a 83       	std	Y+2, r24	; 0x02
     3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
     3fe:	8c 81       	ldd	r24, Y+4	; 0x04
     400:	88 30       	cpi	r24, 0x08	; 8
     402:	20 f1       	brcs	.+72     	; 0x44c <DIO_u8GetPinValue+0xa2>
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	80 31       	cpi	r24, 0x10	; 16
     408:	08 f5       	brcc	.+66     	; 0x44c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	88 50       	subi	r24, 0x08	; 8
     40e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
     410:	e6 e3       	ldi	r30, 0x36	; 54
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	48 2f       	mov	r20, r24
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	8b 81       	ldd	r24, Y+3	; 0x03
     41c:	28 2f       	mov	r18, r24
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8GetPinValue+0x80>
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	2a 95       	dec	r18
     42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8GetPinValue+0x7c>
     42e:	9a 01       	movw	r18, r20
     430:	28 23       	and	r18, r24
     432:	39 23       	and	r19, r25
     434:	8b 81       	ldd	r24, Y+3	; 0x03
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	a9 01       	movw	r20, r18
     43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0x98>
     43e:	55 95       	asr	r21
     440:	47 95       	ror	r20
     442:	8a 95       	dec	r24
     444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0x94>
     446:	ca 01       	movw	r24, r20
     448:	8a 83       	std	Y+2, r24	; 0x02
     44a:	4d c0       	rjmp	.+154    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	80 31       	cpi	r24, 0x10	; 16
     450:	20 f1       	brcs	.+72     	; 0x49a <DIO_u8GetPinValue+0xf0>
     452:	8c 81       	ldd	r24, Y+4	; 0x04
     454:	88 31       	cpi	r24, 0x18	; 24
     456:	08 f5       	brcc	.+66     	; 0x49a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	80 51       	subi	r24, 0x10	; 16
     45c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
     45e:	e6 e3       	ldi	r30, 0x36	; 54
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	48 2f       	mov	r20, r24
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	28 2f       	mov	r18, r24
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8GetPinValue+0xce>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	2a 95       	dec	r18
     47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8GetPinValue+0xca>
     47c:	9a 01       	movw	r18, r20
     47e:	28 23       	and	r18, r24
     480:	39 23       	and	r19, r25
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	88 2f       	mov	r24, r24
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	a9 01       	movw	r20, r18
     48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8GetPinValue+0xe6>
     48c:	55 95       	asr	r21
     48e:	47 95       	ror	r20
     490:	8a 95       	dec	r24
     492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8GetPinValue+0xe2>
     494:	ca 01       	movw	r24, r20
     496:	8a 83       	std	Y+2, r24	; 0x02
     498:	26 c0       	rjmp	.+76     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
     49a:	8c 81       	ldd	r24, Y+4	; 0x04
     49c:	88 31       	cpi	r24, 0x18	; 24
     49e:	18 f1       	brcs	.+70     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
     4a0:	8c 81       	ldd	r24, Y+4	; 0x04
     4a2:	80 32       	cpi	r24, 0x20	; 32
     4a4:	00 f5       	brcc	.+64     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
     4a6:	8c 81       	ldd	r24, Y+4	; 0x04
     4a8:	88 51       	subi	r24, 0x18	; 24
     4aa:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
     4ac:	e0 e3       	ldi	r30, 0x30	; 48
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	48 2f       	mov	r20, r24
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	8b 81       	ldd	r24, Y+3	; 0x03
     4b8:	28 2f       	mov	r18, r24
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0x11c>
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	2a 95       	dec	r18
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0x118>
     4ca:	9a 01       	movw	r18, r20
     4cc:	28 23       	and	r18, r24
     4ce:	39 23       	and	r19, r25
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	88 2f       	mov	r24, r24
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	a9 01       	movw	r20, r18
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8GetPinValue+0x134>
     4da:	55 95       	asr	r21
     4dc:	47 95       	ror	r20
     4de:	8a 95       	dec	r24
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8GetPinValue+0x130>
     4e2:	ca 01       	movw	r24, r20
     4e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	88 23       	and	r24, r24
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	89 83       	std	Y+1, r24	; 0x01
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
     4f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	cf 91       	pop	r28
     506:	df 91       	pop	r29
     508:	08 95       	ret

0000050a <EXTI_voidInit>:
#include"EXTI_config.h"
#include "EXTI_int.h"
/*this function shall intialize the EXTI and*/
/*Set its ooperation initially disabled*/
void EXTI_voidInit(void)
{
     50a:	df 93       	push	r29
     50c:	cf 93       	push	r28
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXTI_u8_MODE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif EXTI_u8_MODE == EXTI_u8_RAISING_EDGE
	SET_BIT(MCUCR,0);
     512:	a5 e5       	ldi	r26, 0x55	; 85
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	e5 e5       	ldi	r30, 0x55	; 85
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	81 60       	ori	r24, 0x01	; 1
     51e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
     520:	a5 e5       	ldi	r26, 0x55	; 85
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	e5 e5       	ldi	r30, 0x55	; 85
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	82 60       	ori	r24, 0x02	; 2
     52c:	8c 93       	st	X, r24
#endif
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
     52e:	ab e5       	ldi	r26, 0x5B	; 91
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	eb e5       	ldi	r30, 0x5B	; 91
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	8f 7b       	andi	r24, 0xBF	; 191
     53a:	8c 93       	st	X, r24

	/*Clear Flag*/
	SET_BIT(GIFR,6);
     53c:	aa e5       	ldi	r26, 0x5A	; 90
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	ea e5       	ldi	r30, 0x5A	; 90
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	80 64       	ori	r24, 0x40	; 64
     548:	8c 93       	st	X, r24
}
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	08 95       	ret

00000550 <EXTI_voidSetCallback>:

/*this function shall set the callback pointer*/
/*to the recieved address*/
void EXTI_voidSetCallback(void (*ptrCpy)(void))
{
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	00 d0       	rcall	.+0      	; 0x556 <EXTI_voidSetCallback+0x6>
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	9a 83       	std	Y+2, r25	; 0x02
     55c:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidCallback=ptrCpy;
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	9a 81       	ldd	r25, Y+2	; 0x02
     562:	90 93 9d 00 	sts	0x009D, r25
     566:	80 93 9c 00 	sts	0x009C, r24
}
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	cf 91       	pop	r28
     570:	df 91       	pop	r29
     572:	08 95       	ret

00000574 <EXTI_voidChangeMode>:

void EXTI_voidChangeMode(u8 Mode)
{
     574:	df 93       	push	r29
     576:	cf 93       	push	r28
     578:	0f 92       	push	r0
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	89 83       	std	Y+1, r24	; 0x01
if (Mode == EXTI_u8_ON_CHANGE)
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	79 f4       	brne	.+30     	; 0x5a4 <EXTI_voidChangeMode+0x30>
{
	/*set EXTI 0 mode to Interrupt on change*/
	SET_BIT(MCUCR,0);
     586:	a5 e5       	ldi	r26, 0x55	; 85
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	e5 e5       	ldi	r30, 0x55	; 85
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	81 60       	ori	r24, 0x01	; 1
     592:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
     594:	a5 e5       	ldi	r26, 0x55	; 85
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	e5 e5       	ldi	r30, 0x55	; 85
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	8d 7f       	andi	r24, 0xFD	; 253
     5a0:	8c 93       	st	X, r24
     5a2:	35 c0       	rjmp	.+106    	; 0x60e <EXTI_voidChangeMode+0x9a>
}
else if (Mode == EXTI_u8_LOW_LEVEL)
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	88 23       	and	r24, r24
     5a8:	79 f4       	brne	.+30     	; 0x5c8 <EXTI_voidChangeMode+0x54>
{
	CLR_BIT(MCUCR,0);
     5aa:	a5 e5       	ldi	r26, 0x55	; 85
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	e5 e5       	ldi	r30, 0x55	; 85
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	8e 7f       	andi	r24, 0xFE	; 254
     5b6:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
     5b8:	a5 e5       	ldi	r26, 0x55	; 85
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	e5 e5       	ldi	r30, 0x55	; 85
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	8d 7f       	andi	r24, 0xFD	; 253
     5c4:	8c 93       	st	X, r24
     5c6:	23 c0       	rjmp	.+70     	; 0x60e <EXTI_voidChangeMode+0x9a>
}
else if (Mode == EXTI_u8_FALLING_EDGE)
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	79 f4       	brne	.+30     	; 0x5ec <EXTI_voidChangeMode+0x78>
{
	CLR_BIT(MCUCR,0);
     5ce:	a5 e5       	ldi	r26, 0x55	; 85
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	e5 e5       	ldi	r30, 0x55	; 85
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	8e 7f       	andi	r24, 0xFE	; 254
     5da:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
     5dc:	a5 e5       	ldi	r26, 0x55	; 85
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	e5 e5       	ldi	r30, 0x55	; 85
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	82 60       	ori	r24, 0x02	; 2
     5e8:	8c 93       	st	X, r24
     5ea:	11 c0       	rjmp	.+34     	; 0x60e <EXTI_voidChangeMode+0x9a>
}
else if (Mode == EXTI_u8_RAISING_EDGE)
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	83 30       	cpi	r24, 0x03	; 3
     5f0:	71 f4       	brne	.+28     	; 0x60e <EXTI_voidChangeMode+0x9a>
{
	SET_BIT(MCUCR,0);
     5f2:	a5 e5       	ldi	r26, 0x55	; 85
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	e5 e5       	ldi	r30, 0x55	; 85
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
     600:	a5 e5       	ldi	r26, 0x55	; 85
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e5 e5       	ldi	r30, 0x55	; 85
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	82 60       	ori	r24, 0x02	; 2
     60c:	8c 93       	st	X, r24
}

}
     60e:	0f 90       	pop	r0
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <EXTI_voidEnable>:
/*this function shall enable the external interrupt*/
void EXTI_voidEnable(void)
{
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
     61e:	ab e5       	ldi	r26, 0x5B	; 91
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	eb e5       	ldi	r30, 0x5B	; 91
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	80 64       	ori	r24, 0x40	; 64
     62a:	8c 93       	st	X, r24

}
     62c:	cf 91       	pop	r28
     62e:	df 91       	pop	r29
     630:	08 95       	ret

00000632 <EXTI_voidDisable>:

/*this function shall disable the external interrupt*/
void EXTI_voidDisable(void)
{
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
     63a:	ab e5       	ldi	r26, 0x5B	; 91
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	eb e5       	ldi	r30, 0x5B	; 91
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	8f 7b       	andi	r24, 0xBF	; 191
     646:	8c 93       	st	X, r24

}
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	08 95       	ret

0000064e <__vector_1>:

void  __vector_1  (void) __attribute__((signal,used));
void  __vector_1  (void)
{
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	2f 93       	push	r18
     65a:	3f 93       	push	r19
     65c:	4f 93       	push	r20
     65e:	5f 93       	push	r21
     660:	6f 93       	push	r22
     662:	7f 93       	push	r23
     664:	8f 93       	push	r24
     666:	9f 93       	push	r25
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	ef 93       	push	r30
     66e:	ff 93       	push	r31
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallback();
     678:	e0 91 9c 00 	lds	r30, 0x009C
     67c:	f0 91 9d 00 	lds	r31, 0x009D
     680:	09 95       	icall
}
     682:	cf 91       	pop	r28
     684:	df 91       	pop	r29
     686:	ff 91       	pop	r31
     688:	ef 91       	pop	r30
     68a:	bf 91       	pop	r27
     68c:	af 91       	pop	r26
     68e:	9f 91       	pop	r25
     690:	8f 91       	pop	r24
     692:	7f 91       	pop	r23
     694:	6f 91       	pop	r22
     696:	5f 91       	pop	r21
     698:	4f 91       	pop	r20
     69a:	3f 91       	pop	r19
     69c:	2f 91       	pop	r18
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     6b0:	af e5       	ldi	r26, 0x5F	; 95
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	ef e5       	ldi	r30, 0x5F	; 95
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	80 68       	ori	r24, 0x80	; 128
     6bc:	8c 93       	st	X, r24
}
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	08 95       	ret

000006c4 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
     6c4:	df 93       	push	r29
     6c6:	cf 93       	push	r28
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     6cc:	af e5       	ldi	r26, 0x5F	; 95
     6ce:	b0 e0       	ldi	r27, 0x00	; 0
     6d0:	ef e5       	ldi	r30, 0x5F	; 95
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	8f 77       	andi	r24, 0x7F	; 127
     6d8:	8c 93       	st	X, r24
}
     6da:	cf 91       	pop	r28
     6dc:	df 91       	pop	r29
     6de:	08 95       	ret

000006e0 <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
     6e0:	df 93       	push	r29
     6e2:	cf 93       	push	r28
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
     6e8:	62 e3       	ldi	r22, 0x32	; 50
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*Write Function Set command*/
	voidWriteCmd(0b00110000 | (LCD_u8_FONT<<2) | (LCD_u8_NUM_OF_LINES<<3));
     6f4:	88 e3       	ldi	r24, 0x38	; 56
     6f6:	0e 94 a9 03 	call	0x752	; 0x752 <voidWriteCmd>

	Delay_ms(1);
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write Display on command*/
	voidWriteCmd(0b00001000 | (LCD_u8_BLINK_ON_OFF<<0) | (LCD_u8_CURSOR_ON_OFF<<1) | (LCD_u8_DISPLAY_ON_OFF<<2));
     706:	8c e0       	ldi	r24, 0x0C	; 12
     708:	0e 94 a9 03 	call	0x752	; 0x752 <voidWriteCmd>

	Delay_ms(1);
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write command clear display*/
	voidWriteCmd(0b00000001);
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 a9 03 	call	0x752	; 0x752 <voidWriteCmd>

	Delay_ms(2);
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
static void voidWriteData(u8 u8DataCpy)
{
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	0f 92       	push	r0
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
     73c:	8d e1       	ldi	r24, 0x1D	; 29
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	0e 94 ba 03 	call	0x774	; 0x774 <voidLcdExecute>
}
     74a:	0f 90       	pop	r0
     74c:	cf 91       	pop	r28
     74e:	df 91       	pop	r29
     750:	08 95       	ret

00000752 <voidWriteCmd>:
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
static void voidWriteCmd(u8 u8CommandCpy)
{
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	0f 92       	push	r0
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
     75e:	8d e1       	ldi	r24, 0x1D	; 29
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	0e 94 ba 03 	call	0x774	; 0x774 <voidLcdExecute>
}
     76c:	0f 90       	pop	r0
     76e:	cf 91       	pop	r28
     770:	df 91       	pop	r29
     772:	08 95       	ret

00000774 <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
     774:	df 93       	push	r29
     776:	cf 93       	push	r28
     778:	00 d0       	rcall	.+0      	; 0x77a <voidLcdExecute+0x6>
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	8a 83       	std	Y+2, r24	; 0x02
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
     780:	8e e1       	ldi	r24, 0x1E	; 30
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
     788:	19 82       	std	Y+1, r1	; 0x01
     78a:	34 c0       	rjmp	.+104    	; 0x7f4 <voidLcdExecute+0x80>
	{
		if(GET_BIT(u8ValueCpy,u8PinsCounterLocal))
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	48 2f       	mov	r20, r24
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	28 2f       	mov	r18, r24
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <voidLcdExecute+0x2e>
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	2a 95       	dec	r18
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <voidLcdExecute+0x2a>
     7a6:	9a 01       	movw	r18, r20
     7a8:	28 23       	and	r18, r24
     7aa:	39 23       	and	r19, r25
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	a9 01       	movw	r20, r18
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <voidLcdExecute+0x46>
     7b6:	55 95       	asr	r21
     7b8:	47 95       	ror	r20
     7ba:	8a 95       	dec	r24
     7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <voidLcdExecute+0x42>
     7be:	ca 01       	movw	r24, r20
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	59 f0       	breq	.+22     	; 0x7da <voidLcdExecute+0x66>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_HIGH);
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	88 2f       	mov	r24, r24
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	fc 01       	movw	r30, r24
     7cc:	e2 58       	subi	r30, 0x82	; 130
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	80 81       	ld	r24, Z
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
     7d8:	0a c0       	rjmp	.+20     	; 0x7ee <voidLcdExecute+0x7a>
		}
			else
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	fc 01       	movw	r30, r24
     7e2:	e2 58       	subi	r30, 0x82	; 130
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	80 81       	ld	r24, Z
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
static void voidLcdExecute(u8 u8ValueCpy)
{
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	8f 5f       	subi	r24, 0xFF	; 255
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	88 30       	cpi	r24, 0x08	; 8
     7f8:	48 f2       	brcs	.-110    	; 0x78c <voidLcdExecute+0x18>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
		}
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
     7fa:	8f e1       	ldi	r24, 0x1F	; 31
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_ms(1);
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
     80e:	8f e1       	ldi	r24, 0x1F	; 31
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
}
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	08 95       	ret

00000820 <LCD_voidWriteStringXY>:


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	00 d0       	rcall	.+0      	; 0x826 <LCD_voidWriteStringXY+0x6>
     826:	00 d0       	rcall	.+0      	; 0x828 <LCD_voidWriteStringXY+0x8>
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	9a 83       	std	Y+2, r25	; 0x02
     82e:	89 83       	std	Y+1, r24	; 0x01
     830:	6b 83       	std	Y+3, r22	; 0x03
     832:	4c 83       	std	Y+4, r20	; 0x04
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
     834:	8c 81       	ldd	r24, Y+4	; 0x04
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	00 24       	eor	r0, r0
     83c:	96 95       	lsr	r25
     83e:	87 95       	ror	r24
     840:	07 94       	ror	r0
     842:	96 95       	lsr	r25
     844:	87 95       	ror	r24
     846:	07 94       	ror	r0
     848:	98 2f       	mov	r25, r24
     84a:	80 2d       	mov	r24, r0
     84c:	98 2f       	mov	r25, r24
     84e:	90 68       	ori	r25, 0x80	; 128
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	89 2b       	or	r24, r25
     854:	0e 94 a9 03 	call	0x752	; 0x752 <voidWriteCmd>
     858:	0a c0       	rjmp	.+20     	; 0x86e <__stack+0xf>
	while(*u8PtrCpy)
	{
		voidWriteData(*u8PtrCpy);
     85a:	e9 81       	ldd	r30, Y+1	; 0x01
     85c:	fa 81       	ldd	r31, Y+2	; 0x02
     85e:	80 81       	ld	r24, Z
     860:	0e 94 98 03 	call	0x730	; 0x730 <voidWriteData>
		u8PtrCpy++;
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	9a 83       	std	Y+2, r25	; 0x02
     86c:	89 83       	std	Y+1, r24	; 0x01


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
	while(*u8PtrCpy)
     86e:	e9 81       	ldd	r30, Y+1	; 0x01
     870:	fa 81       	ldd	r31, Y+2	; 0x02
     872:	80 81       	ld	r24, Z
     874:	88 23       	and	r24, r24
     876:	89 f7       	brne	.-30     	; 0x85a <LCD_voidWriteStringXY+0x3a>
	{
		voidWriteData(*u8PtrCpy);
		u8PtrCpy++;
	}
}
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	cf 91       	pop	r28
     882:	df 91       	pop	r29
     884:	08 95       	ret

00000886 <LCD_voidWriteStringCurrentPosition>:
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
     886:	df 93       	push	r29
     888:	cf 93       	push	r28
     88a:	00 d0       	rcall	.+0      	; 0x88c <LCD_voidWriteStringCurrentPosition+0x6>
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	9a 83       	std	Y+2, r25	; 0x02
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	0a c0       	rjmp	.+20     	; 0x8aa <LCD_voidWriteStringCurrentPosition+0x24>
	while(*u8PtrCpy)
		{
			voidWriteData(*u8PtrCpy);
     896:	e9 81       	ldd	r30, Y+1	; 0x01
     898:	fa 81       	ldd	r31, Y+2	; 0x02
     89a:	80 81       	ld	r24, Z
     89c:	0e 94 98 03 	call	0x730	; 0x730 <voidWriteData>
			u8PtrCpy++;
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	9a 83       	std	Y+2, r25	; 0x02
     8a8:	89 83       	std	Y+1, r24	; 0x01
		u8PtrCpy++;
	}
}
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
	while(*u8PtrCpy)
     8aa:	e9 81       	ldd	r30, Y+1	; 0x01
     8ac:	fa 81       	ldd	r31, Y+2	; 0x02
     8ae:	80 81       	ld	r24, Z
     8b0:	88 23       	and	r24, r24
     8b2:	89 f7       	brne	.-30     	; 0x896 <LCD_voidWriteStringCurrentPosition+0x10>
		{
			voidWriteData(*u8PtrCpy);
			u8PtrCpy++;
		}
}
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	cf 91       	pop	r28
     8ba:	df 91       	pop	r29
     8bc:	08 95       	ret

000008be <LCD_voidClearDisplay>:
extern void LCD_voidClearDisplay(void)
{
     8be:	df 93       	push	r29
     8c0:	cf 93       	push	r28
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
	voidWriteCmd(0b00000001);
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	0e 94 a9 03 	call	0x752	; 0x752 <voidWriteCmd>
	Delay_ms(2);
     8cc:	62 e0       	ldi	r22, 0x02	; 2
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	08 95       	ret

000008de <LCD_voidDrawCustomChar>:

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <LCD_voidDrawCustomChar+0x6>
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <LCD_voidDrawCustomChar+0x8>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	9b 83       	std	Y+3, r25	; 0x03
     8ec:	8a 83       	std	Y+2, r24	; 0x02
     8ee:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
     8f0:	8c 81       	ldd	r24, Y+4	; 0x04
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	80 64       	ori	r24, 0x40	; 64
     904:	0e 94 a9 03 	call	0x752	; 0x752 <voidWriteCmd>
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
     908:	19 82       	std	Y+1, r1	; 0x01
     90a:	0e c0       	rjmp	.+28     	; 0x928 <LCD_voidDrawCustomChar+0x4a>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	28 2f       	mov	r18, r24
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	9b 81       	ldd	r25, Y+3	; 0x03
     916:	fc 01       	movw	r30, r24
     918:	e2 0f       	add	r30, r18
     91a:	f3 1f       	adc	r31, r19
     91c:	80 81       	ld	r24, Z
     91e:	0e 94 98 03 	call	0x730	; 0x730 <voidWriteData>
}

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	88 30       	cpi	r24, 0x08	; 8
     92c:	78 f3       	brcs	.-34     	; 0x90c <LCD_voidDrawCustomChar+0x2e>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
	}
}
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	cf 91       	pop	r28
     938:	df 91       	pop	r29
     93a:	08 95       	ret

0000093c <LCD_voidWriteCustomChar>:

extern void LCD_voidWriteCustomChar(u8 u8IndexCpy ,u8 u8XPositionCpy,u8 u8YPositionCpy)
{
     93c:	df 93       	push	r29
     93e:	cf 93       	push	r28
     940:	00 d0       	rcall	.+0      	; 0x942 <LCD_voidWriteCustomChar+0x6>
     942:	0f 92       	push	r0
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	89 83       	std	Y+1, r24	; 0x01
     94a:	6a 83       	std	Y+2, r22	; 0x02
     94c:	4b 83       	std	Y+3, r20	; 0x03
	voidWriteCmd((0x80 | (u8YPositionCpy<<6) | u8XPositionCpy));
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	88 2f       	mov	r24, r24
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	00 24       	eor	r0, r0
     956:	96 95       	lsr	r25
     958:	87 95       	ror	r24
     95a:	07 94       	ror	r0
     95c:	96 95       	lsr	r25
     95e:	87 95       	ror	r24
     960:	07 94       	ror	r0
     962:	98 2f       	mov	r25, r24
     964:	80 2d       	mov	r24, r0
     966:	98 2f       	mov	r25, r24
     968:	90 68       	ori	r25, 0x80	; 128
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	89 2b       	or	r24, r25
     96e:	0e 94 a9 03 	call	0x752	; 0x752 <voidWriteCmd>
	voidWriteData(u8IndexCpy);
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	0e 94 98 03 	call	0x730	; 0x730 <voidWriteData>
}
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	cf 91       	pop	r28
     980:	df 91       	pop	r29
     982:	08 95       	ret

00000984 <TIM1_voidNormalInitialize>:
#include "BIT_MATH.h"
#include "TIM1_reg.h"
#include "TIM1_priv.h"
#include "TIM1_int.h"
void TIM1_voidNormalInitialize(void)
{
     984:	df 93       	push	r29
     986:	cf 93       	push	r28
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
	/*Disable Interrupt Overflow and Clear the overflow interrupt flag */
	CLR_BIT(TIMSK,2);
     98c:	a9 e5       	ldi	r26, 0x59	; 89
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e9 e5       	ldi	r30, 0x59	; 89
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	8b 7f       	andi	r24, 0xFB	; 251
     998:	8c 93       	st	X, r24
	SET_BIT(TIFR,2);
     99a:	a8 e5       	ldi	r26, 0x58	; 88
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 e5       	ldi	r30, 0x58	; 88
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	84 60       	ori	r24, 0x04	; 4
     9a6:	8c 93       	st	X, r24
	/*Choose Normal Port Operation*/
	CLR_BIT(TCCR1A,7);
     9a8:	af e4       	ldi	r26, 0x4F	; 79
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	ef e4       	ldi	r30, 0x4F	; 79
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
     9b6:	af e4       	ldi	r26, 0x4F	; 79
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	ef e4       	ldi	r30, 0x4F	; 79
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	8f 7b       	andi	r24, 0xBF	; 191
     9c2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,5);
     9c4:	af e4       	ldi	r26, 0x4F	; 79
     9c6:	b0 e0       	ldi	r27, 0x00	; 0
     9c8:	ef e4       	ldi	r30, 0x4F	; 79
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	8f 7d       	andi	r24, 0xDF	; 223
     9d0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,4);
     9d2:	af e4       	ldi	r26, 0x4F	; 79
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	ef e4       	ldi	r30, 0x4F	; 79
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	8f 7e       	andi	r24, 0xEF	; 239
     9de:	8c 93       	st	X, r24

	/*Choose Normal Operation*/
	CLR_BIT(TCCR1A,0);
     9e0:	af e4       	ldi	r26, 0x4F	; 79
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	ef e4       	ldi	r30, 0x4F	; 79
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	8e 7f       	andi	r24, 0xFE	; 254
     9ec:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     9ee:	af e4       	ldi	r26, 0x4F	; 79
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	ef e4       	ldi	r30, 0x4F	; 79
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	8d 7f       	andi	r24, 0xFD	; 253
     9fa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     9fc:	ae e4       	ldi	r26, 0x4E	; 78
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	ee e4       	ldi	r30, 0x4E	; 78
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	87 7f       	andi	r24, 0xF7	; 247
     a08:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
     a0a:	ae e4       	ldi	r26, 0x4E	; 78
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	ee e4       	ldi	r30, 0x4E	; 78
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8f 7e       	andi	r24, 0xEF	; 239
     a16:	8c 93       	st	X, r24
}
     a18:	cf 91       	pop	r28
     a1a:	df 91       	pop	r29
     a1c:	08 95       	ret

00000a1e <voidTIM1_StartCount>:

void voidTIM1_StartCount(void)
{
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
#if TIM1_PRESCALER == TIM1_NO_DIVISION
	TCCR1B|=TIM1_NO_DIVISION_MASK;
#elif TIM1_PRESCALER == TIM1_8_DIVISION
	TCCR1B|=TIM1_8_DIVISION_MASK;
     a26:	ae e4       	ldi	r26, 0x4E	; 78
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	ee e4       	ldi	r30, 0x4E	; 78
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	82 60       	ori	r24, 0x02	; 2
     a32:	8c 93       	st	X, r24
#elif TIM1_PRESCALER == TIM1_EXT_CLK_RISING_EDGE_MASK
	TCCR1B|=TIM1_EXT_CLK_RISING_EDGE_MASK;
#elif TIM1_PRESCALER == TIM1_EXT_CLK_FALLING_EDGE_MASK
	TCCR1B|=TIM1_EXT_CLK_FALLING_EDGE_MASK;
#endif
}
     a34:	cf 91       	pop	r28
     a36:	df 91       	pop	r29
     a38:	08 95       	ret

00000a3a <voidTIM1_StopCount>:

void voidTIM1_StopCount(void)
{
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,0);
     a42:	ae e4       	ldi	r26, 0x4E	; 78
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	ee e4       	ldi	r30, 0x4E	; 78
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	8e 7f       	andi	r24, 0xFE	; 254
     a4e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,1);
     a50:	ae e4       	ldi	r26, 0x4E	; 78
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	ee e4       	ldi	r30, 0x4E	; 78
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	8d 7f       	andi	r24, 0xFD	; 253
     a5c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
     a5e:	ae e4       	ldi	r26, 0x4E	; 78
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	ee e4       	ldi	r30, 0x4E	; 78
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	8b 7f       	andi	r24, 0xFB	; 251
     a6a:	8c 93       	st	X, r24
}
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <voidTIM1_EnableOverflowInterrupt>:

void voidTIM1_EnableOverflowInterrupt(void)
{
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
	/*Enable Interrupt*/
	SET_BIT(TIMSK,2);
     a7a:	a9 e5       	ldi	r26, 0x59	; 89
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e9 e5       	ldi	r30, 0x59	; 89
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	84 60       	ori	r24, 0x04	; 4
     a86:	8c 93       	st	X, r24
}
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <voidTIM1_DisableOverflowInterrupt>:

void voidTIM1_DisableOverflowInterrupt(void)
{
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
	/*Enable Interrupt*/
	CLR_BIT(TIMSK,2);
     a96:	a9 e5       	ldi	r26, 0x59	; 89
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	e9 e5       	ldi	r30, 0x59	; 89
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	8b 7f       	andi	r24, 0xFB	; 251
     aa2:	8c 93       	st	X, r24
}
     aa4:	cf 91       	pop	r28
     aa6:	df 91       	pop	r29
     aa8:	08 95       	ret

00000aaa <VoidTIM1_GetCounter>:

u16 VoidTIM1_GetCounter(void)
{
     aaa:	df 93       	push	r29
     aac:	cf 93       	push	r28
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     ab2:	ec e4       	ldi	r30, 0x4C	; 76
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
}
     aba:	cf 91       	pop	r28
     abc:	df 91       	pop	r29
     abe:	08 95       	ret

00000ac0 <voidTIM1_ClearCounter>:

void voidTIM1_ClearCounter(void)
{
     ac0:	df 93       	push	r29
     ac2:	cf 93       	push	r28
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
     ac8:	ec e4       	ldi	r30, 0x4C	; 76
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	11 82       	std	Z+1, r1	; 0x01
     ace:	10 82       	st	Z, r1
}
     ad0:	cf 91       	pop	r28
     ad2:	df 91       	pop	r29
     ad4:	08 95       	ret

00000ad6 <TIM_voidInitialize>:
static void (* TIM_CallBack) (void);
static void (* TIM_CallBack_CTC) (void);

/*Description: This function shall init the Timer prephiral*/
void TIM_voidInitialize(void)
{
     ad6:	df 93       	push	r29
     ad8:	cf 93       	push	r28
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
	/*clear flag*/
	SET_BIT(TIFR,0);
     ade:	a8 e5       	ldi	r26, 0x58	; 88
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	e8 e5       	ldi	r30, 0x58	; 88
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	81 60       	ori	r24, 0x01	; 1
     aea:	8c 93       	st	X, r24
	SET_BIT(TIFR,1);
     aec:	a8 e5       	ldi	r26, 0x58	; 88
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	e8 e5       	ldi	r30, 0x58	; 88
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	82 60       	ori	r24, 0x02	; 2
     af8:	8c 93       	st	X, r24
	/*disable interrupt for counting and ctc*/
	CLR_BIT(TIMSK,0);
     afa:	a9 e5       	ldi	r26, 0x59	; 89
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	e9 e5       	ldi	r30, 0x59	; 89
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	8e 7f       	andi	r24, 0xFE	; 254
     b06:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
     b08:	a9 e5       	ldi	r26, 0x59	; 89
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	e9 e5       	ldi	r30, 0x59	; 89
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	8d 7f       	andi	r24, 0xFD	; 253
     b14:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
#elif TIM_u8_FAST_PWM_MODES == TIM_u8_FAST_PWM_CLEAR_OC0
	CLR_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#elif TIM_u8_FAST_PWM_MODES == TIM_u8_FAST_PWM_SET_OC0
	SET_BIT(TCCR0,4);
     b16:	a3 e5       	ldi	r26, 0x53	; 83
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e3 e5       	ldi	r30, 0x53	; 83
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	80 61       	ori	r24, 0x10	; 16
     b22:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
     b24:	a3 e5       	ldi	r26, 0x53	; 83
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	e3 e5       	ldi	r30, 0x53	; 83
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	80 62       	ori	r24, 0x20	; 32
     b30:	8c 93       	st	X, r24
#endif
	OCR0=TIM_u8_OCR0_VALUE;
     b32:	ec e5       	ldi	r30, 0x5C	; 92
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	82 e3       	ldi	r24, 0x32	; 50
     b38:	80 83       	st	Z, r24
	SET_BIT(TCCR0,3);
     b3a:	a3 e5       	ldi	r26, 0x53	; 83
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e3 e5       	ldi	r30, 0x53	; 83
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	88 60       	ori	r24, 0x08	; 8
     b46:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
     b48:	a3 e5       	ldi	r26, 0x53	; 83
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	e3 e5       	ldi	r30, 0x53	; 83
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	80 64       	ori	r24, 0x40	; 64
     b54:	8c 93       	st	X, r24
#endif
	/*set prescaler (which powers the timer not the interrupt but the timer it self)*/
#if TIM_u16_PRESCALER == TIM_u16_NO_DIVISON
	TCCR0 |= TIM_u8_NO_DIV_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_8
	TCCR0 |= TIM_u8_DIV_BY_8_MASK;
     b56:	a3 e5       	ldi	r26, 0x53	; 83
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e3 e5       	ldi	r30, 0x53	; 83
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	8c 93       	st	X, r24
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_256
	TCCR0 |= TIM_u8_DIV_BY_256_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_1024
	TCCR0 |= TIM_u8_DIV_BY_1024_MASK;
#endif
}
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <TIM_voidEnableInt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInt(void)
{
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
     b72:	a9 e5       	ldi	r26, 0x59	; 89
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e9 e5       	ldi	r30, 0x59	; 89
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <TIM_voidDisableInt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInt(void)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
     b8e:	a9 e5       	ldi	r26, 0x59	; 89
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e9 e5       	ldi	r30, 0x59	; 89
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	8c 93       	st	X, r24
}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <TIM_voidEnableIntCTC>:

/*Description: enable Timer interrupt CTC*/
void TIM_voidEnableIntCTC(void)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
     baa:	a9 e5       	ldi	r26, 0x59	; 89
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e9 e5       	ldi	r30, 0x59	; 89
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	82 60       	ori	r24, 0x02	; 2
     bb6:	8c 93       	st	X, r24
}
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <TIM_voidDisableIntCTC>:

/*Description: disable Timer interrupt CTC*/
void TIM_voidDisableIntCTC(void)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
     bc6:	a9 e5       	ldi	r26, 0x59	; 89
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e9 e5       	ldi	r30, 0x59	; 89
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8d 7f       	andi	r24, 0xFD	; 253
     bd2:	8c 93       	st	X, r24
}
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <TIM_voidSetCallBack>:


/*Description: set Timer callback function*/
void TIM_voidSetCallBack(void (* ptrCpy) (void))
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <TIM_voidSetCallBack+0x6>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack=ptrCpy;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	90 93 9f 00 	sts	0x009F, r25
     bf0:	80 93 9e 00 	sts	0x009E, r24
}
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <TIM_voidSetCallBackCTC>:

/*Description: set CTC Timer callback function*/
void TIM_voidSetCallBackCTC(void (* ptrCpy) (void))
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <TIM_voidSetCallBackCTC+0x6>
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack_CTC=ptrCpy;
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
     c10:	90 93 a1 00 	sts	0x00A1, r25
     c14:	80 93 a0 00 	sts	0x00A0, r24
}
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <TIM_voidInitCountingRegister>:

/*Description: init timer register*/
void TIM_voidInitCountingRegister(u8 u8ValueCpy)
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	0f 92       	push	r0
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
     c2e:	e2 e5       	ldi	r30, 0x52	; 82
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	80 83       	st	Z, r24
}
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <TIM_voidInitCTCRegister>:

/*Description: init OCR0 timer register*/
void TIM_voidInitCTCRegister(u8 u8ValueCpy)
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	0f 92       	push	r0
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8ValueCpy;
     c4a:	ec e5       	ldi	r30, 0x5C	; 92
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	80 83       	st	Z, r24
}
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <__vector_11>:

void __vector_11 (void)__attribute__((signal,used));
void __vector_11 (void)
{
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	2f 93       	push	r18
     c66:	3f 93       	push	r19
     c68:	4f 93       	push	r20
     c6a:	5f 93       	push	r21
     c6c:	6f 93       	push	r22
     c6e:	7f 93       	push	r23
     c70:	8f 93       	push	r24
     c72:	9f 93       	push	r25
     c74:	af 93       	push	r26
     c76:	bf 93       	push	r27
     c78:	ef 93       	push	r30
     c7a:	ff 93       	push	r31
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack();
     c84:	e0 91 9e 00 	lds	r30, 0x009E
     c88:	f0 91 9f 00 	lds	r31, 0x009F
     c8c:	09 95       	icall
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	7f 91       	pop	r23
     ca0:	6f 91       	pop	r22
     ca2:	5f 91       	pop	r21
     ca4:	4f 91       	pop	r20
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__vector_10>:


void __vector_10 (void)__attribute__((signal,used));
void __vector_10 (void)
{
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack_CTC();
     cde:	e0 91 a0 00 	lds	r30, 0x00A0
     ce2:	f0 91 a1 00 	lds	r31, 0x00A1
     ce6:	09 95       	icall
}
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	bf 91       	pop	r27
     cf2:	af 91       	pop	r26
     cf4:	9f 91       	pop	r25
     cf6:	8f 91       	pop	r24
     cf8:	7f 91       	pop	r23
     cfa:	6f 91       	pop	r22
     cfc:	5f 91       	pop	r21
     cfe:	4f 91       	pop	r20
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <getFreqancyData>:
static u8 End=0;
static u8 Write=0;
static u8 Xpos=8;
static const u8* Numbers[10]  ={(u8 *)"0",(u8 *)"1",(u8 *)"2",(u8 *)"3",(u8 *)"4",(u8 *)"5",(u8 *)"6",(u8 *)"7",(u8 *)"8",(u8 *)"9"};
void getFreqancyData(void)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	if(End==0)
     d16:	80 91 a8 00 	lds	r24, 0x00A8
     d1a:	88 23       	and	r24, r24
     d1c:	91 f5       	brne	.+100    	; 0xd82 <getFreqancyData+0x74>
	{

		if(flag==0)
     d1e:	80 91 a2 00 	lds	r24, 0x00A2
     d22:	88 23       	and	r24, r24
     d24:	d1 f4       	brne	.+52     	; 0xd5a <getFreqancyData+0x4c>
		{

			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			voidTIM1_StartCount();
     d2e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <voidTIM1_StartCount>
			EXTI_voidChangeMode(EXTI_u8_FALLING_EDGE);
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	0e 94 ba 02 	call	0x574	; 0x574 <EXTI_voidChangeMode>
			if(firstTime==1)
     d38:	80 91 a7 00 	lds	r24, 0x00A7
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	49 f4       	brne	.+18     	; 0xd52 <getFreqancyData+0x44>
			{
				Toff=VoidTIM1_GetCounter();
     d40:	0e 94 55 05 	call	0xaaa	; 0xaaa <VoidTIM1_GetCounter>
     d44:	90 93 a6 00 	sts	0x00A6, r25
     d48:	80 93 a5 00 	sts	0x00A5, r24
				End=1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 a8 00 	sts	0x00A8, r24
			}
			flag=1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 a2 00 	sts	0x00A2, r24
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <getFreqancyData+0x74>
		}
		else if(flag==1)
     d5a:	80 91 a2 00 	lds	r24, 0x00A2
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	81 f4       	brne	.+32     	; 0xd82 <getFreqancyData+0x74>
		{
			Ton=VoidTIM1_GetCounter();
     d62:	0e 94 55 05 	call	0xaaa	; 0xaaa <VoidTIM1_GetCounter>
     d66:	90 93 a4 00 	sts	0x00A4, r25
     d6a:	80 93 a3 00 	sts	0x00A3, r24

			voidTIM1_ClearCounter();
     d6e:	0e 94 60 05 	call	0xac0	; 0xac0 <voidTIM1_ClearCounter>
			EXTI_voidChangeMode(EXTI_u8_RAISING_EDGE);
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	0e 94 ba 02 	call	0x574	; 0x574 <EXTI_voidChangeMode>
			firstTime=1;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 a7 00 	sts	0x00A7, r24
			flag=0;
     d7e:	10 92 a2 00 	sts	0x00A2, r1
		}
	}

}
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <main>:
void main(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <main+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <main+0x8>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <main+0xa>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
     d96:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_26,DIO_u8_HIGH);//Pull up resistor
     d9a:	8a e1       	ldi	r24, 0x1A	; 26
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	LCD_voidInitialize();
     da2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_voidInitialize>
	LCD_voidWriteStringXY((u8 *)"DUTY",0,0);
     da6:	84 e7       	ldi	r24, 0x74	; 116
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	0e 94 10 04 	call	0x820	; 0x820 <LCD_voidWriteStringXY>
	LCD_voidWriteStringXY((u8 *)"FREQ",0,1);
     db2:	89 e7       	ldi	r24, 0x79	; 121
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 10 04 	call	0x820	; 0x820 <LCD_voidWriteStringXY>
	TIM1_voidNormalInitialize();
     dbe:	0e 94 c2 04 	call	0x984	; 0x984 <TIM1_voidNormalInitialize>
	TIM_voidInitialize();
     dc2:	0e 94 6b 05 	call	0xad6	; 0xad6 <TIM_voidInitialize>
	EXTI_voidInit();
     dc6:	0e 94 85 02 	call	0x50a	; 0x50a <EXTI_voidInit>
	EXTI_voidSetCallback(getFreqancyData);
     dca:	87 e8       	ldi	r24, 0x87	; 135
     dcc:	96 e0       	ldi	r25, 0x06	; 6
     dce:	0e 94 a8 02 	call	0x550	; 0x550 <EXTI_voidSetCallback>
	EXTI_voidEnable();
     dd2:	0e 94 0b 03 	call	0x616	; 0x616 <EXTI_voidEnable>
	GIE_EnableGlobalInterrupt();
     dd6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <GIE_EnableGlobalInterrupt>
	while(1)
	{
		if(Write==0)
     dda:	80 91 a9 00 	lds	r24, 0x00A9
     dde:	88 23       	and	r24, r24
     de0:	e1 f7       	brne	.-8      	; 0xdda <main+0x52>
		{
			if(End==1)
     de2:	80 91 a8 00 	lds	r24, 0x00A8
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	c1 f7       	brne	.-16     	; 0xdda <main+0x52>
			{
				u8 Duty;
				u32 Freq;
				u8 digit;
				Ton+=8;
     dea:	80 91 a3 00 	lds	r24, 0x00A3
     dee:	90 91 a4 00 	lds	r25, 0x00A4
     df2:	08 96       	adiw	r24, 0x08	; 8
     df4:	90 93 a4 00 	sts	0x00A4, r25
     df8:	80 93 a3 00 	sts	0x00A3, r24
				Toff-=16;
     dfc:	80 91 a5 00 	lds	r24, 0x00A5
     e00:	90 91 a6 00 	lds	r25, 0x00A6
     e04:	40 97       	sbiw	r24, 0x10	; 16
     e06:	90 93 a6 00 	sts	0x00A6, r25
     e0a:	80 93 a5 00 	sts	0x00A5, r24
				Duty=((Ton*100)/(Ton+Toff));
     e0e:	20 91 a3 00 	lds	r18, 0x00A3
     e12:	30 91 a4 00 	lds	r19, 0x00A4
     e16:	84 e6       	ldi	r24, 0x64	; 100
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	28 9f       	mul	r18, r24
     e1c:	a0 01       	movw	r20, r0
     e1e:	29 9f       	mul	r18, r25
     e20:	50 0d       	add	r21, r0
     e22:	38 9f       	mul	r19, r24
     e24:	50 0d       	add	r21, r0
     e26:	11 24       	eor	r1, r1
     e28:	20 91 a3 00 	lds	r18, 0x00A3
     e2c:	30 91 a4 00 	lds	r19, 0x00A4
     e30:	80 91 a5 00 	lds	r24, 0x00A5
     e34:	90 91 a6 00 	lds	r25, 0x00A6
     e38:	28 0f       	add	r18, r24
     e3a:	39 1f       	adc	r19, r25
     e3c:	ca 01       	movw	r24, r20
     e3e:	b9 01       	movw	r22, r18
     e40:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodhi4>
     e44:	cb 01       	movw	r24, r22
     e46:	8e 83       	std	Y+6, r24	; 0x06

				Freq=(u32)1000000/(u16)(Ton+Toff);
     e48:	20 91 a3 00 	lds	r18, 0x00A3
     e4c:	30 91 a4 00 	lds	r19, 0x00A4
     e50:	80 91 a5 00 	lds	r24, 0x00A5
     e54:	90 91 a6 00 	lds	r25, 0x00A6
     e58:	82 0f       	add	r24, r18
     e5a:	93 1f       	adc	r25, r19
     e5c:	9c 01       	movw	r18, r24
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	80 e4       	ldi	r24, 0x40	; 64
     e64:	92 e4       	ldi	r25, 0x42	; 66
     e66:	af e0       	ldi	r26, 0x0F	; 15
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__udivmodsi4>
     e72:	da 01       	movw	r26, r20
     e74:	c9 01       	movw	r24, r18
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	9b 83       	std	Y+3, r25	; 0x03
     e7a:	ac 83       	std	Y+4, r26	; 0x04
     e7c:	bd 83       	std	Y+5, r27	; 0x05
     e7e:	22 c0       	rjmp	.+68     	; 0xec4 <main+0x13c>
				while(Duty)
				{
					digit=Duty%10;
     e80:	8e 81       	ldd	r24, Y+6	; 0x06
     e82:	9a e0       	ldi	r25, 0x0A	; 10
     e84:	69 2f       	mov	r22, r25
     e86:	0e 94 ca 07 	call	0xf94	; 0xf94 <__udivmodqi4>
     e8a:	89 2f       	mov	r24, r25
     e8c:	89 83       	std	Y+1, r24	; 0x01
					Duty/=10;
     e8e:	8e 81       	ldd	r24, Y+6	; 0x06
     e90:	9a e0       	ldi	r25, 0x0A	; 10
     e92:	69 2f       	mov	r22, r25
     e94:	0e 94 ca 07 	call	0xf94	; 0xf94 <__udivmodqi4>
     e98:	8e 83       	std	Y+6, r24	; 0x06
					LCD_voidWriteStringXY((u8 *)Numbers[digit],Xpos,0);
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	fc 01       	movw	r30, r24
     ea6:	e9 57       	subi	r30, 0x79	; 121
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	20 91 86 00 	lds	r18, 0x0086
     eb2:	62 2f       	mov	r22, r18
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	0e 94 10 04 	call	0x820	; 0x820 <LCD_voidWriteStringXY>
					Xpos--;
     eba:	80 91 86 00 	lds	r24, 0x0086
     ebe:	81 50       	subi	r24, 0x01	; 1
     ec0:	80 93 86 00 	sts	0x0086, r24
				Ton+=8;
				Toff-=16;
				Duty=((Ton*100)/(Ton+Toff));

				Freq=(u32)1000000/(u16)(Ton+Toff);
				while(Duty)
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	88 23       	and	r24, r24
     ec8:	d9 f6       	brne	.-74     	; 0xe80 <main+0xf8>
					digit=Duty%10;
					Duty/=10;
					LCD_voidWriteStringXY((u8 *)Numbers[digit],Xpos,0);
					Xpos--;
				}
				Xpos=8;
     eca:	88 e0       	ldi	r24, 0x08	; 8
     ecc:	80 93 86 00 	sts	0x0086, r24
     ed0:	36 c0       	rjmp	.+108    	; 0xf3e <main+0x1b6>
				while(Freq)
				{
					digit=Freq%10;
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	ac 81       	ldd	r26, Y+4	; 0x04
     ed8:	bd 81       	ldd	r27, Y+5	; 0x05
     eda:	2a e0       	ldi	r18, 0x0A	; 10
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__udivmodsi4>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	89 83       	std	Y+1, r24	; 0x01
					Freq/=10;
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	9b 81       	ldd	r25, Y+3	; 0x03
     ef4:	ac 81       	ldd	r26, Y+4	; 0x04
     ef6:	bd 81       	ldd	r27, Y+5	; 0x05
     ef8:	2a e0       	ldi	r18, 0x0A	; 10
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__udivmodsi4>
     f08:	da 01       	movw	r26, r20
     f0a:	c9 01       	movw	r24, r18
     f0c:	8a 83       	std	Y+2, r24	; 0x02
     f0e:	9b 83       	std	Y+3, r25	; 0x03
     f10:	ac 83       	std	Y+4, r26	; 0x04
     f12:	bd 83       	std	Y+5, r27	; 0x05
					LCD_voidWriteStringXY((u8 *)Numbers[digit],Xpos,1);
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	fc 01       	movw	r30, r24
     f20:	e9 57       	subi	r30, 0x79	; 121
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	20 91 86 00 	lds	r18, 0x0086
     f2c:	62 2f       	mov	r22, r18
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	0e 94 10 04 	call	0x820	; 0x820 <LCD_voidWriteStringXY>
					Xpos--;
     f34:	80 91 86 00 	lds	r24, 0x0086
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	80 93 86 00 	sts	0x0086, r24
					Duty/=10;
					LCD_voidWriteStringXY((u8 *)Numbers[digit],Xpos,0);
					Xpos--;
				}
				Xpos=8;
				while(Freq)
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	ac 81       	ldd	r26, Y+4	; 0x04
     f44:	bd 81       	ldd	r27, Y+5	; 0x05
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	a1 05       	cpc	r26, r1
     f4a:	b1 05       	cpc	r27, r1
     f4c:	11 f6       	brne	.-124    	; 0xed2 <main+0x14a>
					digit=Freq%10;
					Freq/=10;
					LCD_voidWriteStringXY((u8 *)Numbers[digit],Xpos,1);
					Xpos--;
				}
				Write=1;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 a9 00 	sts	0x00A9, r24
     f54:	42 cf       	rjmp	.-380    	; 0xdda <main+0x52>

00000f56 <__mulsi3>:
     f56:	62 9f       	mul	r22, r18
     f58:	d0 01       	movw	r26, r0
     f5a:	73 9f       	mul	r23, r19
     f5c:	f0 01       	movw	r30, r0
     f5e:	82 9f       	mul	r24, r18
     f60:	e0 0d       	add	r30, r0
     f62:	f1 1d       	adc	r31, r1
     f64:	64 9f       	mul	r22, r20
     f66:	e0 0d       	add	r30, r0
     f68:	f1 1d       	adc	r31, r1
     f6a:	92 9f       	mul	r25, r18
     f6c:	f0 0d       	add	r31, r0
     f6e:	83 9f       	mul	r24, r19
     f70:	f0 0d       	add	r31, r0
     f72:	74 9f       	mul	r23, r20
     f74:	f0 0d       	add	r31, r0
     f76:	65 9f       	mul	r22, r21
     f78:	f0 0d       	add	r31, r0
     f7a:	99 27       	eor	r25, r25
     f7c:	72 9f       	mul	r23, r18
     f7e:	b0 0d       	add	r27, r0
     f80:	e1 1d       	adc	r30, r1
     f82:	f9 1f       	adc	r31, r25
     f84:	63 9f       	mul	r22, r19
     f86:	b0 0d       	add	r27, r0
     f88:	e1 1d       	adc	r30, r1
     f8a:	f9 1f       	adc	r31, r25
     f8c:	bd 01       	movw	r22, r26
     f8e:	cf 01       	movw	r24, r30
     f90:	11 24       	eor	r1, r1
     f92:	08 95       	ret

00000f94 <__udivmodqi4>:
     f94:	99 1b       	sub	r25, r25
     f96:	79 e0       	ldi	r23, 0x09	; 9
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__udivmodqi4_ep>

00000f9a <__udivmodqi4_loop>:
     f9a:	99 1f       	adc	r25, r25
     f9c:	96 17       	cp	r25, r22
     f9e:	08 f0       	brcs	.+2      	; 0xfa2 <__udivmodqi4_ep>
     fa0:	96 1b       	sub	r25, r22

00000fa2 <__udivmodqi4_ep>:
     fa2:	88 1f       	adc	r24, r24
     fa4:	7a 95       	dec	r23
     fa6:	c9 f7       	brne	.-14     	; 0xf9a <__udivmodqi4_loop>
     fa8:	80 95       	com	r24
     faa:	08 95       	ret

00000fac <__udivmodhi4>:
     fac:	aa 1b       	sub	r26, r26
     fae:	bb 1b       	sub	r27, r27
     fb0:	51 e1       	ldi	r21, 0x11	; 17
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <__udivmodhi4_ep>

00000fb4 <__udivmodhi4_loop>:
     fb4:	aa 1f       	adc	r26, r26
     fb6:	bb 1f       	adc	r27, r27
     fb8:	a6 17       	cp	r26, r22
     fba:	b7 07       	cpc	r27, r23
     fbc:	10 f0       	brcs	.+4      	; 0xfc2 <__udivmodhi4_ep>
     fbe:	a6 1b       	sub	r26, r22
     fc0:	b7 0b       	sbc	r27, r23

00000fc2 <__udivmodhi4_ep>:
     fc2:	88 1f       	adc	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	5a 95       	dec	r21
     fc8:	a9 f7       	brne	.-22     	; 0xfb4 <__udivmodhi4_loop>
     fca:	80 95       	com	r24
     fcc:	90 95       	com	r25
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	08 95       	ret

00000fd4 <__udivmodsi4>:
     fd4:	a1 e2       	ldi	r26, 0x21	; 33
     fd6:	1a 2e       	mov	r1, r26
     fd8:	aa 1b       	sub	r26, r26
     fda:	bb 1b       	sub	r27, r27
     fdc:	fd 01       	movw	r30, r26
     fde:	0d c0       	rjmp	.+26     	; 0xffa <__udivmodsi4_ep>

00000fe0 <__udivmodsi4_loop>:
     fe0:	aa 1f       	adc	r26, r26
     fe2:	bb 1f       	adc	r27, r27
     fe4:	ee 1f       	adc	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	a2 17       	cp	r26, r18
     fea:	b3 07       	cpc	r27, r19
     fec:	e4 07       	cpc	r30, r20
     fee:	f5 07       	cpc	r31, r21
     ff0:	20 f0       	brcs	.+8      	; 0xffa <__udivmodsi4_ep>
     ff2:	a2 1b       	sub	r26, r18
     ff4:	b3 0b       	sbc	r27, r19
     ff6:	e4 0b       	sbc	r30, r20
     ff8:	f5 0b       	sbc	r31, r21

00000ffa <__udivmodsi4_ep>:
     ffa:	66 1f       	adc	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	1a 94       	dec	r1
    1004:	69 f7       	brne	.-38     	; 0xfe0 <__udivmodsi4_loop>
    1006:	60 95       	com	r22
    1008:	70 95       	com	r23
    100a:	80 95       	com	r24
    100c:	90 95       	com	r25
    100e:	9b 01       	movw	r18, r22
    1010:	ac 01       	movw	r20, r24
    1012:	bd 01       	movw	r22, r26
    1014:	cf 01       	movw	r24, r30
    1016:	08 95       	ret

00001018 <_exit>:
    1018:	f8 94       	cli

0000101a <__stop_program>:
    101a:	ff cf       	rjmp	.-2      	; 0x101a <__stop_program>
