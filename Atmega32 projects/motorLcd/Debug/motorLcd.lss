
motorLcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000008ea  0000095e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000cd8  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000061d  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 cf 03 	call	0x79e	; 0x79e <main>
  7a:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2c 97       	sbiw	r28, 0x0c	; 12
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	69 87       	std	Y+9, r22	; 0x09
  98:	7a 87       	std	Y+10, r23	; 0x0a
  9a:	8b 87       	std	Y+11, r24	; 0x0b
  9c:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  9e:	89 85       	ldd	r24, Y+9	; 0x09
  a0:	9a 85       	ldd	r25, Y+10	; 0x0a
  a2:	ab 85       	ldd	r26, Y+11	; 0x0b
  a4:	bc 85       	ldd	r27, Y+12	; 0x0c
  a6:	22 e7       	ldi	r18, 0x72	; 114
  a8:	31 e0       	ldi	r19, 0x01	; 1
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	bc 01       	movw	r22, r24
  b0:	cd 01       	movw	r24, r26
  b2:	0e 94 32 04 	call	0x864	; 0x864 <__mulsi3>
  b6:	dc 01       	movw	r26, r24
  b8:	cb 01       	movw	r24, r22
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	ab 83       	std	Y+3, r26	; 0x03
  c0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  c2:	1d 82       	std	Y+5, r1	; 0x05
  c4:	1e 82       	std	Y+6, r1	; 0x06
  c6:	1f 82       	std	Y+7, r1	; 0x07
  c8:	18 86       	std	Y+8, r1	; 0x08
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <Delay_ms+0x62>
	{
		asm("nop");
  cc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  ce:	8d 81       	ldd	r24, Y+5	; 0x05
  d0:	9e 81       	ldd	r25, Y+6	; 0x06
  d2:	af 81       	ldd	r26, Y+7	; 0x07
  d4:	b8 85       	ldd	r27, Y+8	; 0x08
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	a1 1d       	adc	r26, r1
  da:	b1 1d       	adc	r27, r1
  dc:	8d 83       	std	Y+5, r24	; 0x05
  de:	9e 83       	std	Y+6, r25	; 0x06
  e0:	af 83       	std	Y+7, r26	; 0x07
  e2:	b8 87       	std	Y+8, r27	; 0x08
  e4:	2d 81       	ldd	r18, Y+5	; 0x05
  e6:	3e 81       	ldd	r19, Y+6	; 0x06
  e8:	4f 81       	ldd	r20, Y+7	; 0x07
  ea:	58 85       	ldd	r21, Y+8	; 0x08
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	ab 81       	ldd	r26, Y+3	; 0x03
  f2:	bc 81       	ldd	r27, Y+4	; 0x04
  f4:	28 17       	cp	r18, r24
  f6:	39 07       	cpc	r19, r25
  f8:	4a 07       	cpc	r20, r26
  fa:	5b 07       	cpc	r21, r27
  fc:	38 f3       	brcs	.-50     	; 0xcc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  fe:	2c 96       	adiw	r28, 0x0c	; 12
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	cf 91       	pop	r28
 10c:	df 91       	pop	r29
 10e:	08 95       	ret

00000110 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	2c 97       	sbiw	r28, 0x0c	; 12
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	69 87       	std	Y+9, r22	; 0x09
 126:	7a 87       	std	Y+10, r23	; 0x0a
 128:	8b 87       	std	Y+11, r24	; 0x0b
 12a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 12c:	89 85       	ldd	r24, Y+9	; 0x09
 12e:	9a 85       	ldd	r25, Y+10	; 0x0a
 130:	ab 85       	ldd	r26, Y+11	; 0x0b
 132:	bc 85       	ldd	r27, Y+12	; 0x0c
 134:	27 e7       	ldi	r18, 0x77	; 119
 136:	31 e0       	ldi	r19, 0x01	; 1
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	bc 01       	movw	r22, r24
 13e:	cd 01       	movw	r24, r26
 140:	0e 94 32 04 	call	0x864	; 0x864 <__mulsi3>
 144:	dc 01       	movw	r26, r24
 146:	cb 01       	movw	r24, r22
 148:	89 5d       	subi	r24, 0xD9	; 217
 14a:	94 44       	sbci	r25, 0x44	; 68
 14c:	a0 40       	sbci	r26, 0x00	; 0
 14e:	b0 40       	sbci	r27, 0x00	; 0
 150:	28 ee       	ldi	r18, 0xE8	; 232
 152:	33 e0       	ldi	r19, 0x03	; 3
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	bc 01       	movw	r22, r24
 15a:	cd 01       	movw	r24, r26
 15c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__udivmodsi4>
 160:	da 01       	movw	r26, r20
 162:	c9 01       	movw	r24, r18
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	ab 83       	std	Y+3, r26	; 0x03
 16a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 16c:	1d 82       	std	Y+5, r1	; 0x05
 16e:	1e 82       	std	Y+6, r1	; 0x06
 170:	1f 82       	std	Y+7, r1	; 0x07
 172:	18 86       	std	Y+8, r1	; 0x08
 174:	0c c0       	rjmp	.+24     	; 0x18e <Delay_us+0x7e>
	{
		asm("nop");
 176:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	9e 81       	ldd	r25, Y+6	; 0x06
 17c:	af 81       	ldd	r26, Y+7	; 0x07
 17e:	b8 85       	ldd	r27, Y+8	; 0x08
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	8d 83       	std	Y+5, r24	; 0x05
 188:	9e 83       	std	Y+6, r25	; 0x06
 18a:	af 83       	std	Y+7, r26	; 0x07
 18c:	b8 87       	std	Y+8, r27	; 0x08
 18e:	2d 81       	ldd	r18, Y+5	; 0x05
 190:	3e 81       	ldd	r19, Y+6	; 0x06
 192:	4f 81       	ldd	r20, Y+7	; 0x07
 194:	58 85       	ldd	r21, Y+8	; 0x08
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	ab 81       	ldd	r26, Y+3	; 0x03
 19c:	bc 81       	ldd	r27, Y+4	; 0x04
 19e:	28 17       	cp	r18, r24
 1a0:	39 07       	cpc	r19, r25
 1a2:	4a 07       	cpc	r20, r26
 1a4:	5b 07       	cpc	r21, r27
 1a6:	38 f3       	brcs	.-50     	; 0x176 <Delay_us+0x66>
	{
		asm("nop");
	}
 1a8:	2c 96       	adiw	r28, 0x0c	; 12
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	08 95       	ret

000001ba <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1c2:	ea e3       	ldi	r30, 0x3A	; 58
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1ca:	e7 e3       	ldi	r30, 0x37	; 55
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1d2:	e4 e3       	ldi	r30, 0x34	; 52
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1da:	e1 e3       	ldi	r30, 0x31	; 49
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
}
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	08 95       	ret

000001e8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <DIO_voidSetPinValue+0x6>
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	89 83       	std	Y+1, r24	; 0x01
 1f4:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	88 30       	cpi	r24, 0x08	; 8
 1fa:	60 f5       	brcc	.+88     	; 0x254 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	88 23       	and	r24, r24
 200:	a1 f4       	brne	.+40     	; 0x22a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 202:	ab e3       	ldi	r26, 0x3B	; 59
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	eb e3       	ldi	r30, 0x3B	; 59
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 2e       	mov	r0, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0x38>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0x34>
 224:	84 2b       	or	r24, r20
 226:	8c 93       	st	X, r24
 228:	b3 c0       	rjmp	.+358    	; 0x390 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 22a:	ab e3       	ldi	r26, 0x3B	; 59
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	eb e3       	ldi	r30, 0x3B	; 59
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	48 2f       	mov	r20, r24
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 2e       	mov	r0, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidSetPinValue+0x60>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidSetPinValue+0x5c>
 24c:	80 95       	com	r24
 24e:	84 23       	and	r24, r20
 250:	8c 93       	st	X, r24
 252:	9e c0       	rjmp	.+316    	; 0x390 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	90 f1       	brcs	.+100    	; 0x2be <DIO_voidSetPinValue+0xd6>
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	80 31       	cpi	r24, 0x10	; 16
 25e:	78 f5       	brcc	.+94     	; 0x2be <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	88 50       	subi	r24, 0x08	; 8
 264:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	88 23       	and	r24, r24
 26a:	a1 f4       	brne	.+40     	; 0x294 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 26c:	a8 e3       	ldi	r26, 0x38	; 56
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e8 e3       	ldi	r30, 0x38	; 56
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	48 2f       	mov	r20, r24
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 2e       	mov	r0, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_voidSetPinValue+0xa2>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_voidSetPinValue+0x9e>
 28e:	84 2b       	or	r24, r20
 290:	8c 93       	st	X, r24
 292:	7e c0       	rjmp	.+252    	; 0x390 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 294:	a8 e3       	ldi	r26, 0x38	; 56
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	e8 e3       	ldi	r30, 0x38	; 56
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	48 2f       	mov	r20, r24
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	28 2f       	mov	r18, r24
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 2e       	mov	r0, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_voidSetPinValue+0xca>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_voidSetPinValue+0xc6>
 2b6:	80 95       	com	r24
 2b8:	84 23       	and	r24, r20
 2ba:	8c 93       	st	X, r24
 2bc:	69 c0       	rjmp	.+210    	; 0x390 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	80 31       	cpi	r24, 0x10	; 16
 2c2:	90 f1       	brcs	.+100    	; 0x328 <DIO_voidSetPinValue+0x140>
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	88 31       	cpi	r24, 0x18	; 24
 2c8:	78 f5       	brcc	.+94     	; 0x328 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	80 51       	subi	r24, 0x10	; 16
 2ce:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	88 23       	and	r24, r24
 2d4:	a1 f4       	brne	.+40     	; 0x2fe <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2d6:	a5 e3       	ldi	r26, 0x35	; 53
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e5 e3       	ldi	r30, 0x35	; 53
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_voidSetPinValue+0x10c>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_voidSetPinValue+0x108>
 2f8:	84 2b       	or	r24, r20
 2fa:	8c 93       	st	X, r24
 2fc:	49 c0       	rjmp	.+146    	; 0x390 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2fe:	a5 e3       	ldi	r26, 0x35	; 53
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	e5 e3       	ldi	r30, 0x35	; 53
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	48 2f       	mov	r20, r24
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_voidSetPinValue+0x134>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_voidSetPinValue+0x130>
 320:	80 95       	com	r24
 322:	84 23       	and	r24, r20
 324:	8c 93       	st	X, r24
 326:	34 c0       	rjmp	.+104    	; 0x390 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	88 31       	cpi	r24, 0x18	; 24
 32c:	88 f1       	brcs	.+98     	; 0x390 <DIO_voidSetPinValue+0x1a8>
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	80 32       	cpi	r24, 0x20	; 32
 332:	70 f5       	brcc	.+92     	; 0x390 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	88 51       	subi	r24, 0x18	; 24
 338:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	88 23       	and	r24, r24
 33e:	a1 f4       	brne	.+40     	; 0x368 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 340:	a2 e3       	ldi	r26, 0x32	; 50
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e2 e3       	ldi	r30, 0x32	; 50
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_voidSetPinValue+0x176>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_voidSetPinValue+0x172>
 362:	84 2b       	or	r24, r20
 364:	8c 93       	st	X, r24
 366:	14 c0       	rjmp	.+40     	; 0x390 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 368:	a2 e3       	ldi	r26, 0x32	; 50
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	e2 e3       	ldi	r30, 0x32	; 50
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	48 2f       	mov	r20, r24
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 2e       	mov	r0, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_voidSetPinValue+0x19e>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_voidSetPinValue+0x19a>
 38a:	80 95       	com	r24
 38c:	84 23       	and	r24, r20
 38e:	8c 93       	st	X, r24
		}			
	}
}
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	cf 91       	pop	r28
 396:	df 91       	pop	r29
 398:	08 95       	ret

0000039a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <DIO_u8GetPinValue+0x6>
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <DIO_u8GetPinValue+0x8>
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
 3a6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3a8:	8c 81       	ldd	r24, Y+4	; 0x04
 3aa:	88 30       	cpi	r24, 0x08	; 8
 3ac:	00 f5       	brcc	.+64     	; 0x3ee <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3ae:	8c 81       	ldd	r24, Y+4	; 0x04
 3b0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3b2:	e9 e3       	ldi	r30, 0x39	; 57
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_u8GetPinValue+0x32>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	2a 95       	dec	r18
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_u8GetPinValue+0x2e>
 3d0:	9a 01       	movw	r18, r20
 3d2:	28 23       	and	r18, r24
 3d4:	39 23       	and	r19, r25
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	88 2f       	mov	r24, r24
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	a9 01       	movw	r20, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_u8GetPinValue+0x4a>
 3e0:	55 95       	asr	r21
 3e2:	47 95       	ror	r20
 3e4:	8a 95       	dec	r24
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_u8GetPinValue+0x46>
 3e8:	ca 01       	movw	r24, r20
 3ea:	8a 83       	std	Y+2, r24	; 0x02
 3ec:	74 c0       	rjmp	.+232    	; 0x4d6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 3ee:	8c 81       	ldd	r24, Y+4	; 0x04
 3f0:	80 31       	cpi	r24, 0x10	; 16
 3f2:	20 f1       	brcs	.+72     	; 0x43c <DIO_u8GetPinValue+0xa2>
 3f4:	8c 81       	ldd	r24, Y+4	; 0x04
 3f6:	88 31       	cpi	r24, 0x18	; 24
 3f8:	08 f5       	brcc	.+66     	; 0x43c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 3fa:	8c 81       	ldd	r24, Y+4	; 0x04
 3fc:	88 50       	subi	r24, 0x08	; 8
 3fe:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 400:	e6 e3       	ldi	r30, 0x36	; 54
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_u8GetPinValue+0x80>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	2a 95       	dec	r18
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_u8GetPinValue+0x7c>
 41e:	9a 01       	movw	r18, r20
 420:	28 23       	and	r18, r24
 422:	39 23       	and	r19, r25
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a9 01       	movw	r20, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8GetPinValue+0x98>
 42e:	55 95       	asr	r21
 430:	47 95       	ror	r20
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8GetPinValue+0x94>
 436:	ca 01       	movw	r24, r20
 438:	8a 83       	std	Y+2, r24	; 0x02
 43a:	4d c0       	rjmp	.+154    	; 0x4d6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 43c:	8c 81       	ldd	r24, Y+4	; 0x04
 43e:	80 31       	cpi	r24, 0x10	; 16
 440:	20 f1       	brcs	.+72     	; 0x48a <DIO_u8GetPinValue+0xf0>
 442:	8c 81       	ldd	r24, Y+4	; 0x04
 444:	88 31       	cpi	r24, 0x18	; 24
 446:	08 f5       	brcc	.+66     	; 0x48a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 448:	8c 81       	ldd	r24, Y+4	; 0x04
 44a:	80 51       	subi	r24, 0x10	; 16
 44c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 44e:	e6 e3       	ldi	r30, 0x36	; 54
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_u8GetPinValue+0xce>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	2a 95       	dec	r18
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_u8GetPinValue+0xca>
 46c:	9a 01       	movw	r18, r20
 46e:	28 23       	and	r18, r24
 470:	39 23       	and	r19, r25
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	88 2f       	mov	r24, r24
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	a9 01       	movw	r20, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_u8GetPinValue+0xe6>
 47c:	55 95       	asr	r21
 47e:	47 95       	ror	r20
 480:	8a 95       	dec	r24
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_u8GetPinValue+0xe2>
 484:	ca 01       	movw	r24, r20
 486:	8a 83       	std	Y+2, r24	; 0x02
 488:	26 c0       	rjmp	.+76     	; 0x4d6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 48a:	8c 81       	ldd	r24, Y+4	; 0x04
 48c:	88 31       	cpi	r24, 0x18	; 24
 48e:	18 f1       	brcs	.+70     	; 0x4d6 <DIO_u8GetPinValue+0x13c>
 490:	8c 81       	ldd	r24, Y+4	; 0x04
 492:	80 32       	cpi	r24, 0x20	; 32
 494:	00 f5       	brcc	.+64     	; 0x4d6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 496:	8c 81       	ldd	r24, Y+4	; 0x04
 498:	88 51       	subi	r24, 0x18	; 24
 49a:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 49c:	e0 e3       	ldi	r30, 0x30	; 48
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_u8GetPinValue+0x11c>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	2a 95       	dec	r18
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_u8GetPinValue+0x118>
 4ba:	9a 01       	movw	r18, r20
 4bc:	28 23       	and	r18, r24
 4be:	39 23       	and	r19, r25
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	a9 01       	movw	r20, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_u8GetPinValue+0x134>
 4ca:	55 95       	asr	r21
 4cc:	47 95       	ror	r20
 4ce:	8a 95       	dec	r24
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_u8GetPinValue+0x130>
 4d2:	ca 01       	movw	r24, r20
 4d4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	88 23       	and	r24, r24
 4da:	19 f4       	brne	.+6      	; 0x4e2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	09 f4       	brne	.+2      	; 0x4ea <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	cf 91       	pop	r28
 4f6:	df 91       	pop	r29
 4f8:	08 95       	ret

000004fa <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
 502:	62 e3       	ldi	r22, 0x32	; 50
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
	/*Write Function Set command*/
	voidWriteCmd(0b00110000 | (LCD_u8_FONT<<2) | (LCD_u8_NUM_OF_LINES<<3));
 50e:	88 e3       	ldi	r24, 0x38	; 56
 510:	0e 94 b6 02 	call	0x56c	; 0x56c <voidWriteCmd>

	Delay_ms(1);
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>

	/*Write Display on command*/
	voidWriteCmd(0b00001000 | (LCD_u8_BLINK_ON_OFF<<0) | (LCD_u8_CURSOR_ON_OFF<<1) | (LCD_u8_DISPLAY_ON_OFF<<2));
 520:	8c e0       	ldi	r24, 0x0C	; 12
 522:	0e 94 b6 02 	call	0x56c	; 0x56c <voidWriteCmd>

	Delay_ms(1);
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>

	/*Write command clear display*/
	voidWriteCmd(0b00000001);
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 b6 02 	call	0x56c	; 0x56c <voidWriteCmd>

	Delay_ms(2);
 538:	62 e0       	ldi	r22, 0x02	; 2
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
}
 544:	cf 91       	pop	r28
 546:	df 91       	pop	r29
 548:	08 95       	ret

0000054a <voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
static void voidWriteData(u8 u8DataCpy)
{
 54a:	df 93       	push	r29
 54c:	cf 93       	push	r28
 54e:	0f 92       	push	r0
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	0e 94 c7 02 	call	0x58e	; 0x58e <voidLcdExecute>
}
 564:	0f 90       	pop	r0
 566:	cf 91       	pop	r28
 568:	df 91       	pop	r29
 56a:	08 95       	ret

0000056c <voidWriteCmd>:
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
static void voidWriteCmd(u8 u8CommandCpy)
{
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	0f 92       	push	r0
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
 578:	88 e0       	ldi	r24, 0x08	; 8
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
 580:	89 81       	ldd	r24, Y+1	; 0x01
 582:	0e 94 c7 02 	call	0x58e	; 0x58e <voidLcdExecute>
}
 586:	0f 90       	pop	r0
 588:	cf 91       	pop	r28
 58a:	df 91       	pop	r29
 58c:	08 95       	ret

0000058e <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
 58e:	df 93       	push	r29
 590:	cf 93       	push	r28
 592:	00 d0       	rcall	.+0      	; 0x594 <voidLcdExecute+0x6>
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	8a 83       	std	Y+2, r24	; 0x02
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
 59a:	89 e0       	ldi	r24, 0x09	; 9
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 5a2:	19 82       	std	Y+1, r1	; 0x01
 5a4:	34 c0       	rjmp	.+104    	; 0x60e <voidLcdExecute+0x80>
	{
		if(GET_BIT(u8ValueCpy,u8PinsCounterLocal))
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	48 2f       	mov	r20, r24
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
 5ae:	28 2f       	mov	r18, r24
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <voidLcdExecute+0x2e>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	2a 95       	dec	r18
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <voidLcdExecute+0x2a>
 5c0:	9a 01       	movw	r18, r20
 5c2:	28 23       	and	r18, r24
 5c4:	39 23       	and	r19, r25
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	88 2f       	mov	r24, r24
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	a9 01       	movw	r20, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <voidLcdExecute+0x46>
 5d0:	55 95       	asr	r21
 5d2:	47 95       	ror	r20
 5d4:	8a 95       	dec	r24
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <voidLcdExecute+0x42>
 5d8:	ca 01       	movw	r24, r20
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	59 f0       	breq	.+22     	; 0x5f4 <voidLcdExecute+0x66>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_HIGH);
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	fc 01       	movw	r30, r24
 5e6:	e0 59       	subi	r30, 0x90	; 144
 5e8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ea:	80 81       	ld	r24, Z
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
 5f2:	0a c0       	rjmp	.+20     	; 0x608 <voidLcdExecute+0x7a>
		}
			else
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	88 2f       	mov	r24, r24
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	fc 01       	movw	r30, r24
 5fc:	e0 59       	subi	r30, 0x90	; 144
 5fe:	ff 4f       	sbci	r31, 0xFF	; 255
 600:	80 81       	ld	r24, Z
 602:	61 e0       	ldi	r22, 0x01	; 1
 604:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
static void voidLcdExecute(u8 u8ValueCpy)
{
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	8f 5f       	subi	r24, 0xFF	; 255
 60c:	89 83       	std	Y+1, r24	; 0x01
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	88 30       	cpi	r24, 0x08	; 8
 612:	48 f2       	brcs	.-110    	; 0x5a6 <voidLcdExecute+0x18>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
		}
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
 614:	8a e0       	ldi	r24, 0x0A	; 10
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_ms(1);
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
 628:	8a e0       	ldi	r24, 0x0A	; 10
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
}
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	cf 91       	pop	r28
 636:	df 91       	pop	r29
 638:	08 95       	ret

0000063a <LCD_voidWriteStringXY>:


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
 63a:	df 93       	push	r29
 63c:	cf 93       	push	r28
 63e:	00 d0       	rcall	.+0      	; 0x640 <LCD_voidWriteStringXY+0x6>
 640:	00 d0       	rcall	.+0      	; 0x642 <LCD_voidWriteStringXY+0x8>
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	9a 83       	std	Y+2, r25	; 0x02
 648:	89 83       	std	Y+1, r24	; 0x01
 64a:	6b 83       	std	Y+3, r22	; 0x03
 64c:	4c 83       	std	Y+4, r20	; 0x04
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
 64e:	8c 81       	ldd	r24, Y+4	; 0x04
 650:	88 2f       	mov	r24, r24
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	00 24       	eor	r0, r0
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	07 94       	ror	r0
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
 660:	07 94       	ror	r0
 662:	98 2f       	mov	r25, r24
 664:	80 2d       	mov	r24, r0
 666:	98 2f       	mov	r25, r24
 668:	90 68       	ori	r25, 0x80	; 128
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	89 2b       	or	r24, r25
 66e:	0e 94 b6 02 	call	0x56c	; 0x56c <voidWriteCmd>
 672:	0a c0       	rjmp	.+20     	; 0x688 <LCD_voidWriteStringXY+0x4e>
	while(*u8PtrCpy)
	{
		voidWriteData(*u8PtrCpy);
 674:	e9 81       	ldd	r30, Y+1	; 0x01
 676:	fa 81       	ldd	r31, Y+2	; 0x02
 678:	80 81       	ld	r24, Z
 67a:	0e 94 a5 02 	call	0x54a	; 0x54a <voidWriteData>
		u8PtrCpy++;
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	9a 81       	ldd	r25, Y+2	; 0x02
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	9a 83       	std	Y+2, r25	; 0x02
 686:	89 83       	std	Y+1, r24	; 0x01


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
	while(*u8PtrCpy)
 688:	e9 81       	ldd	r30, Y+1	; 0x01
 68a:	fa 81       	ldd	r31, Y+2	; 0x02
 68c:	80 81       	ld	r24, Z
 68e:	88 23       	and	r24, r24
 690:	89 f7       	brne	.-30     	; 0x674 <LCD_voidWriteStringXY+0x3a>
	{
		voidWriteData(*u8PtrCpy);
		u8PtrCpy++;
	}
}
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	cf 91       	pop	r28
 69c:	df 91       	pop	r29
 69e:	08 95       	ret

000006a0 <LCD_voidWriteStringCurrentPosition>:
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
 6a0:	df 93       	push	r29
 6a2:	cf 93       	push	r28
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <LCD_voidWriteStringCurrentPosition+0x6>
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	9a 83       	std	Y+2, r25	; 0x02
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	0a c0       	rjmp	.+20     	; 0x6c4 <LCD_voidWriteStringCurrentPosition+0x24>
	while(*u8PtrCpy)
		{
			voidWriteData(*u8PtrCpy);
 6b0:	e9 81       	ldd	r30, Y+1	; 0x01
 6b2:	fa 81       	ldd	r31, Y+2	; 0x02
 6b4:	80 81       	ld	r24, Z
 6b6:	0e 94 a5 02 	call	0x54a	; 0x54a <voidWriteData>
			u8PtrCpy++;
 6ba:	89 81       	ldd	r24, Y+1	; 0x01
 6bc:	9a 81       	ldd	r25, Y+2	; 0x02
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	9a 83       	std	Y+2, r25	; 0x02
 6c2:	89 83       	std	Y+1, r24	; 0x01
		u8PtrCpy++;
	}
}
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
	while(*u8PtrCpy)
 6c4:	e9 81       	ldd	r30, Y+1	; 0x01
 6c6:	fa 81       	ldd	r31, Y+2	; 0x02
 6c8:	80 81       	ld	r24, Z
 6ca:	88 23       	and	r24, r24
 6cc:	89 f7       	brne	.-30     	; 0x6b0 <LCD_voidWriteStringCurrentPosition+0x10>
		{
			voidWriteData(*u8PtrCpy);
			u8PtrCpy++;
		}
}
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	cf 91       	pop	r28
 6d4:	df 91       	pop	r29
 6d6:	08 95       	ret

000006d8 <LCD_voidClearDisplay>:
extern void LCD_voidClearDisplay(void)
{
 6d8:	df 93       	push	r29
 6da:	cf 93       	push	r28
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
	voidWriteCmd(0b00000001);
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	0e 94 b6 02 	call	0x56c	; 0x56c <voidWriteCmd>
	Delay_ms(2);
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
}
 6f2:	cf 91       	pop	r28
 6f4:	df 91       	pop	r29
 6f6:	08 95       	ret

000006f8 <LCD_voidDrawCustomChar>:

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
 6f8:	df 93       	push	r29
 6fa:	cf 93       	push	r28
 6fc:	00 d0       	rcall	.+0      	; 0x6fe <LCD_voidDrawCustomChar+0x6>
 6fe:	00 d0       	rcall	.+0      	; 0x700 <LCD_voidDrawCustomChar+0x8>
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
 704:	9b 83       	std	Y+3, r25	; 0x03
 706:	8a 83       	std	Y+2, r24	; 0x02
 708:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
 70a:	8c 81       	ldd	r24, Y+4	; 0x04
 70c:	88 2f       	mov	r24, r24
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	80 64       	ori	r24, 0x40	; 64
 71e:	0e 94 b6 02 	call	0x56c	; 0x56c <voidWriteCmd>
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 722:	19 82       	std	Y+1, r1	; 0x01
 724:	0e c0       	rjmp	.+28     	; 0x742 <LCD_voidDrawCustomChar+0x4a>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
 726:	89 81       	ldd	r24, Y+1	; 0x01
 728:	28 2f       	mov	r18, r24
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	8a 81       	ldd	r24, Y+2	; 0x02
 72e:	9b 81       	ldd	r25, Y+3	; 0x03
 730:	fc 01       	movw	r30, r24
 732:	e2 0f       	add	r30, r18
 734:	f3 1f       	adc	r31, r19
 736:	80 81       	ld	r24, Z
 738:	0e 94 a5 02 	call	0x54a	; 0x54a <voidWriteData>
}

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 73c:	89 81       	ldd	r24, Y+1	; 0x01
 73e:	8f 5f       	subi	r24, 0xFF	; 255
 740:	89 83       	std	Y+1, r24	; 0x01
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	88 30       	cpi	r24, 0x08	; 8
 746:	78 f3       	brcs	.-34     	; 0x726 <LCD_voidDrawCustomChar+0x2e>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
	}
}
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	cf 91       	pop	r28
 752:	df 91       	pop	r29
 754:	08 95       	ret

00000756 <LCD_voidWriteCustomChar>:

extern void LCD_voidWriteCustomChar(u8 u8IndexCpy ,u8 u8XPositionCpy,u8 u8YPositionCpy)
{
 756:	df 93       	push	r29
 758:	cf 93       	push	r28
 75a:	00 d0       	rcall	.+0      	; 0x75c <LCD_voidWriteCustomChar+0x6>
 75c:	0f 92       	push	r0
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
 762:	89 83       	std	Y+1, r24	; 0x01
 764:	6a 83       	std	Y+2, r22	; 0x02
 766:	4b 83       	std	Y+3, r20	; 0x03
	voidWriteCmd((0x80 | (u8YPositionCpy<<6) | u8XPositionCpy));
 768:	8b 81       	ldd	r24, Y+3	; 0x03
 76a:	88 2f       	mov	r24, r24
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	00 24       	eor	r0, r0
 770:	96 95       	lsr	r25
 772:	87 95       	ror	r24
 774:	07 94       	ror	r0
 776:	96 95       	lsr	r25
 778:	87 95       	ror	r24
 77a:	07 94       	ror	r0
 77c:	98 2f       	mov	r25, r24
 77e:	80 2d       	mov	r24, r0
 780:	98 2f       	mov	r25, r24
 782:	90 68       	ori	r25, 0x80	; 128
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	89 2b       	or	r24, r25
 788:	0e 94 b6 02 	call	0x56c	; 0x56c <voidWriteCmd>
	voidWriteData(u8IndexCpy);
 78c:	89 81       	ldd	r24, Y+1	; 0x01
 78e:	0e 94 a5 02 	call	0x54a	; 0x54a <voidWriteData>
}
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	08 95       	ret

0000079e <main>:
#include "DELAY.h"
#include "DIO_int.h"
#include "LCD_int.h"

void main(void)
{
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 7a6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_voidInitialize>
	LCD_voidInitialize();
 7aa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_voidInitialize>
	LCD_voidClearDisplay();
 7ae:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCD_voidClearDisplay>
	DIO_voidSetPinValue(DIO_u8_PIN_4,DIO_u8_HIGH);
 7b2:	84 e0       	ldi	r24, 0x04	; 4
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_5,DIO_u8_HIGH);
 7ba:	85 e0       	ldi	r24, 0x05	; 5
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
	while(1)
	{
		if(DIO_u8GetPinValue(DIO_u8_PIN_4)==DIO_u8_LOW)
 7c2:	84 e0       	ldi	r24, 0x04	; 4
 7c4:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_u8GetPinValue>
 7c8:	81 30       	cpi	r24, 0x01	; 1
 7ca:	a9 f4       	brne	.+42     	; 0x7f6 <main+0x58>
		{
			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_HIGH);
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	61 e0       	ldi	r22, 0x01	; 1
 7e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 7e4:	83 e0       	ldi	r24, 0x03	; 3
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			LCD_voidWriteStringCurrentPosition("RIGHT");
 7ec:	80 e6       	ldi	r24, 0x60	; 96
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_voidWriteStringCurrentPosition>
 7f4:	2e c0       	rjmp	.+92     	; 0x852 <main+0xb4>
		}
		else if(DIO_u8GetPinValue(DIO_u8_PIN_5)==DIO_u8_LOW)
 7f6:	85 e0       	ldi	r24, 0x05	; 5
 7f8:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_u8GetPinValue>
 7fc:	81 30       	cpi	r24, 0x01	; 1
 7fe:	a9 f4       	brne	.+42     	; 0x82a <main+0x8c>
		{
			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	61 e0       	ldi	r22, 0x01	; 1
 804:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	61 e0       	ldi	r22, 0x01	; 1
 80c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_HIGH);
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_HIGH);
 818:	83 e0       	ldi	r24, 0x03	; 3
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			LCD_voidWriteStringCurrentPosition("LEFT");
 820:	86 e6       	ldi	r24, 0x66	; 102
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_voidWriteStringCurrentPosition>
 828:	14 c0       	rjmp	.+40     	; 0x852 <main+0xb4>
		}
		else{
			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	61 e0       	ldi	r22, 0x01	; 1
 836:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 83a:	82 e0       	ldi	r24, 0x02	; 2
 83c:	61 e0       	ldi	r22, 0x01	; 1
 83e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 842:	83 e0       	ldi	r24, 0x03	; 3
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_voidSetPinValue>
			LCD_voidWriteStringCurrentPosition("STOP");
 84a:	8b e6       	ldi	r24, 0x6B	; 107
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_voidWriteStringCurrentPosition>
		}
		Delay_ms(100);
 852:	64 e6       	ldi	r22, 0x64	; 100
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
		LCD_voidClearDisplay();
 85e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LCD_voidClearDisplay>
 862:	af cf       	rjmp	.-162    	; 0x7c2 <main+0x24>

00000864 <__mulsi3>:
 864:	62 9f       	mul	r22, r18
 866:	d0 01       	movw	r26, r0
 868:	73 9f       	mul	r23, r19
 86a:	f0 01       	movw	r30, r0
 86c:	82 9f       	mul	r24, r18
 86e:	e0 0d       	add	r30, r0
 870:	f1 1d       	adc	r31, r1
 872:	64 9f       	mul	r22, r20
 874:	e0 0d       	add	r30, r0
 876:	f1 1d       	adc	r31, r1
 878:	92 9f       	mul	r25, r18
 87a:	f0 0d       	add	r31, r0
 87c:	83 9f       	mul	r24, r19
 87e:	f0 0d       	add	r31, r0
 880:	74 9f       	mul	r23, r20
 882:	f0 0d       	add	r31, r0
 884:	65 9f       	mul	r22, r21
 886:	f0 0d       	add	r31, r0
 888:	99 27       	eor	r25, r25
 88a:	72 9f       	mul	r23, r18
 88c:	b0 0d       	add	r27, r0
 88e:	e1 1d       	adc	r30, r1
 890:	f9 1f       	adc	r31, r25
 892:	63 9f       	mul	r22, r19
 894:	b0 0d       	add	r27, r0
 896:	e1 1d       	adc	r30, r1
 898:	f9 1f       	adc	r31, r25
 89a:	bd 01       	movw	r22, r26
 89c:	cf 01       	movw	r24, r30
 89e:	11 24       	eor	r1, r1
 8a0:	08 95       	ret

000008a2 <__udivmodsi4>:
 8a2:	a1 e2       	ldi	r26, 0x21	; 33
 8a4:	1a 2e       	mov	r1, r26
 8a6:	aa 1b       	sub	r26, r26
 8a8:	bb 1b       	sub	r27, r27
 8aa:	fd 01       	movw	r30, r26
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__udivmodsi4_ep>

000008ae <__udivmodsi4_loop>:
 8ae:	aa 1f       	adc	r26, r26
 8b0:	bb 1f       	adc	r27, r27
 8b2:	ee 1f       	adc	r30, r30
 8b4:	ff 1f       	adc	r31, r31
 8b6:	a2 17       	cp	r26, r18
 8b8:	b3 07       	cpc	r27, r19
 8ba:	e4 07       	cpc	r30, r20
 8bc:	f5 07       	cpc	r31, r21
 8be:	20 f0       	brcs	.+8      	; 0x8c8 <__udivmodsi4_ep>
 8c0:	a2 1b       	sub	r26, r18
 8c2:	b3 0b       	sbc	r27, r19
 8c4:	e4 0b       	sbc	r30, r20
 8c6:	f5 0b       	sbc	r31, r21

000008c8 <__udivmodsi4_ep>:
 8c8:	66 1f       	adc	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	1a 94       	dec	r1
 8d2:	69 f7       	brne	.-38     	; 0x8ae <__udivmodsi4_loop>
 8d4:	60 95       	com	r22
 8d6:	70 95       	com	r23
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	9b 01       	movw	r18, r22
 8de:	ac 01       	movw	r20, r24
 8e0:	bd 01       	movw	r22, r26
 8e2:	cf 01       	movw	r24, r30
 8e4:	08 95       	ret

000008e6 <_exit>:
 8e6:	f8 94       	cli

000008e8 <__stop_program>:
 8e8:	ff cf       	rjmp	.-2      	; 0x8e8 <__stop_program>
