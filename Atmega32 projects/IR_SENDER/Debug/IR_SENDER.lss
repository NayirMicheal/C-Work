
IR_SENDER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000718  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000718  000007ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  000007ae  2**0
                  ALLOC
  3 .stab         00000d08  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006c7  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_10>
  2c:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 03 	call	0x6d2	; 0x6d2 <main>
  8a:	0c 94 8a 03 	jmp	0x714	; 0x714 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
  aa:	e4 e3       	ldi	r30, 0x34	; 52
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	8e ef       	ldi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
}
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DIO_voidSetPinValue+0x6>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	60 f5       	brcc	.+88     	; 0x12c <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	88 23       	and	r24, r24
  d8:	a1 f4       	brne	.+40     	; 0x102 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
  da:	ab e3       	ldi	r26, 0x3B	; 59
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	eb e3       	ldi	r30, 0x3B	; 59
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_voidSetPinValue+0x38>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_voidSetPinValue+0x34>
  fc:	84 2b       	or	r24, r20
  fe:	8c 93       	st	X, r24
 100:	b3 c0       	rjmp	.+358    	; 0x268 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 102:	ab e3       	ldi	r26, 0x3B	; 59
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	eb e3       	ldi	r30, 0x3B	; 59
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_voidSetPinValue+0x60>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_voidSetPinValue+0x5c>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8c 93       	st	X, r24
 12a:	9e c0       	rjmp	.+316    	; 0x268 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	90 f1       	brcs	.+100    	; 0x196 <DIO_voidSetPinValue+0xd6>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	80 31       	cpi	r24, 0x10	; 16
 136:	78 f5       	brcc	.+94     	; 0x196 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	88 50       	subi	r24, 0x08	; 8
 13c:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	88 23       	and	r24, r24
 142:	a1 f4       	brne	.+40     	; 0x16c <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 144:	a8 e3       	ldi	r26, 0x38	; 56
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e8 e3       	ldi	r30, 0x38	; 56
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	48 2f       	mov	r20, r24
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinValue+0xa2>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinValue+0x9e>
 166:	84 2b       	or	r24, r20
 168:	8c 93       	st	X, r24
 16a:	7e c0       	rjmp	.+252    	; 0x268 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 16c:	a8 e3       	ldi	r26, 0x38	; 56
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	e8 e3       	ldi	r30, 0x38	; 56
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	48 2f       	mov	r20, r24
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 2e       	mov	r0, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_voidSetPinValue+0xca>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_voidSetPinValue+0xc6>
 18e:	80 95       	com	r24
 190:	84 23       	and	r24, r20
 192:	8c 93       	st	X, r24
 194:	69 c0       	rjmp	.+210    	; 0x268 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	80 31       	cpi	r24, 0x10	; 16
 19a:	90 f1       	brcs	.+100    	; 0x200 <DIO_voidSetPinValue+0x140>
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	88 31       	cpi	r24, 0x18	; 24
 1a0:	78 f5       	brcc	.+94     	; 0x200 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	80 51       	subi	r24, 0x10	; 16
 1a6:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	88 23       	and	r24, r24
 1ac:	a1 f4       	brne	.+40     	; 0x1d6 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 1ae:	a5 e3       	ldi	r26, 0x35	; 53
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e5 e3       	ldi	r30, 0x35	; 53
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 2e       	mov	r0, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_voidSetPinValue+0x10c>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_voidSetPinValue+0x108>
 1d0:	84 2b       	or	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	49 c0       	rjmp	.+146    	; 0x268 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 1d6:	a5 e3       	ldi	r26, 0x35	; 53
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e5 e3       	ldi	r30, 0x35	; 53
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_voidSetPinValue+0x134>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_voidSetPinValue+0x130>
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	34 c0       	rjmp	.+104    	; 0x268 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	88 31       	cpi	r24, 0x18	; 24
 204:	88 f1       	brcs	.+98     	; 0x268 <DIO_voidSetPinValue+0x1a8>
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	80 32       	cpi	r24, 0x20	; 32
 20a:	70 f5       	brcc	.+92     	; 0x268 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	88 51       	subi	r24, 0x18	; 24
 210:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	88 23       	and	r24, r24
 216:	a1 f4       	brne	.+40     	; 0x240 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 218:	a2 e3       	ldi	r26, 0x32	; 50
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e2 e3       	ldi	r30, 0x32	; 50
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_voidSetPinValue+0x176>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_voidSetPinValue+0x172>
 23a:	84 2b       	or	r24, r20
 23c:	8c 93       	st	X, r24
 23e:	14 c0       	rjmp	.+40     	; 0x268 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 240:	a2 e3       	ldi	r26, 0x32	; 50
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e2 e3       	ldi	r30, 0x32	; 50
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	48 2f       	mov	r20, r24
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_voidSetPinValue+0x19e>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_voidSetPinValue+0x19a>
 262:	80 95       	com	r24
 264:	84 23       	and	r24, r20
 266:	8c 93       	st	X, r24
		}			
	}
}
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	cf 91       	pop	r28
 26e:	df 91       	pop	r29
 270:	08 95       	ret

00000272 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 272:	df 93       	push	r29
 274:	cf 93       	push	r28
 276:	00 d0       	rcall	.+0      	; 0x278 <DIO_u8GetPinValue+0x6>
 278:	00 d0       	rcall	.+0      	; 0x27a <DIO_u8GetPinValue+0x8>
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	88 30       	cpi	r24, 0x08	; 8
 284:	00 f5       	brcc	.+64     	; 0x2c6 <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 286:	8c 81       	ldd	r24, Y+4	; 0x04
 288:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 28a:	e9 e3       	ldi	r30, 0x39	; 57
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	48 2f       	mov	r20, r24
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	28 2f       	mov	r18, r24
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_u8GetPinValue+0x32>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	2a 95       	dec	r18
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_u8GetPinValue+0x2e>
 2a8:	9a 01       	movw	r18, r20
 2aa:	28 23       	and	r18, r24
 2ac:	39 23       	and	r19, r25
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	a9 01       	movw	r20, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_u8GetPinValue+0x4a>
 2b8:	55 95       	asr	r21
 2ba:	47 95       	ror	r20
 2bc:	8a 95       	dec	r24
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_u8GetPinValue+0x46>
 2c0:	ca 01       	movw	r24, r20
 2c2:	8a 83       	std	Y+2, r24	; 0x02
 2c4:	74 c0       	rjmp	.+232    	; 0x3ae <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 2c6:	8c 81       	ldd	r24, Y+4	; 0x04
 2c8:	88 30       	cpi	r24, 0x08	; 8
 2ca:	20 f1       	brcs	.+72     	; 0x314 <DIO_u8GetPinValue+0xa2>
 2cc:	8c 81       	ldd	r24, Y+4	; 0x04
 2ce:	80 31       	cpi	r24, 0x10	; 16
 2d0:	08 f5       	brcc	.+66     	; 0x314 <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	88 50       	subi	r24, 0x08	; 8
 2d6:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 2d8:	e6 e3       	ldi	r30, 0x36	; 54
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8GetPinValue+0x80>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	2a 95       	dec	r18
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8GetPinValue+0x7c>
 2f6:	9a 01       	movw	r18, r20
 2f8:	28 23       	and	r18, r24
 2fa:	39 23       	and	r19, r25
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	88 2f       	mov	r24, r24
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	a9 01       	movw	r20, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_u8GetPinValue+0x98>
 306:	55 95       	asr	r21
 308:	47 95       	ror	r20
 30a:	8a 95       	dec	r24
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_u8GetPinValue+0x94>
 30e:	ca 01       	movw	r24, r20
 310:	8a 83       	std	Y+2, r24	; 0x02
 312:	4d c0       	rjmp	.+154    	; 0x3ae <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	80 31       	cpi	r24, 0x10	; 16
 318:	20 f1       	brcs	.+72     	; 0x362 <DIO_u8GetPinValue+0xf0>
 31a:	8c 81       	ldd	r24, Y+4	; 0x04
 31c:	88 31       	cpi	r24, 0x18	; 24
 31e:	08 f5       	brcc	.+66     	; 0x362 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 320:	8c 81       	ldd	r24, Y+4	; 0x04
 322:	80 51       	subi	r24, 0x10	; 16
 324:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 326:	e6 e3       	ldi	r30, 0x36	; 54
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_u8GetPinValue+0xce>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	2a 95       	dec	r18
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_u8GetPinValue+0xca>
 344:	9a 01       	movw	r18, r20
 346:	28 23       	and	r18, r24
 348:	39 23       	and	r19, r25
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	88 2f       	mov	r24, r24
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	a9 01       	movw	r20, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8GetPinValue+0xe6>
 354:	55 95       	asr	r21
 356:	47 95       	ror	r20
 358:	8a 95       	dec	r24
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8GetPinValue+0xe2>
 35c:	ca 01       	movw	r24, r20
 35e:	8a 83       	std	Y+2, r24	; 0x02
 360:	26 c0       	rjmp	.+76     	; 0x3ae <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 362:	8c 81       	ldd	r24, Y+4	; 0x04
 364:	88 31       	cpi	r24, 0x18	; 24
 366:	18 f1       	brcs	.+70     	; 0x3ae <DIO_u8GetPinValue+0x13c>
 368:	8c 81       	ldd	r24, Y+4	; 0x04
 36a:	80 32       	cpi	r24, 0x20	; 32
 36c:	00 f5       	brcc	.+64     	; 0x3ae <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
 370:	88 51       	subi	r24, 0x18	; 24
 372:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 374:	e0 e3       	ldi	r30, 0x30	; 48
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	48 2f       	mov	r20, r24
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_u8GetPinValue+0x11c>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	2a 95       	dec	r18
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_u8GetPinValue+0x118>
 392:	9a 01       	movw	r18, r20
 394:	28 23       	and	r18, r24
 396:	39 23       	and	r19, r25
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	88 2f       	mov	r24, r24
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	a9 01       	movw	r20, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_u8GetPinValue+0x134>
 3a2:	55 95       	asr	r21
 3a4:	47 95       	ror	r20
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_u8GetPinValue+0x130>
 3aa:	ca 01       	movw	r24, r20
 3ac:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	88 23       	and	r24, r24
 3b2:	19 f4       	brne	.+6      	; 0x3ba <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	09 f4       	brne	.+2      	; 0x3c2 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 3c0:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	cf 91       	pop	r28
 3ce:	df 91       	pop	r29
 3d0:	08 95       	ret

000003d2 <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 3d2:	df 93       	push	r29
 3d4:	cf 93       	push	r28
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 3da:	af e5       	ldi	r26, 0x5F	; 95
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	ef e5       	ldi	r30, 0x5F	; 95
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	8c 93       	st	X, r24
}
 3e8:	cf 91       	pop	r28
 3ea:	df 91       	pop	r29
 3ec:	08 95       	ret

000003ee <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 3ee:	df 93       	push	r29
 3f0:	cf 93       	push	r28
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 3f6:	af e5       	ldi	r26, 0x5F	; 95
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	ef e5       	ldi	r30, 0x5F	; 95
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	8f 77       	andi	r24, 0x7F	; 127
 402:	8c 93       	st	X, r24
}
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	08 95       	ret

0000040a <SWD_u8GetSwitchState>:
#include"SWD_priv.h"
#include"SWD_int.h"


u8 SWD_u8GetSwitchState(u8 u8SwIdxCpy)
{
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	00 d0       	rcall	.+0      	; 0x410 <SWD_u8GetSwitchState+0x6>
 410:	0f 92       	push	r0
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	8b 83       	std	Y+3, r24	; 0x03
	u8 DioStateLoc;
	u8 SwitchStateLoc;
	if(u8SwIdxCpy < SWD_u8_SW_NB)
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	88 23       	and	r24, r24
 41c:	21 f5       	brne	.+72     	; 0x466 <SWD_u8GetSwitchState+0x5c>
	{
		DioStateLoc=DIO_u8GetPinValue(SWD_u8SwToDioLink[u8SwIdxCpy]);
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	88 2f       	mov	r24, r24
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	fc 01       	movw	r30, r24
 426:	e0 5a       	subi	r30, 0xA0	; 160
 428:	ff 4f       	sbci	r31, 0xFF	; 255
 42a:	80 81       	ld	r24, Z
 42c:	0e 94 39 01 	call	0x272	; 0x272 <DIO_u8GetPinValue>
 430:	8a 83       	std	Y+2, r24	; 0x02
		/*if switch state equals its open state return released*/
		if(DioStateLoc==SWD_u8SwOpenState[u8SwIdxCpy])
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	ee 59       	subi	r30, 0x9E	; 158
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	90 81       	ld	r25, Z
 440:	8a 81       	ldd	r24, Y+2	; 0x02
 442:	98 17       	cp	r25, r24
 444:	19 f4       	brne	.+6      	; 0x44c <SWD_u8GetSwitchState+0x42>
		{
			SwitchStateLoc= SWD_u8RELEASED;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	0e c0       	rjmp	.+28     	; 0x468 <SWD_u8GetSwitchState+0x5e>
		}
		/*if switch state not equal open state return pushed */
		else if(DioStateLoc != SWD_u8SwOpenState[u8SwIdxCpy])
 44c:	8b 81       	ldd	r24, Y+3	; 0x03
 44e:	88 2f       	mov	r24, r24
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	ee 59       	subi	r30, 0x9E	; 158
 456:	ff 4f       	sbci	r31, 0xFF	; 255
 458:	90 81       	ld	r25, Z
 45a:	8a 81       	ldd	r24, Y+2	; 0x02
 45c:	98 17       	cp	r25, r24
 45e:	21 f0       	breq	.+8      	; 0x468 <SWD_u8GetSwitchState+0x5e>
		{
			SwitchStateLoc= SWD_u8PUSHED;
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	89 83       	std	Y+1, r24	; 0x01
 464:	01 c0       	rjmp	.+2      	; 0x468 <SWD_u8GetSwitchState+0x5e>
		}
	}
	/* Error: returned if the number of switch isn't in the range */
	else{
		SwitchStateLoc= SWD_u8ERROR;
 466:	19 82       	std	Y+1, r1	; 0x01
		}
	return SwitchStateLoc;
 468:	89 81       	ldd	r24, Y+1	; 0x01
}
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	cf 91       	pop	r28
 472:	df 91       	pop	r29
 474:	08 95       	ret

00000476 <TIM_voidInitialize>:
static void (* TIM_CallBack) (void);
static void (* TIM_CallBack_CTC) (void);

/*Description: This function shall init the Timer prephiral*/
void TIM_voidInitialize(void)
{
 476:	df 93       	push	r29
 478:	cf 93       	push	r28
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
	/*clear flag*/
	SET_BIT(TIFR,0);
 47e:	a8 e5       	ldi	r26, 0x58	; 88
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	e8 e5       	ldi	r30, 0x58	; 88
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	8c 93       	st	X, r24
	SET_BIT(TIFR,1);
 48c:	a8 e5       	ldi	r26, 0x58	; 88
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	e8 e5       	ldi	r30, 0x58	; 88
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	82 60       	ori	r24, 0x02	; 2
 498:	8c 93       	st	X, r24
	/*disable interrupt for counting and ctc*/
	CLR_BIT(TIMSK,0);
 49a:	a9 e5       	ldi	r26, 0x59	; 89
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e9 e5       	ldi	r30, 0x59	; 89
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	8e 7f       	andi	r24, 0xFE	; 254
 4a6:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
 4a8:	a9 e5       	ldi	r26, 0x59	; 89
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	e9 e5       	ldi	r30, 0x59	; 89
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	8d 7f       	andi	r24, 0xFD	; 253
 4b4:	8c 93       	st	X, r24
#if TIM_u8_MODE == TIM_u8_NORMAL_MODE
	/*initialize timer register*/
	TCNT0=TIM_u8_INIT_VALUE;
 4b6:	e2 e5       	ldi	r30, 0x52	; 82
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	8a e9       	ldi	r24, 0x9A	; 154
 4bc:	80 83       	st	Z, r24
	CLR_BIT(TCCR0,3);
 4be:	a3 e5       	ldi	r26, 0x53	; 83
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e3 e5       	ldi	r30, 0x53	; 83
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	87 7f       	andi	r24, 0xF7	; 247
 4ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
 4cc:	a3 e5       	ldi	r26, 0x53	; 83
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	e3 e5       	ldi	r30, 0x53	; 83
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	8f 7b       	andi	r24, 0xBF	; 191
 4d8:	8c 93       	st	X, r24
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_64
	TCCR0 |= TIM_u8_DIV_BY_64_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_256
	TCCR0 |= TIM_u8_DIV_BY_256_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_1024
	TCCR0 |= TIM_u8_DIV_BY_1024_MASK;
 4da:	a3 e5       	ldi	r26, 0x53	; 83
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	e3 e5       	ldi	r30, 0x53	; 83
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	85 60       	ori	r24, 0x05	; 5
 4e6:	8c 93       	st	X, r24
#endif
}
 4e8:	cf 91       	pop	r28
 4ea:	df 91       	pop	r29
 4ec:	08 95       	ret

000004ee <TIM_voidEnableInt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInt(void)
{
 4ee:	df 93       	push	r29
 4f0:	cf 93       	push	r28
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
 4f6:	a9 e5       	ldi	r26, 0x59	; 89
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e9 e5       	ldi	r30, 0x59	; 89
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	81 60       	ori	r24, 0x01	; 1
 502:	8c 93       	st	X, r24
}
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <TIM_voidDisableInt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInt(void)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
 512:	a9 e5       	ldi	r26, 0x59	; 89
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	e9 e5       	ldi	r30, 0x59	; 89
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	8e 7f       	andi	r24, 0xFE	; 254
 51e:	8c 93       	st	X, r24
}
 520:	cf 91       	pop	r28
 522:	df 91       	pop	r29
 524:	08 95       	ret

00000526 <TIM_voidEnableIntCTC>:

/*Description: enable Timer interrupt CTC*/
void TIM_voidEnableIntCTC(void)
{
 526:	df 93       	push	r29
 528:	cf 93       	push	r28
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
 52e:	a9 e5       	ldi	r26, 0x59	; 89
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	e9 e5       	ldi	r30, 0x59	; 89
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	8c 93       	st	X, r24
}
 53c:	cf 91       	pop	r28
 53e:	df 91       	pop	r29
 540:	08 95       	ret

00000542 <TIM_voidDisableIntCTC>:

/*Description: disable Timer interrupt CTC*/
void TIM_voidDisableIntCTC(void)
{
 542:	df 93       	push	r29
 544:	cf 93       	push	r28
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
 54a:	a9 e5       	ldi	r26, 0x59	; 89
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	e9 e5       	ldi	r30, 0x59	; 89
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	8d 7f       	andi	r24, 0xFD	; 253
 556:	8c 93       	st	X, r24
}
 558:	cf 91       	pop	r28
 55a:	df 91       	pop	r29
 55c:	08 95       	ret

0000055e <TIM_voidSetCallBack>:


/*Description: set Timer callback function*/
void TIM_voidSetCallBack(void (* ptrCpy) (void))
{
 55e:	df 93       	push	r29
 560:	cf 93       	push	r28
 562:	00 d0       	rcall	.+0      	; 0x564 <TIM_voidSetCallBack+0x6>
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	9a 83       	std	Y+2, r25	; 0x02
 56a:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack=ptrCpy;
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	9a 81       	ldd	r25, Y+2	; 0x02
 570:	90 93 64 00 	sts	0x0064, r25
 574:	80 93 63 00 	sts	0x0063, r24
}
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	cf 91       	pop	r28
 57e:	df 91       	pop	r29
 580:	08 95       	ret

00000582 <TIM_voidSetCallBackCTC>:

/*Description: set CTC Timer callback function*/
void TIM_voidSetCallBackCTC(void (* ptrCpy) (void))
{
 582:	df 93       	push	r29
 584:	cf 93       	push	r28
 586:	00 d0       	rcall	.+0      	; 0x588 <TIM_voidSetCallBackCTC+0x6>
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	9a 83       	std	Y+2, r25	; 0x02
 58e:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack_CTC=ptrCpy;
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	9a 81       	ldd	r25, Y+2	; 0x02
 594:	90 93 66 00 	sts	0x0066, r25
 598:	80 93 65 00 	sts	0x0065, r24
}
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0
 5a0:	cf 91       	pop	r28
 5a2:	df 91       	pop	r29
 5a4:	08 95       	ret

000005a6 <TIM_voidInitCountingRegister>:

/*Description: init timer register*/
void TIM_voidInitCountingRegister(u8 u8ValueCpy)
{
 5a6:	df 93       	push	r29
 5a8:	cf 93       	push	r28
 5aa:	0f 92       	push	r0
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
 5b2:	e2 e5       	ldi	r30, 0x52	; 82
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	80 83       	st	Z, r24
}
 5ba:	0f 90       	pop	r0
 5bc:	cf 91       	pop	r28
 5be:	df 91       	pop	r29
 5c0:	08 95       	ret

000005c2 <TIM_voidInitCTCRegister>:

/*Description: init OCR0 timer register*/
void TIM_voidInitCTCRegister(u8 u8ValueCpy)
{
 5c2:	df 93       	push	r29
 5c4:	cf 93       	push	r28
 5c6:	0f 92       	push	r0
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8ValueCpy;
 5ce:	ec e5       	ldi	r30, 0x5C	; 92
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	80 83       	st	Z, r24
}
 5d6:	0f 90       	pop	r0
 5d8:	cf 91       	pop	r28
 5da:	df 91       	pop	r29
 5dc:	08 95       	ret

000005de <__vector_11>:

void __vector_11 (void)__attribute__((signal,used));
void __vector_11 (void)
{
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	2f 93       	push	r18
 5ea:	3f 93       	push	r19
 5ec:	4f 93       	push	r20
 5ee:	5f 93       	push	r21
 5f0:	6f 93       	push	r22
 5f2:	7f 93       	push	r23
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
 600:	df 93       	push	r29
 602:	cf 93       	push	r28
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack();
 608:	e0 91 63 00 	lds	r30, 0x0063
 60c:	f0 91 64 00 	lds	r31, 0x0064
 610:	09 95       	icall
}
 612:	cf 91       	pop	r28
 614:	df 91       	pop	r29
 616:	ff 91       	pop	r31
 618:	ef 91       	pop	r30
 61a:	bf 91       	pop	r27
 61c:	af 91       	pop	r26
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	7f 91       	pop	r23
 624:	6f 91       	pop	r22
 626:	5f 91       	pop	r21
 628:	4f 91       	pop	r20
 62a:	3f 91       	pop	r19
 62c:	2f 91       	pop	r18
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63
 632:	0f 90       	pop	r0
 634:	1f 90       	pop	r1
 636:	18 95       	reti

00000638 <__vector_10>:


void __vector_10 (void)__attribute__((signal,used));
void __vector_10 (void)
{
 638:	1f 92       	push	r1
 63a:	0f 92       	push	r0
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	0f 92       	push	r0
 640:	11 24       	eor	r1, r1
 642:	2f 93       	push	r18
 644:	3f 93       	push	r19
 646:	4f 93       	push	r20
 648:	5f 93       	push	r21
 64a:	6f 93       	push	r22
 64c:	7f 93       	push	r23
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	af 93       	push	r26
 654:	bf 93       	push	r27
 656:	ef 93       	push	r30
 658:	ff 93       	push	r31
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack_CTC();
 662:	e0 91 65 00 	lds	r30, 0x0065
 666:	f0 91 66 00 	lds	r31, 0x0066
 66a:	09 95       	icall
}
 66c:	cf 91       	pop	r28
 66e:	df 91       	pop	r29
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <callback>:
#include "DIO_int.h"
#include "DIO_register.h"
#include "TIM_int.h"
#include "SWD_int.h"
void callback(void)
{
 692:	df 93       	push	r29
 694:	cf 93       	push	r28
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
	static u8 flag=0;
	if(flag==0)
 69a:	80 91 67 00 	lds	r24, 0x0067
 69e:	88 23       	and	r24, r24
 6a0:	41 f4       	brne	.+16     	; 0x6b2 <callback+0x20>
	{
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_voidSetPinValue>
		flag=1;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	80 93 67 00 	sts	0x0067, r24
 6b0:	0a c0       	rjmp	.+20     	; 0x6c6 <callback+0x34>
	}
	else if  (flag==1)
 6b2:	80 91 67 00 	lds	r24, 0x0067
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	31 f4       	brne	.+12     	; 0x6c6 <callback+0x34>
	{
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_voidSetPinValue>
		flag=0;
 6c2:	10 92 67 00 	sts	0x0067, r1
	}
	TIM_voidInitCountingRegister(154);
 6c6:	8a e9       	ldi	r24, 0x9A	; 154
 6c8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIM_voidInitCountingRegister>
}
 6cc:	cf 91       	pop	r28
 6ce:	df 91       	pop	r29
 6d0:	08 95       	ret

000006d2 <main>:
void main(void)
{
 6d2:	df 93       	push	r29
 6d4:	cf 93       	push	r28
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 6da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_24,DIO_u8_HIGH);
 6de:	88 e1       	ldi	r24, 0x18	; 24
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_voidSetPinValue>
	TIM_voidInitialize();
 6e6:	0e 94 3b 02 	call	0x476	; 0x476 <TIM_voidInitialize>
	//TIM_voidEnableInt();
	TIM_voidSetCallBack(callback);
 6ea:	89 e4       	ldi	r24, 0x49	; 73
 6ec:	93 e0       	ldi	r25, 0x03	; 3
 6ee:	0e 94 af 02 	call	0x55e	; 0x55e <TIM_voidSetCallBack>
	GIE_EnableGlobalInterrupt();
 6f2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <GIE_EnableGlobalInterrupt>
	while(1)
	{
		if(SWD_u8GetSwitchState(SWD_u8_SW1)==SWD_u8PUSHED)
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	0e 94 05 02 	call	0x40a	; 0x40a <SWD_u8GetSwitchState>
 6fc:	82 30       	cpi	r24, 0x02	; 2
 6fe:	19 f4       	brne	.+6      	; 0x706 <main+0x34>
		{
			TIM_voidEnableInt();
 700:	0e 94 77 02 	call	0x4ee	; 0x4ee <TIM_voidEnableInt>
 704:	f8 cf       	rjmp	.-16     	; 0x6f6 <main+0x24>
		}
		else
		{
			TIM_voidDisableInt();
 706:	0e 94 85 02 	call	0x50a	; 0x50a <TIM_voidDisableInt>
			DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_voidSetPinValue>
 712:	f1 cf       	rjmp	.-30     	; 0x6f6 <main+0x24>

00000714 <_exit>:
 714:	f8 94       	cli

00000716 <__stop_program>:
 716:	ff cf       	rjmp	.-2      	; 0x716 <__stop_program>
