
sevenSegDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000051a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000768  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003d6  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 02 	call	0x480	; 0x480 <main>
  64:	0c 94 8b 02 	jmp	0x516	; 0x516 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2c 97       	sbiw	r28, 0x0c	; 12
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	69 87       	std	Y+9, r22	; 0x09
  82:	7a 87       	std	Y+10, r23	; 0x0a
  84:	8b 87       	std	Y+11, r24	; 0x0b
  86:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  88:	89 85       	ldd	r24, Y+9	; 0x09
  8a:	9a 85       	ldd	r25, Y+10	; 0x0a
  8c:	ab 85       	ldd	r26, Y+11	; 0x0b
  8e:	bc 85       	ldd	r27, Y+12	; 0x0c
  90:	22 e7       	ldi	r18, 0x72	; 114
  92:	31 e0       	ldi	r19, 0x01	; 1
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	bc 01       	movw	r22, r24
  9a:	cd 01       	movw	r24, r26
  9c:	0e 94 4a 02 	call	0x494	; 0x494 <__mulsi3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	89 83       	std	Y+1, r24	; 0x01
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	ab 83       	std	Y+3, r26	; 0x03
  aa:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  ac:	1d 82       	std	Y+5, r1	; 0x05
  ae:	1e 82       	std	Y+6, r1	; 0x06
  b0:	1f 82       	std	Y+7, r1	; 0x07
  b2:	18 86       	std	Y+8, r1	; 0x08
  b4:	0c c0       	rjmp	.+24     	; 0xce <Delay_ms+0x62>
	{
		asm("nop");
  b6:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  b8:	8d 81       	ldd	r24, Y+5	; 0x05
  ba:	9e 81       	ldd	r25, Y+6	; 0x06
  bc:	af 81       	ldd	r26, Y+7	; 0x07
  be:	b8 85       	ldd	r27, Y+8	; 0x08
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	8d 83       	std	Y+5, r24	; 0x05
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	af 83       	std	Y+7, r26	; 0x07
  cc:	b8 87       	std	Y+8, r27	; 0x08
  ce:	2d 81       	ldd	r18, Y+5	; 0x05
  d0:	3e 81       	ldd	r19, Y+6	; 0x06
  d2:	4f 81       	ldd	r20, Y+7	; 0x07
  d4:	58 85       	ldd	r21, Y+8	; 0x08
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	ab 81       	ldd	r26, Y+3	; 0x03
  dc:	bc 81       	ldd	r27, Y+4	; 0x04
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	4a 07       	cpc	r20, r26
  e4:	5b 07       	cpc	r21, r27
  e6:	38 f3       	brcs	.-50     	; 0xb6 <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  e8:	2c 96       	adiw	r28, 0x0c	; 12
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <Delay_us>:
void Delay_us(u32 DelayValue)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2c 97       	sbiw	r28, 0x0c	; 12
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	69 87       	std	Y+9, r22	; 0x09
 110:	7a 87       	std	Y+10, r23	; 0x0a
 112:	8b 87       	std	Y+11, r24	; 0x0b
 114:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	ab 85       	ldd	r26, Y+11	; 0x0b
 11c:	bc 85       	ldd	r27, Y+12	; 0x0c
 11e:	27 e7       	ldi	r18, 0x77	; 119
 120:	31 e0       	ldi	r19, 0x01	; 1
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	bc 01       	movw	r22, r24
 128:	cd 01       	movw	r24, r26
 12a:	0e 94 4a 02 	call	0x494	; 0x494 <__mulsi3>
 12e:	dc 01       	movw	r26, r24
 130:	cb 01       	movw	r24, r22
 132:	89 5d       	subi	r24, 0xD9	; 217
 134:	94 44       	sbci	r25, 0x44	; 68
 136:	a0 40       	sbci	r26, 0x00	; 0
 138:	b0 40       	sbci	r27, 0x00	; 0
 13a:	28 ee       	ldi	r18, 0xE8	; 232
 13c:	33 e0       	ldi	r19, 0x03	; 3
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__udivmodsi4>
 14a:	da 01       	movw	r26, r20
 14c:	c9 01       	movw	r24, r18
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	ab 83       	std	Y+3, r26	; 0x03
 154:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 156:	1d 82       	std	Y+5, r1	; 0x05
 158:	1e 82       	std	Y+6, r1	; 0x06
 15a:	1f 82       	std	Y+7, r1	; 0x07
 15c:	18 86       	std	Y+8, r1	; 0x08
 15e:	0c c0       	rjmp	.+24     	; 0x178 <Delay_us+0x7e>
	{
		asm("nop");
 160:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 162:	8d 81       	ldd	r24, Y+5	; 0x05
 164:	9e 81       	ldd	r25, Y+6	; 0x06
 166:	af 81       	ldd	r26, Y+7	; 0x07
 168:	b8 85       	ldd	r27, Y+8	; 0x08
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	a1 1d       	adc	r26, r1
 16e:	b1 1d       	adc	r27, r1
 170:	8d 83       	std	Y+5, r24	; 0x05
 172:	9e 83       	std	Y+6, r25	; 0x06
 174:	af 83       	std	Y+7, r26	; 0x07
 176:	b8 87       	std	Y+8, r27	; 0x08
 178:	2d 81       	ldd	r18, Y+5	; 0x05
 17a:	3e 81       	ldd	r19, Y+6	; 0x06
 17c:	4f 81       	ldd	r20, Y+7	; 0x07
 17e:	58 85       	ldd	r21, Y+8	; 0x08
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	ab 81       	ldd	r26, Y+3	; 0x03
 186:	bc 81       	ldd	r27, Y+4	; 0x04
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	4a 07       	cpc	r20, r26
 18e:	5b 07       	cpc	r21, r27
 190:	38 f3       	brcs	.-50     	; 0x160 <Delay_us+0x66>
	{
		asm("nop");
	}
 192:	2c 96       	adiw	r28, 0x0c	; 12
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <DIO_voidInitialize>:
#include "DIO_config.h"
#include "DIO_priv.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1ac:	ea e3       	ldi	r30, 0x3A	; 58
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1b4:	e7 e3       	ldi	r30, 0x37	; 55
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1bc:	e4 e3       	ldi	r30, 0x34	; 52
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	10 82       	st	Z, r1
	DDRD = DIO_u8_PORTD_DIRECTION;
 1c2:	e1 e3       	ldi	r30, 0x31	; 49
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	10 82       	st	Z, r1
}
 1c8:	cf 91       	pop	r28
 1ca:	df 91       	pop	r29
 1cc:	08 95       	ret

000001ce <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1ce:	df 93       	push	r29
 1d0:	cf 93       	push	r28
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <DIO_voidSetPinValue+0x6>
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	88 30       	cpi	r24, 0x08	; 8
 1e0:	60 f5       	brcc	.+88     	; 0x23a <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	88 23       	and	r24, r24
 1e6:	a1 f4       	brne	.+40     	; 0x210 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 1e8:	ab e3       	ldi	r26, 0x3B	; 59
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	eb e3       	ldi	r30, 0x3B	; 59
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	48 2f       	mov	r20, r24
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 2e       	mov	r0, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinValue+0x38>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinValue+0x34>
 20a:	84 2b       	or	r24, r20
 20c:	8c 93       	st	X, r24
 20e:	b3 c0       	rjmp	.+358    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 210:	ab e3       	ldi	r26, 0x3B	; 59
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	eb e3       	ldi	r30, 0x3B	; 59
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinValue+0x60>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinValue+0x5c>
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	8c 93       	st	X, r24
 238:	9e c0       	rjmp	.+316    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	88 30       	cpi	r24, 0x08	; 8
 23e:	90 f1       	brcs	.+100    	; 0x2a4 <DIO_voidSetPinValue+0xd6>
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	80 31       	cpi	r24, 0x10	; 16
 244:	78 f5       	brcc	.+94     	; 0x2a4 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	88 50       	subi	r24, 0x08	; 8
 24a:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	88 23       	and	r24, r24
 250:	a1 f4       	brne	.+40     	; 0x27a <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 252:	a8 e3       	ldi	r26, 0x38	; 56
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e8 e3       	ldi	r30, 0x38	; 56
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	48 2f       	mov	r20, r24
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_voidSetPinValue+0xa2>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_voidSetPinValue+0x9e>
 274:	84 2b       	or	r24, r20
 276:	8c 93       	st	X, r24
 278:	7e c0       	rjmp	.+252    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 27a:	a8 e3       	ldi	r26, 0x38	; 56
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e8 e3       	ldi	r30, 0x38	; 56
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	48 2f       	mov	r20, r24
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPinValue+0xca>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPinValue+0xc6>
 29c:	80 95       	com	r24
 29e:	84 23       	and	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	69 c0       	rjmp	.+210    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	80 31       	cpi	r24, 0x10	; 16
 2a8:	90 f1       	brcs	.+100    	; 0x30e <DIO_voidSetPinValue+0x140>
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	88 31       	cpi	r24, 0x18	; 24
 2ae:	78 f5       	brcc	.+94     	; 0x30e <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	80 51       	subi	r24, 0x10	; 16
 2b4:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2b6:	8a 81       	ldd	r24, Y+2	; 0x02
 2b8:	88 23       	and	r24, r24
 2ba:	a1 f4       	brne	.+40     	; 0x2e4 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2bc:	a5 e3       	ldi	r26, 0x35	; 53
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	e5 e3       	ldi	r30, 0x35	; 53
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 2e       	mov	r0, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_voidSetPinValue+0x10c>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_voidSetPinValue+0x108>
 2de:	84 2b       	or	r24, r20
 2e0:	8c 93       	st	X, r24
 2e2:	49 c0       	rjmp	.+146    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e3       	ldi	r30, 0x35	; 53
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_voidSetPinValue+0x134>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_voidSetPinValue+0x130>
 306:	80 95       	com	r24
 308:	84 23       	and	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	34 c0       	rjmp	.+104    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	88 31       	cpi	r24, 0x18	; 24
 312:	88 f1       	brcs	.+98     	; 0x376 <DIO_voidSetPinValue+0x1a8>
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	80 32       	cpi	r24, 0x20	; 32
 318:	70 f5       	brcc	.+92     	; 0x376 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	88 51       	subi	r24, 0x18	; 24
 31e:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	88 23       	and	r24, r24
 324:	a1 f4       	brne	.+40     	; 0x34e <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 326:	a2 e3       	ldi	r26, 0x32	; 50
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e2 e3       	ldi	r30, 0x32	; 50
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	48 2f       	mov	r20, r24
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 2e       	mov	r0, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_voidSetPinValue+0x176>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_voidSetPinValue+0x172>
 348:	84 2b       	or	r24, r20
 34a:	8c 93       	st	X, r24
 34c:	14 c0       	rjmp	.+40     	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 34e:	a2 e3       	ldi	r26, 0x32	; 50
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e2 e3       	ldi	r30, 0x32	; 50
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_voidSetPinValue+0x19e>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_voidSetPinValue+0x19a>
 370:	80 95       	com	r24
 372:	84 23       	and	r24, r20
 374:	8c 93       	st	X, r24
		}			
	}
}
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <SevenSeg_voidDisplayOnSeg>:
#include "SEVENSEG_int.h"
#include "SEVENSEG_priv.h"

/*Display on Seven segment take a u8 variable a display it on the seven segment */
void SevenSeg_voidDisplayOnSeg(u8 u8PaternCpy)
{
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	0f 92       	push	r0
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	89 83       	std	Y+1, r24	; 0x01
	/*if the seven segment type is Anode type*/
#if u8_SEVENSEG_TYPE == u8_SEVENSEG_ANODE
	/*then set the bit of the common with high value*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_COMMON,DIO_u8_HIGH);
 38c:	88 e0       	ldi	r24, 0x08	; 8
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 0 of the sent variable and out it on the seven segment A*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_A,GET_BIT(u8PaternCpy,0));
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	98 2f       	mov	r25, r24
 398:	91 70       	andi	r25, 0x01	; 1
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	69 2f       	mov	r22, r25
 39e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 1 of the sent variable and out it on the seven segment B*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_B,GET_BIT(u8PaternCpy,1));
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	88 2f       	mov	r24, r24
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	82 70       	andi	r24, 0x02	; 2
 3aa:	90 70       	andi	r25, 0x00	; 0
 3ac:	95 95       	asr	r25
 3ae:	87 95       	ror	r24
 3b0:	98 2f       	mov	r25, r24
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	69 2f       	mov	r22, r25
 3b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 2 of the sent variable and out it on the seven segment C*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_C,GET_BIT(u8PaternCpy,2));
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	84 70       	andi	r24, 0x04	; 4
 3c2:	90 70       	andi	r25, 0x00	; 0
 3c4:	95 95       	asr	r25
 3c6:	87 95       	ror	r24
 3c8:	95 95       	asr	r25
 3ca:	87 95       	ror	r24
 3cc:	98 2f       	mov	r25, r24
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	69 2f       	mov	r22, r25
 3d2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 3 of the sent variable and out it on the seven segment D*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_D,GET_BIT(u8PaternCpy,3));
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	88 2f       	mov	r24, r24
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	88 70       	andi	r24, 0x08	; 8
 3de:	90 70       	andi	r25, 0x00	; 0
 3e0:	95 95       	asr	r25
 3e2:	87 95       	ror	r24
 3e4:	95 95       	asr	r25
 3e6:	87 95       	ror	r24
 3e8:	95 95       	asr	r25
 3ea:	87 95       	ror	r24
 3ec:	98 2f       	mov	r25, r24
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	69 2f       	mov	r22, r25
 3f2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 4 of the sent variable and out it on the seven segment E*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_E,GET_BIT(u8PaternCpy,4));
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	80 71       	andi	r24, 0x10	; 16
 3fe:	90 70       	andi	r25, 0x00	; 0
 400:	95 95       	asr	r25
 402:	87 95       	ror	r24
 404:	95 95       	asr	r25
 406:	87 95       	ror	r24
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	95 95       	asr	r25
 40e:	87 95       	ror	r24
 410:	98 2f       	mov	r25, r24
 412:	84 e0       	ldi	r24, 0x04	; 4
 414:	69 2f       	mov	r22, r25
 416:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 5 of the sent variable and out it on the seven segment F*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_F,GET_BIT(u8PaternCpy,5));
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	88 2f       	mov	r24, r24
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	80 72       	andi	r24, 0x20	; 32
 422:	90 70       	andi	r25, 0x00	; 0
 424:	95 95       	asr	r25
 426:	87 95       	ror	r24
 428:	95 95       	asr	r25
 42a:	87 95       	ror	r24
 42c:	95 95       	asr	r25
 42e:	87 95       	ror	r24
 430:	95 95       	asr	r25
 432:	87 95       	ror	r24
 434:	95 95       	asr	r25
 436:	87 95       	ror	r24
 438:	98 2f       	mov	r25, r24
 43a:	85 e0       	ldi	r24, 0x05	; 5
 43c:	69 2f       	mov	r22, r25
 43e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 6 of the sent variable and out it on the seven segment G*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_G,GET_BIT(u8PaternCpy,6));
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	88 2f       	mov	r24, r24
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	80 74       	andi	r24, 0x40	; 64
 44a:	90 70       	andi	r25, 0x00	; 0
 44c:	08 2e       	mov	r0, r24
 44e:	89 2f       	mov	r24, r25
 450:	00 0c       	add	r0, r0
 452:	88 1f       	adc	r24, r24
 454:	99 0b       	sbc	r25, r25
 456:	00 0c       	add	r0, r0
 458:	88 1f       	adc	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	98 2f       	mov	r25, r24
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	69 2f       	mov	r22, r25
 462:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 7 of the sent variable and out it on the seven segment DOT*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_DOT,GET_BIT(u8PaternCpy,7));
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	98 2f       	mov	r25, r24
 46a:	99 1f       	adc	r25, r25
 46c:	99 27       	eor	r25, r25
 46e:	99 1f       	adc	r25, r25
 470:	87 e0       	ldi	r24, 0x07	; 7
 472:	69 2f       	mov	r22, r25
 474:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*get bit 7 of the sent variable and out it on the seven segment DOT*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_DOT,!GET_BIT(u8PaternCpy,7));
#endif


}
 478:	0f 90       	pop	r0
 47a:	cf 91       	pop	r28
 47c:	df 91       	pop	r29
 47e:	08 95       	ret

00000480 <main>:
#include"DIO_int.h"
#include "SEVENSEG_int.h"
#include "DELAY.h"

int main (void)
{	DIO_voidInitialize();
 480:	df 93       	push	r29
 482:	cf 93       	push	r28
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_voidInitialize>

	while(1)
	{
		SevenSeg_voidDisplayOnSeg(0b11111111);
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	0e 94 c0 01 	call	0x380	; 0x380 <SevenSeg_voidDisplayOnSeg>
 492:	fc cf       	rjmp	.-8      	; 0x48c <main+0xc>

00000494 <__mulsi3>:
 494:	62 9f       	mul	r22, r18
 496:	d0 01       	movw	r26, r0
 498:	73 9f       	mul	r23, r19
 49a:	f0 01       	movw	r30, r0
 49c:	82 9f       	mul	r24, r18
 49e:	e0 0d       	add	r30, r0
 4a0:	f1 1d       	adc	r31, r1
 4a2:	64 9f       	mul	r22, r20
 4a4:	e0 0d       	add	r30, r0
 4a6:	f1 1d       	adc	r31, r1
 4a8:	92 9f       	mul	r25, r18
 4aa:	f0 0d       	add	r31, r0
 4ac:	83 9f       	mul	r24, r19
 4ae:	f0 0d       	add	r31, r0
 4b0:	74 9f       	mul	r23, r20
 4b2:	f0 0d       	add	r31, r0
 4b4:	65 9f       	mul	r22, r21
 4b6:	f0 0d       	add	r31, r0
 4b8:	99 27       	eor	r25, r25
 4ba:	72 9f       	mul	r23, r18
 4bc:	b0 0d       	add	r27, r0
 4be:	e1 1d       	adc	r30, r1
 4c0:	f9 1f       	adc	r31, r25
 4c2:	63 9f       	mul	r22, r19
 4c4:	b0 0d       	add	r27, r0
 4c6:	e1 1d       	adc	r30, r1
 4c8:	f9 1f       	adc	r31, r25
 4ca:	bd 01       	movw	r22, r26
 4cc:	cf 01       	movw	r24, r30
 4ce:	11 24       	eor	r1, r1
 4d0:	08 95       	ret

000004d2 <__udivmodsi4>:
 4d2:	a1 e2       	ldi	r26, 0x21	; 33
 4d4:	1a 2e       	mov	r1, r26
 4d6:	aa 1b       	sub	r26, r26
 4d8:	bb 1b       	sub	r27, r27
 4da:	fd 01       	movw	r30, r26
 4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <__udivmodsi4_ep>

000004de <__udivmodsi4_loop>:
 4de:	aa 1f       	adc	r26, r26
 4e0:	bb 1f       	adc	r27, r27
 4e2:	ee 1f       	adc	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	a2 17       	cp	r26, r18
 4e8:	b3 07       	cpc	r27, r19
 4ea:	e4 07       	cpc	r30, r20
 4ec:	f5 07       	cpc	r31, r21
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__udivmodsi4_ep>
 4f0:	a2 1b       	sub	r26, r18
 4f2:	b3 0b       	sbc	r27, r19
 4f4:	e4 0b       	sbc	r30, r20
 4f6:	f5 0b       	sbc	r31, r21

000004f8 <__udivmodsi4_ep>:
 4f8:	66 1f       	adc	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a 94       	dec	r1
 502:	69 f7       	brne	.-38     	; 0x4de <__udivmodsi4_loop>
 504:	60 95       	com	r22
 506:	70 95       	com	r23
 508:	80 95       	com	r24
 50a:	90 95       	com	r25
 50c:	9b 01       	movw	r18, r22
 50e:	ac 01       	movw	r20, r24
 510:	bd 01       	movw	r22, r26
 512:	cf 01       	movw	r24, r30
 514:	08 95       	ret

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
