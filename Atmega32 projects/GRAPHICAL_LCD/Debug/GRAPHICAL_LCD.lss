
GRAPHICAL_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000864  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f8  00800060  00000864  000008f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800258  00800258  00000af0  2**0
                  ALLOC
  3 .stab         00000e40  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005e7  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 35       	cpi	r26, 0x58	; 88
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a8 e5       	ldi	r26, 0x58	; 88
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 35       	cpi	r26, 0x5A	; 90
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <main>
  8a:	0c 94 30 04 	jmp	0x860	; 0x860 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 0e 04 	call	0x81c	; 0x81c <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f eb       	ldi	r24, 0xBF	; 191
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1ea:	e1 e3       	ldi	r30, 0x31	; 49
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	80 83       	st	Z, r24
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_voidSetPinValue+0x6>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 30       	cpi	r24, 0x08	; 8
 20a:	60 f5       	brcc	.+88     	; 0x264 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	88 23       	and	r24, r24
 210:	a1 f4       	brne	.+40     	; 0x23a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 212:	ab e3       	ldi	r26, 0x3B	; 59
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x38>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x34>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	b3 c0       	rjmp	.+358    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 23a:	ab e3       	ldi	r26, 0x3B	; 59
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	eb e3       	ldi	r30, 0x3B	; 59
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0x60>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0x5c>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	9e c0       	rjmp	.+316    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	90 f1       	brcs	.+100    	; 0x2ce <DIO_voidSetPinValue+0xd6>
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	80 31       	cpi	r24, 0x10	; 16
 26e:	78 f5       	brcc	.+94     	; 0x2ce <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 50       	subi	r24, 0x08	; 8
 274:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	88 23       	and	r24, r24
 27a:	a1 f4       	brne	.+40     	; 0x2a4 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27c:	a8 e3       	ldi	r26, 0x38	; 56
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e8 e3       	ldi	r30, 0x38	; 56
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xa2>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0x9e>
 29e:	84 2b       	or	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a4:	a8 e3       	ldi	r26, 0x38	; 56
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinValue+0xca>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinValue+0xc6>
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 31       	cpi	r24, 0x10	; 16
 2d2:	90 f1       	brcs	.+100    	; 0x338 <DIO_voidSetPinValue+0x140>
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 31       	cpi	r24, 0x18	; 24
 2d8:	78 f5       	brcc	.+94     	; 0x338 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	80 51       	subi	r24, 0x10	; 16
 2de:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	88 23       	and	r24, r24
 2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e6:	a5 e3       	ldi	r26, 0x35	; 53
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e5 e3       	ldi	r30, 0x35	; 53
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x10c>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x108>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	49 c0       	rjmp	.+146    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30e:	a5 e3       	ldi	r26, 0x35	; 53
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e5 e3       	ldi	r30, 0x35	; 53
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x134>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x130>
 330:	80 95       	com	r24
 332:	84 23       	and	r24, r20
 334:	8c 93       	st	X, r24
 336:	34 c0       	rjmp	.+104    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	70 f5       	brcc	.+92     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 51       	subi	r24, 0x18	; 24
 348:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 23       	and	r24, r24
 34e:	a1 f4       	brne	.+40     	; 0x378 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 350:	a2 e3       	ldi	r26, 0x32	; 50
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e2 e3       	ldi	r30, 0x32	; 50
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x176>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x172>
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 378:	a2 e3       	ldi	r26, 0x32	; 50
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e2 e3       	ldi	r30, 0x32	; 50
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x19e>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x19a>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	8c 93       	st	X, r24
		}			
	}
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8GetPinValue+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	00 f5       	brcc	.+64     	; 0x3fe <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c2:	e9 e3       	ldi	r30, 0x39	; 57
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8GetPinValue+0x32>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	2a 95       	dec	r18
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8GetPinValue+0x2e>
 3e0:	9a 01       	movw	r18, r20
 3e2:	28 23       	and	r18, r24
 3e4:	39 23       	and	r19, r25
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPinValue+0x4a>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPinValue+0x46>
 3f8:	ca 01       	movw	r24, r20
 3fa:	8a 83       	std	Y+2, r24	; 0x02
 3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 3fe:	8c 81       	ldd	r24, Y+4	; 0x04
 400:	88 30       	cpi	r24, 0x08	; 8
 402:	20 f1       	brcs	.+72     	; 0x44c <DIO_u8GetPinValue+0xa2>
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	80 31       	cpi	r24, 0x10	; 16
 408:	08 f5       	brcc	.+66     	; 0x44c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	88 50       	subi	r24, 0x08	; 8
 40e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 410:	e6 e3       	ldi	r30, 0x36	; 54
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8GetPinValue+0x80>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	2a 95       	dec	r18
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8GetPinValue+0x7c>
 42e:	9a 01       	movw	r18, r20
 430:	28 23       	and	r18, r24
 432:	39 23       	and	r19, r25
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a9 01       	movw	r20, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0x98>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0x94>
 446:	ca 01       	movw	r24, r20
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	4d c0       	rjmp	.+154    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	80 31       	cpi	r24, 0x10	; 16
 450:	20 f1       	brcs	.+72     	; 0x49a <DIO_u8GetPinValue+0xf0>
 452:	8c 81       	ldd	r24, Y+4	; 0x04
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	08 f5       	brcc	.+66     	; 0x49a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	80 51       	subi	r24, 0x10	; 16
 45c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45e:	e6 e3       	ldi	r30, 0x36	; 54
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8GetPinValue+0xce>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8GetPinValue+0xca>
 47c:	9a 01       	movw	r18, r20
 47e:	28 23       	and	r18, r24
 480:	39 23       	and	r19, r25
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a9 01       	movw	r20, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8GetPinValue+0xe6>
 48c:	55 95       	asr	r21
 48e:	47 95       	ror	r20
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8GetPinValue+0xe2>
 494:	ca 01       	movw	r24, r20
 496:	8a 83       	std	Y+2, r24	; 0x02
 498:	26 c0       	rjmp	.+76     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	88 31       	cpi	r24, 0x18	; 24
 49e:	18 f1       	brcs	.+70     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	80 32       	cpi	r24, 0x20	; 32
 4a4:	00 f5       	brcc	.+64     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	88 51       	subi	r24, 0x18	; 24
 4aa:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4ac:	e0 e3       	ldi	r30, 0x30	; 48
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0x11c>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	2a 95       	dec	r18
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0x118>
 4ca:	9a 01       	movw	r18, r20
 4cc:	28 23       	and	r18, r24
 4ce:	39 23       	and	r19, r25
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a9 01       	movw	r20, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8GetPinValue+0x134>
 4da:	55 95       	asr	r21
 4dc:	47 95       	ror	r20
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8GetPinValue+0x130>
 4e2:	ca 01       	movw	r24, r20
 4e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	88 23       	and	r24, r24
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 512:	af e5       	ldi	r26, 0x5F	; 95
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	ef e5       	ldi	r30, 0x5F	; 95
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	80 68       	ori	r24, 0x80	; 128
 51e:	8c 93       	st	X, r24
}
 520:	cf 91       	pop	r28
 522:	df 91       	pop	r29
 524:	08 95       	ret

00000526 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 526:	df 93       	push	r29
 528:	cf 93       	push	r28
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 52e:	af e5       	ldi	r26, 0x5F	; 95
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	ef e5       	ldi	r30, 0x5F	; 95
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	8f 77       	andi	r24, 0x7F	; 127
 53a:	8c 93       	st	X, r24
}
 53c:	cf 91       	pop	r28
 53e:	df 91       	pop	r29
 540:	08 95       	ret

00000542 <GLCD_writeData>:
#include "DELAY.h"
#include "DIO_int.h"
#include "SPI_int.h"
#include "GLCD.h"
static void GLCD_writeData(u8 Data)
{
 542:	df 93       	push	r29
 544:	cf 93       	push	r28
 546:	0f 92       	push	r0
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(DC_PIN,DIO_u8_HIGH);
 54e:	88 e1       	ldi	r24, 0x18	; 24
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CE_PIN,DIO_u8_LOW);
 556:	89 e1       	ldi	r24, 0x19	; 25
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	SPI_transmit(Data);
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	0e 94 90 03 	call	0x720	; 0x720 <SPI_transmit>
	SPI_waitForTransferCompleteFlag();
 564:	0e 94 9e 03 	call	0x73c	; 0x73c <SPI_waitForTransferCompleteFlag>
	DIO_voidSetPinValue(CE_PIN,DIO_u8_HIGH);
 568:	89 e1       	ldi	r24, 0x19	; 25
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
}
 570:	0f 90       	pop	r0
 572:	cf 91       	pop	r28
 574:	df 91       	pop	r29
 576:	08 95       	ret

00000578 <GLCD_writeCommand>:

static void GLCD_writeCommand(u8 command)
{
 578:	df 93       	push	r29
 57a:	cf 93       	push	r28
 57c:	0f 92       	push	r0
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(DC_PIN,DIO_u8_LOW);
 584:	88 e1       	ldi	r24, 0x18	; 24
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CE_PIN,DIO_u8_LOW);
 58c:	89 e1       	ldi	r24, 0x19	; 25
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	SPI_transmit(command);
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	0e 94 90 03 	call	0x720	; 0x720 <SPI_transmit>
	SPI_waitForTransferCompleteFlag();
 59a:	0e 94 9e 03 	call	0x73c	; 0x73c <SPI_waitForTransferCompleteFlag>
	DIO_voidSetPinValue(CE_PIN,DIO_u8_HIGH);
 59e:	89 e1       	ldi	r24, 0x19	; 25
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
}
 5a6:	0f 90       	pop	r0
 5a8:	cf 91       	pop	r28
 5aa:	df 91       	pop	r29
 5ac:	08 95       	ret

000005ae <GLCD_updateGlcd>:

void GLCD_updateGlcd(u8 * ptr)
{
 5ae:	df 93       	push	r29
 5b0:	cf 93       	push	r28
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <GLCD_updateGlcd+0x6>
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <GLCD_updateGlcd+0x8>
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	9c 83       	std	Y+4, r25	; 0x04
 5bc:	8b 83       	std	Y+3, r24	; 0x03
	for(u16 i=0;i<504;i++)
 5be:	1a 82       	std	Y+2, r1	; 0x02
 5c0:	19 82       	std	Y+1, r1	; 0x01
 5c2:	0f c0       	rjmp	.+30     	; 0x5e2 <GLCD_updateGlcd+0x34>
	{
		GLCD_writeData(ptr[i]);
 5c4:	2b 81       	ldd	r18, Y+3	; 0x03
 5c6:	3c 81       	ldd	r19, Y+4	; 0x04
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	9a 81       	ldd	r25, Y+2	; 0x02
 5cc:	f9 01       	movw	r30, r18
 5ce:	e8 0f       	add	r30, r24
 5d0:	f9 1f       	adc	r31, r25
 5d2:	80 81       	ld	r24, Z
 5d4:	0e 94 a1 02 	call	0x542	; 0x542 <GLCD_writeData>
	DIO_voidSetPinValue(CE_PIN,DIO_u8_HIGH);
}

void GLCD_updateGlcd(u8 * ptr)
{
	for(u16 i=0;i<504;i++)
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	9a 81       	ldd	r25, Y+2	; 0x02
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	9a 83       	std	Y+2, r25	; 0x02
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	9a 81       	ldd	r25, Y+2	; 0x02
 5e6:	21 e0       	ldi	r18, 0x01	; 1
 5e8:	88 3f       	cpi	r24, 0xF8	; 248
 5ea:	92 07       	cpc	r25, r18
 5ec:	58 f3       	brcs	.-42     	; 0x5c4 <GLCD_updateGlcd+0x16>
	{
		GLCD_writeData(ptr[i]);
	}
}
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	cf 91       	pop	r28
 5f8:	df 91       	pop	r29
 5fa:	08 95       	ret

000005fc <GLCD_init>:

void GLCD_init(void)
{
 5fc:	df 93       	push	r29
 5fe:	cf 93       	push	r28
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(RST_PIN,DIO_u8_HIGH);
 604:	8a e1       	ldi	r24, 0x1A	; 26
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	Delay_ms(2);
 60c:	62 e0       	ldi	r22, 0x02	; 2
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	DIO_voidSetPinValue(RST_PIN,DIO_u8_LOW);
 618:	8a e1       	ldi	r24, 0x1A	; 26
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	Delay_ms(2);
 620:	62 e0       	ldi	r22, 0x02	; 2
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	DIO_voidSetPinValue(RST_PIN,DIO_u8_HIGH);
 62c:	8a e1       	ldi	r24, 0x1A	; 26
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	Delay_ms(2);
 634:	62 e0       	ldi	r22, 0x02	; 2
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	GLCD_writeCommand(0x21); //PD Power Down(active),V vertical or Horizonal, H Basic or Extended
 640:	81 e2       	ldi	r24, 0x21	; 33
 642:	0e 94 bc 02 	call	0x578	; 0x578 <GLCD_writeCommand>
	GLCD_writeCommand(0xBE); // to modify the contrast
 646:	8e eb       	ldi	r24, 0xBE	; 190
 648:	0e 94 bc 02 	call	0x578	; 0x578 <GLCD_writeCommand>
	GLCD_writeCommand(0x06); //temperature coffiecent 2
 64c:	86 e0       	ldi	r24, 0x06	; 6
 64e:	0e 94 bc 02 	call	0x578	; 0x578 <GLCD_writeCommand>
	GLCD_writeCommand(0x13); // Baising system
 652:	83 e1       	ldi	r24, 0x13	; 19
 654:	0e 94 bc 02 	call	0x578	; 0x578 <GLCD_writeCommand>
	GLCD_writeCommand(0x20); // jump to basic instruction set
 658:	80 e2       	ldi	r24, 0x20	; 32
 65a:	0e 94 bc 02 	call	0x578	; 0x578 <GLCD_writeCommand>
	GLCD_writeCommand(0x0c); //noraml mode display
 65e:	8c e0       	ldi	r24, 0x0C	; 12
 660:	0e 94 bc 02 	call	0x578	; 0x578 <GLCD_writeCommand>
}
 664:	cf 91       	pop	r28
 666:	df 91       	pop	r29
 668:	08 95       	ret

0000066a <SPI_init>:
#include "DIO_register.h"

static volatile u8 recievedData;
static volatile u8 flag=0;
void SPI_init(void)
{
 66a:	df 93       	push	r29
 66c:	cf 93       	push	r28
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
#if SPI_DORD == DORD_LSB_FIRST
	SET_BIT(SPCR,5);
#elif SPI_DORD == DORD_MSB_FIRST
	CLR_BIT(SPCR,5);
 672:	ad e2       	ldi	r26, 0x2D	; 45
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ed e2       	ldi	r30, 0x2D	; 45
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	8f 7d       	andi	r24, 0xDF	; 223
 67e:	8c 93       	st	X, r24
#endif

#if SPI_TYPE == SPI_MASTER
	SET_BIT(SPCR,4);
 680:	ad e2       	ldi	r26, 0x2D	; 45
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	ed e2       	ldi	r30, 0x2D	; 45
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	80 61       	ori	r24, 0x10	; 16
 68c:	8c 93       	st	X, r24
#elif SPI_TYPE == SPI_SLAVE
	CLR_BIT(SPCR,4);
#endif

#if SPI_CLK_POL == SPI_CLK_POL_RAISING
	CLR_BIT(SPCR,3);
 68e:	ad e2       	ldi	r26, 0x2D	; 45
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	ed e2       	ldi	r30, 0x2D	; 45
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	87 7f       	andi	r24, 0xF7	; 247
 69a:	8c 93       	st	X, r24
#endif

#if SPI_CLK_PHASE == SPI_CLK_PHASE_SAMPLE
	CLR_BIT(SPCR,2);
#elif SPI_CLK_PHASE == SPI_CLK_PHASE_SETUP
	SET_BIT(SPCR,2);
 69c:	ad e2       	ldi	r26, 0x2D	; 45
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	ed e2       	ldi	r30, 0x2D	; 45
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	84 60       	ori	r24, 0x04	; 4
 6a8:	8c 93       	st	X, r24
#elif SPI_PRESCALER == SPI_PRESCALER_4
	CLR_BIT(SPCR,1);
	CLR_BIT(SPCR,0);
	CLR_BIT(SPSR,0);
#elif SPI_PRESCALER == SPI_PRESCALER_8
	CLR_BIT(SPCR,1);
 6aa:	ad e2       	ldi	r26, 0x2D	; 45
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
 6ae:	ed e2       	ldi	r30, 0x2D	; 45
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	8d 7f       	andi	r24, 0xFD	; 253
 6b6:	8c 93       	st	X, r24
	SET_BIT(SPCR,0);
 6b8:	ad e2       	ldi	r26, 0x2D	; 45
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	ed e2       	ldi	r30, 0x2D	; 45
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	81 60       	ori	r24, 0x01	; 1
 6c4:	8c 93       	st	X, r24
	SET_BIT(SPSR,0);
 6c6:	ae e2       	ldi	r26, 0x2E	; 46
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	ee e2       	ldi	r30, 0x2E	; 46
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	81 60       	ori	r24, 0x01	; 1
 6d2:	8c 93       	st	X, r24
#elif SPI_PRESCALER == SPI_PRESCALER_128
	SET_BIT(SPCR,1);
	SET_BIT(SPCR,0);
	CLR_BIT(SPSR,0);
#endif
	SET_BIT(SPCR,6);
 6d4:	ad e2       	ldi	r26, 0x2D	; 45
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	ed e2       	ldi	r30, 0x2D	; 45
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	80 64       	ori	r24, 0x40	; 64
 6e0:	8c 93       	st	X, r24
}
 6e2:	cf 91       	pop	r28
 6e4:	df 91       	pop	r29
 6e6:	08 95       	ret

000006e8 <SPI_interruptEnable>:
void SPI_interruptEnable(void)
{
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,7);
 6f0:	ad e2       	ldi	r26, 0x2D	; 45
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	ed e2       	ldi	r30, 0x2D	; 45
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	80 68       	ori	r24, 0x80	; 128
 6fc:	8c 93       	st	X, r24
}
 6fe:	cf 91       	pop	r28
 700:	df 91       	pop	r29
 702:	08 95       	ret

00000704 <SPI_disableEnable>:
void SPI_disableEnable(void)
{
 704:	df 93       	push	r29
 706:	cf 93       	push	r28
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,7);
 70c:	ad e2       	ldi	r26, 0x2D	; 45
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	ed e2       	ldi	r30, 0x2D	; 45
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	8f 77       	andi	r24, 0x7F	; 127
 718:	8c 93       	st	X, r24
}
 71a:	cf 91       	pop	r28
 71c:	df 91       	pop	r29
 71e:	08 95       	ret

00000720 <SPI_transmit>:

void SPI_transmit(u8 data)
{
 720:	df 93       	push	r29
 722:	cf 93       	push	r28
 724:	0f 92       	push	r0
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	89 83       	std	Y+1, r24	; 0x01
	SPDR=data;
 72c:	ef e2       	ldi	r30, 0x2F	; 47
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	89 81       	ldd	r24, Y+1	; 0x01
 732:	80 83       	st	Z, r24
}
 734:	0f 90       	pop	r0
 736:	cf 91       	pop	r28
 738:	df 91       	pop	r29
 73a:	08 95       	ret

0000073c <SPI_waitForTransferCompleteFlag>:
void SPI_waitForTransferCompleteFlag(void)
{
 73c:	df 93       	push	r29
 73e:	cf 93       	push	r28
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,7) == 0);
 744:	ee e2       	ldi	r30, 0x2E	; 46
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	88 1f       	adc	r24, r24
 74c:	88 27       	eor	r24, r24
 74e:	88 1f       	adc	r24, r24
 750:	88 2f       	mov	r24, r24
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	90 70       	andi	r25, 0x00	; 0
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	a9 f3       	breq	.-22     	; 0x744 <SPI_waitForTransferCompleteFlag+0x8>
}
 75a:	cf 91       	pop	r28
 75c:	df 91       	pop	r29
 75e:	08 95       	ret

00000760 <SPI_receive>:
u8 SPI_receive(void)
{
 760:	df 93       	push	r29
 762:	cf 93       	push	r28
 764:	0f 92       	push	r0
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
	if(flag==1)
 76a:	80 91 58 02 	lds	r24, 0x0258
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	31 f4       	brne	.+12     	; 0x77e <SPI_receive+0x1e>
	{
		flag=0;
 772:	10 92 58 02 	sts	0x0258, r1
		return recievedData;
 776:	80 91 59 02 	lds	r24, 0x0259
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	01 c0       	rjmp	.+2      	; 0x780 <SPI_receive+0x20>
	}
	else
	{
		return 0;
 77e:	19 82       	std	Y+1, r1	; 0x01
 780:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
 782:	0f 90       	pop	r0
 784:	cf 91       	pop	r28
 786:	df 91       	pop	r29
 788:	08 95       	ret

0000078a <__vector_12>:
void __vector_12 (void)__attribute__((signal,used));
void __vector_12 (void)
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	8f 93       	push	r24
 796:	ef 93       	push	r30
 798:	ff 93       	push	r31
 79a:	df 93       	push	r29
 79c:	cf 93       	push	r28
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
	recievedData=SPDR;
 7a2:	ef e2       	ldi	r30, 0x2F	; 47
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	80 93 59 02 	sts	0x0259, r24
}
 7ac:	cf 91       	pop	r28
 7ae:	df 91       	pop	r29
 7b0:	ff 91       	pop	r31
 7b2:	ef 91       	pop	r30
 7b4:	8f 91       	pop	r24
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti

000007c0 <main>:
#include "GIE_int.h"
#include "GLCD.h"
#include "DELAY.h"
#include "image.h"
void main(void)
{
 7c0:	df 93       	push	r29
 7c2:	cf 93       	push	r28
 7c4:	cd b7       	in	r28, 0x3d	; 61
 7c6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 7c8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	SPI_init();
 7cc:	0e 94 35 03 	call	0x66a	; 0x66a <SPI_init>
	GLCD_init();
 7d0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <GLCD_init>
	GLCD_updateGlcd(Array);
 7d4:	80 e6       	ldi	r24, 0x60	; 96
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <GLCD_updateGlcd>
 7dc:	ff cf       	rjmp	.-2      	; 0x7dc <main+0x1c>

000007de <__mulsi3>:
 7de:	62 9f       	mul	r22, r18
 7e0:	d0 01       	movw	r26, r0
 7e2:	73 9f       	mul	r23, r19
 7e4:	f0 01       	movw	r30, r0
 7e6:	82 9f       	mul	r24, r18
 7e8:	e0 0d       	add	r30, r0
 7ea:	f1 1d       	adc	r31, r1
 7ec:	64 9f       	mul	r22, r20
 7ee:	e0 0d       	add	r30, r0
 7f0:	f1 1d       	adc	r31, r1
 7f2:	92 9f       	mul	r25, r18
 7f4:	f0 0d       	add	r31, r0
 7f6:	83 9f       	mul	r24, r19
 7f8:	f0 0d       	add	r31, r0
 7fa:	74 9f       	mul	r23, r20
 7fc:	f0 0d       	add	r31, r0
 7fe:	65 9f       	mul	r22, r21
 800:	f0 0d       	add	r31, r0
 802:	99 27       	eor	r25, r25
 804:	72 9f       	mul	r23, r18
 806:	b0 0d       	add	r27, r0
 808:	e1 1d       	adc	r30, r1
 80a:	f9 1f       	adc	r31, r25
 80c:	63 9f       	mul	r22, r19
 80e:	b0 0d       	add	r27, r0
 810:	e1 1d       	adc	r30, r1
 812:	f9 1f       	adc	r31, r25
 814:	bd 01       	movw	r22, r26
 816:	cf 01       	movw	r24, r30
 818:	11 24       	eor	r1, r1
 81a:	08 95       	ret

0000081c <__udivmodsi4>:
 81c:	a1 e2       	ldi	r26, 0x21	; 33
 81e:	1a 2e       	mov	r1, r26
 820:	aa 1b       	sub	r26, r26
 822:	bb 1b       	sub	r27, r27
 824:	fd 01       	movw	r30, r26
 826:	0d c0       	rjmp	.+26     	; 0x842 <__udivmodsi4_ep>

00000828 <__udivmodsi4_loop>:
 828:	aa 1f       	adc	r26, r26
 82a:	bb 1f       	adc	r27, r27
 82c:	ee 1f       	adc	r30, r30
 82e:	ff 1f       	adc	r31, r31
 830:	a2 17       	cp	r26, r18
 832:	b3 07       	cpc	r27, r19
 834:	e4 07       	cpc	r30, r20
 836:	f5 07       	cpc	r31, r21
 838:	20 f0       	brcs	.+8      	; 0x842 <__udivmodsi4_ep>
 83a:	a2 1b       	sub	r26, r18
 83c:	b3 0b       	sbc	r27, r19
 83e:	e4 0b       	sbc	r30, r20
 840:	f5 0b       	sbc	r31, r21

00000842 <__udivmodsi4_ep>:
 842:	66 1f       	adc	r22, r22
 844:	77 1f       	adc	r23, r23
 846:	88 1f       	adc	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	1a 94       	dec	r1
 84c:	69 f7       	brne	.-38     	; 0x828 <__udivmodsi4_loop>
 84e:	60 95       	com	r22
 850:	70 95       	com	r23
 852:	80 95       	com	r24
 854:	90 95       	com	r25
 856:	9b 01       	movw	r18, r22
 858:	ac 01       	movw	r20, r24
 85a:	bd 01       	movw	r22, r26
 85c:	cf 01       	movw	r24, r30
 85e:	08 95       	ret

00000860 <_exit>:
 860:	f8 94       	cli

00000862 <__stop_program>:
 862:	ff cf       	rjmp	.-2      	; 0x862 <__stop_program>
