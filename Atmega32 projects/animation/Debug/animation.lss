
animation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f5a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000f5a  00000fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001560  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005b5  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 9a 02 	call	0x534	; 0x534 <main>
  7a:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2c 97       	sbiw	r28, 0x0c	; 12
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	69 87       	std	Y+9, r22	; 0x09
  98:	7a 87       	std	Y+10, r23	; 0x0a
  9a:	8b 87       	std	Y+11, r24	; 0x0b
  9c:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  9e:	89 85       	ldd	r24, Y+9	; 0x09
  a0:	9a 85       	ldd	r25, Y+10	; 0x0a
  a2:	ab 85       	ldd	r26, Y+11	; 0x0b
  a4:	bc 85       	ldd	r27, Y+12	; 0x0c
  a6:	22 e7       	ldi	r18, 0x72	; 114
  a8:	31 e0       	ldi	r19, 0x01	; 1
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	bc 01       	movw	r22, r24
  b0:	cd 01       	movw	r24, r26
  b2:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsi3>
  b6:	dc 01       	movw	r26, r24
  b8:	cb 01       	movw	r24, r22
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	ab 83       	std	Y+3, r26	; 0x03
  c0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  c2:	1d 82       	std	Y+5, r1	; 0x05
  c4:	1e 82       	std	Y+6, r1	; 0x06
  c6:	1f 82       	std	Y+7, r1	; 0x07
  c8:	18 86       	std	Y+8, r1	; 0x08
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <Delay_ms+0x62>
	{
		asm("nop");
  cc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  ce:	8d 81       	ldd	r24, Y+5	; 0x05
  d0:	9e 81       	ldd	r25, Y+6	; 0x06
  d2:	af 81       	ldd	r26, Y+7	; 0x07
  d4:	b8 85       	ldd	r27, Y+8	; 0x08
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	a1 1d       	adc	r26, r1
  da:	b1 1d       	adc	r27, r1
  dc:	8d 83       	std	Y+5, r24	; 0x05
  de:	9e 83       	std	Y+6, r25	; 0x06
  e0:	af 83       	std	Y+7, r26	; 0x07
  e2:	b8 87       	std	Y+8, r27	; 0x08
  e4:	2d 81       	ldd	r18, Y+5	; 0x05
  e6:	3e 81       	ldd	r19, Y+6	; 0x06
  e8:	4f 81       	ldd	r20, Y+7	; 0x07
  ea:	58 85       	ldd	r21, Y+8	; 0x08
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	ab 81       	ldd	r26, Y+3	; 0x03
  f2:	bc 81       	ldd	r27, Y+4	; 0x04
  f4:	28 17       	cp	r18, r24
  f6:	39 07       	cpc	r19, r25
  f8:	4a 07       	cpc	r20, r26
  fa:	5b 07       	cpc	r21, r27
  fc:	38 f3       	brcs	.-50     	; 0xcc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  fe:	2c 96       	adiw	r28, 0x0c	; 12
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	cf 91       	pop	r28
 10c:	df 91       	pop	r29
 10e:	08 95       	ret

00000110 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	2c 97       	sbiw	r28, 0x0c	; 12
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	69 87       	std	Y+9, r22	; 0x09
 126:	7a 87       	std	Y+10, r23	; 0x0a
 128:	8b 87       	std	Y+11, r24	; 0x0b
 12a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 12c:	89 85       	ldd	r24, Y+9	; 0x09
 12e:	9a 85       	ldd	r25, Y+10	; 0x0a
 130:	ab 85       	ldd	r26, Y+11	; 0x0b
 132:	bc 85       	ldd	r27, Y+12	; 0x0c
 134:	27 e7       	ldi	r18, 0x77	; 119
 136:	31 e0       	ldi	r19, 0x01	; 1
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	bc 01       	movw	r22, r24
 13e:	cd 01       	movw	r24, r26
 140:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsi3>
 144:	dc 01       	movw	r26, r24
 146:	cb 01       	movw	r24, r22
 148:	89 5d       	subi	r24, 0xD9	; 217
 14a:	94 44       	sbci	r25, 0x44	; 68
 14c:	a0 40       	sbci	r26, 0x00	; 0
 14e:	b0 40       	sbci	r27, 0x00	; 0
 150:	28 ee       	ldi	r18, 0xE8	; 232
 152:	33 e0       	ldi	r19, 0x03	; 3
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	bc 01       	movw	r22, r24
 15a:	cd 01       	movw	r24, r26
 15c:	0e 94 75 07 	call	0xeea	; 0xeea <__udivmodsi4>
 160:	da 01       	movw	r26, r20
 162:	c9 01       	movw	r24, r18
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	ab 83       	std	Y+3, r26	; 0x03
 16a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 16c:	1d 82       	std	Y+5, r1	; 0x05
 16e:	1e 82       	std	Y+6, r1	; 0x06
 170:	1f 82       	std	Y+7, r1	; 0x07
 172:	18 86       	std	Y+8, r1	; 0x08
 174:	0c c0       	rjmp	.+24     	; 0x18e <Delay_us+0x7e>
	{
		asm("nop");
 176:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	9e 81       	ldd	r25, Y+6	; 0x06
 17c:	af 81       	ldd	r26, Y+7	; 0x07
 17e:	b8 85       	ldd	r27, Y+8	; 0x08
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	8d 83       	std	Y+5, r24	; 0x05
 188:	9e 83       	std	Y+6, r25	; 0x06
 18a:	af 83       	std	Y+7, r26	; 0x07
 18c:	b8 87       	std	Y+8, r27	; 0x08
 18e:	2d 81       	ldd	r18, Y+5	; 0x05
 190:	3e 81       	ldd	r19, Y+6	; 0x06
 192:	4f 81       	ldd	r20, Y+7	; 0x07
 194:	58 85       	ldd	r21, Y+8	; 0x08
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	ab 81       	ldd	r26, Y+3	; 0x03
 19c:	bc 81       	ldd	r27, Y+4	; 0x04
 19e:	28 17       	cp	r18, r24
 1a0:	39 07       	cpc	r19, r25
 1a2:	4a 07       	cpc	r20, r26
 1a4:	5b 07       	cpc	r21, r27
 1a6:	38 f3       	brcs	.-50     	; 0x176 <Delay_us+0x66>
	{
		asm("nop");
	}
 1a8:	2c 96       	adiw	r28, 0x0c	; 12
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	08 95       	ret

000001ba <DIO_voidInitialize>:
#include "DIO_config.h"
#include "DIO_priv.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1c2:	ea e3       	ldi	r30, 0x3A	; 58
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1ca:	e7 e3       	ldi	r30, 0x37	; 55
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1d2:	e4 e3       	ldi	r30, 0x34	; 52
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1da:	e1 e3       	ldi	r30, 0x31	; 49
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	10 82       	st	Z, r1
}
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <DIO_voidSetPinValue+0x6>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	60 f5       	brcc	.+88     	; 0x252 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	88 23       	and	r24, r24
 1fe:	a1 f4       	brne	.+40     	; 0x228 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 200:	ab e3       	ldi	r26, 0x3B	; 59
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	eb e3       	ldi	r30, 0x3B	; 59
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_voidSetPinValue+0x38>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_voidSetPinValue+0x34>
 222:	84 2b       	or	r24, r20
 224:	8c 93       	st	X, r24
 226:	b3 c0       	rjmp	.+358    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 228:	ab e3       	ldi	r26, 0x3B	; 59
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	eb e3       	ldi	r30, 0x3B	; 59
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinValue+0x60>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinValue+0x5c>
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	8c 93       	st	X, r24
 250:	9e c0       	rjmp	.+316    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	90 f1       	brcs	.+100    	; 0x2bc <DIO_voidSetPinValue+0xd6>
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	80 31       	cpi	r24, 0x10	; 16
 25c:	78 f5       	brcc	.+94     	; 0x2bc <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	88 50       	subi	r24, 0x08	; 8
 262:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	88 23       	and	r24, r24
 268:	a1 f4       	brne	.+40     	; 0x292 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 26a:	a8 e3       	ldi	r26, 0x38	; 56
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e8 e3       	ldi	r30, 0x38	; 56
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	48 2f       	mov	r20, r24
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_voidSetPinValue+0xa2>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_voidSetPinValue+0x9e>
 28c:	84 2b       	or	r24, r20
 28e:	8c 93       	st	X, r24
 290:	7e c0       	rjmp	.+252    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 292:	a8 e3       	ldi	r26, 0x38	; 56
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	e8 e3       	ldi	r30, 0x38	; 56
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	48 2f       	mov	r20, r24
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 2e       	mov	r0, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_voidSetPinValue+0xca>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_voidSetPinValue+0xc6>
 2b4:	80 95       	com	r24
 2b6:	84 23       	and	r24, r20
 2b8:	8c 93       	st	X, r24
 2ba:	69 c0       	rjmp	.+210    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	80 31       	cpi	r24, 0x10	; 16
 2c0:	90 f1       	brcs	.+100    	; 0x326 <DIO_voidSetPinValue+0x140>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	88 31       	cpi	r24, 0x18	; 24
 2c6:	78 f5       	brcc	.+94     	; 0x326 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	80 51       	subi	r24, 0x10	; 16
 2cc:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	88 23       	and	r24, r24
 2d2:	a1 f4       	brne	.+40     	; 0x2fc <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2d4:	a5 e3       	ldi	r26, 0x35	; 53
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e5 e3       	ldi	r30, 0x35	; 53
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 2e       	mov	r0, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinValue+0x10c>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinValue+0x108>
 2f6:	84 2b       	or	r24, r20
 2f8:	8c 93       	st	X, r24
 2fa:	49 c0       	rjmp	.+146    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2fc:	a5 e3       	ldi	r26, 0x35	; 53
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e5 e3       	ldi	r30, 0x35	; 53
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	48 2f       	mov	r20, r24
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_voidSetPinValue+0x134>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_voidSetPinValue+0x130>
 31e:	80 95       	com	r24
 320:	84 23       	and	r24, r20
 322:	8c 93       	st	X, r24
 324:	34 c0       	rjmp	.+104    	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	88 31       	cpi	r24, 0x18	; 24
 32a:	88 f1       	brcs	.+98     	; 0x38e <DIO_voidSetPinValue+0x1a8>
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	80 32       	cpi	r24, 0x20	; 32
 330:	70 f5       	brcc	.+92     	; 0x38e <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 51       	subi	r24, 0x18	; 24
 336:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	88 23       	and	r24, r24
 33c:	a1 f4       	brne	.+40     	; 0x366 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 33e:	a2 e3       	ldi	r26, 0x32	; 50
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e2 e3       	ldi	r30, 0x32	; 50
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 2e       	mov	r0, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_voidSetPinValue+0x176>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_voidSetPinValue+0x172>
 360:	84 2b       	or	r24, r20
 362:	8c 93       	st	X, r24
 364:	14 c0       	rjmp	.+40     	; 0x38e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 366:	a2 e3       	ldi	r26, 0x32	; 50
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	e2 e3       	ldi	r30, 0x32	; 50
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	48 2f       	mov	r20, r24
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 2e       	mov	r0, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_voidSetPinValue+0x19e>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_voidSetPinValue+0x19a>
 388:	80 95       	com	r24
 38a:	84 23       	and	r24, r20
 38c:	8c 93       	st	X, r24
		}			
	}
}
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	cf 91       	pop	r28
 394:	df 91       	pop	r29
 396:	08 95       	ret

00000398 <LEDS_voidSetLedOn>:

#include "LEDS_priv.h"
#include "LEDS_config.h"
#include "LEDS_int.h"
void LEDS_voidSetLedOn(u8 u8LedPinCPY)
{
 398:	df 93       	push	r29
 39a:	cf 93       	push	r28
 39c:	00 d0       	rcall	.+0      	; 0x39e <LEDS_voidSetLedOn+0x6>
 39e:	0f 92       	push	r0
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	89 83       	std	Y+1, r24	; 0x01

	switch(u8LedPinCPY)
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	3b 83       	std	Y+3, r19	; 0x03
 3ae:	2a 83       	std	Y+2, r18	; 0x02
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	9b 81       	ldd	r25, Y+3	; 0x03
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	91 05       	cpc	r25, r1
 3b8:	c1 f1       	breq	.+112    	; 0x42a <LEDS_voidSetLedOn+0x92>
 3ba:	2a 81       	ldd	r18, Y+2	; 0x02
 3bc:	3b 81       	ldd	r19, Y+3	; 0x03
 3be:	24 30       	cpi	r18, 0x04	; 4
 3c0:	31 05       	cpc	r19, r1
 3c2:	7c f4       	brge	.+30     	; 0x3e2 <LEDS_voidSetLedOn+0x4a>
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	9b 81       	ldd	r25, Y+3	; 0x03
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	91 05       	cpc	r25, r1
 3cc:	21 f1       	breq	.+72     	; 0x416 <LEDS_voidSetLedOn+0x7e>
 3ce:	2a 81       	ldd	r18, Y+2	; 0x02
 3d0:	3b 81       	ldd	r19, Y+3	; 0x03
 3d2:	22 30       	cpi	r18, 0x02	; 2
 3d4:	31 05       	cpc	r19, r1
 3d6:	24 f5       	brge	.+72     	; 0x420 <LEDS_voidSetLedOn+0x88>
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	9b 81       	ldd	r25, Y+3	; 0x03
 3dc:	00 97       	sbiw	r24, 0x00	; 0
 3de:	b1 f0       	breq	.+44     	; 0x40c <LEDS_voidSetLedOn+0x74>
 3e0:	3c c0       	rjmp	.+120    	; 0x45a <LEDS_voidSetLedOn+0xc2>
 3e2:	2a 81       	ldd	r18, Y+2	; 0x02
 3e4:	3b 81       	ldd	r19, Y+3	; 0x03
 3e6:	25 30       	cpi	r18, 0x05	; 5
 3e8:	31 05       	cpc	r19, r1
 3ea:	49 f1       	breq	.+82     	; 0x43e <LEDS_voidSetLedOn+0xa6>
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	9b 81       	ldd	r25, Y+3	; 0x03
 3f0:	85 30       	cpi	r24, 0x05	; 5
 3f2:	91 05       	cpc	r25, r1
 3f4:	fc f0       	brlt	.+62     	; 0x434 <LEDS_voidSetLedOn+0x9c>
 3f6:	2a 81       	ldd	r18, Y+2	; 0x02
 3f8:	3b 81       	ldd	r19, Y+3	; 0x03
 3fa:	26 30       	cpi	r18, 0x06	; 6
 3fc:	31 05       	cpc	r19, r1
 3fe:	21 f1       	breq	.+72     	; 0x448 <LEDS_voidSetLedOn+0xb0>
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	9b 81       	ldd	r25, Y+3	; 0x03
 404:	87 30       	cpi	r24, 0x07	; 7
 406:	91 05       	cpc	r25, r1
 408:	21 f1       	breq	.+72     	; 0x452 <LEDS_voidSetLedOn+0xba>
 40a:	27 c0       	rjmp	.+78     	; 0x45a <LEDS_voidSetLedOn+0xc2>
	{
	case LEDS_u8_LED0:
#if LEDS_u8_MODE0 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN0,DIO_u8_HIGH);
 40c:	88 e0       	ldi	r24, 0x08	; 8
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 414:	22 c0       	rjmp	.+68     	; 0x45a <LEDS_voidSetLedOn+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN0,DIO_u8_LOW);
#endif
		break;
	case LEDS_u8_LED1:
#if LEDS_u8_MODE1 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN1,DIO_u8_HIGH);
 416:	89 e0       	ldi	r24, 0x09	; 9
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 41e:	1d c0       	rjmp	.+58     	; 0x45a <LEDS_voidSetLedOn+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN1,DIO_u8_LOW);
#endif
		break;
	case LEDS_u8_LED2:
#if LEDS_u8_MODE2 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN2,DIO_u8_HIGH);
 420:	8a e0       	ldi	r24, 0x0A	; 10
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 428:	18 c0       	rjmp	.+48     	; 0x45a <LEDS_voidSetLedOn+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN2,DIO_u8_LOW);
#endif
		break;
	case LEDS_u8_LED3:
#if LEDS_u8_MODE3 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN3,DIO_u8_HIGH);
 42a:	8b e0       	ldi	r24, 0x0B	; 11
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 432:	13 c0       	rjmp	.+38     	; 0x45a <LEDS_voidSetLedOn+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN3,DIO_u8_LOW);
#endif
		break;
	case LEDS_u8_LED4:
#if LEDS_u8_MODE4 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN4,DIO_u8_HIGH);
 434:	8c e0       	ldi	r24, 0x0C	; 12
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 43c:	0e c0       	rjmp	.+28     	; 0x45a <LEDS_voidSetLedOn+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN4,DIO_u8_LOW);
#endif
		break;
	case LEDS_u8_LED5:
#if LEDS_u8_MODE5 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN5,DIO_u8_HIGH);
 43e:	8d e0       	ldi	r24, 0x0D	; 13
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 446:	09 c0       	rjmp	.+18     	; 0x45a <LEDS_voidSetLedOn+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN5,DIO_u8_LOW);
#endif
		break;
	case LEDS_u8_LED6:
#if LEDS_u8_MODE6 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN6,DIO_u8_HIGH);
 448:	8e e0       	ldi	r24, 0x0E	; 14
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 450:	04 c0       	rjmp	.+8      	; 0x45a <LEDS_voidSetLedOn+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN6,DIO_u8_LOW);
#endif
		break;
	case LEDS_u8_LED7:
#if LEDS_u8_MODE7 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN7,DIO_u8_HIGH);
 452:	8f e0       	ldi	r24, 0x0F	; 15
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LEDS_u8_PIN7,DIO_u8_LOW);
#endif
		break;
	}

}
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	cf 91       	pop	r28
 462:	df 91       	pop	r29
 464:	08 95       	ret

00000466 <LEDS_voidSetLedOff>:
void LEDS_voidSetLedOff(u8 u8LedPinCPY)
{
 466:	df 93       	push	r29
 468:	cf 93       	push	r28
 46a:	00 d0       	rcall	.+0      	; 0x46c <LEDS_voidSetLedOff+0x6>
 46c:	0f 92       	push	r0
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	89 83       	std	Y+1, r24	; 0x01
	switch(u8LedPinCPY)
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	3b 83       	std	Y+3, r19	; 0x03
 47c:	2a 83       	std	Y+2, r18	; 0x02
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	9b 81       	ldd	r25, Y+3	; 0x03
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	91 05       	cpc	r25, r1
 486:	c1 f1       	breq	.+112    	; 0x4f8 <LEDS_voidSetLedOff+0x92>
 488:	2a 81       	ldd	r18, Y+2	; 0x02
 48a:	3b 81       	ldd	r19, Y+3	; 0x03
 48c:	24 30       	cpi	r18, 0x04	; 4
 48e:	31 05       	cpc	r19, r1
 490:	7c f4       	brge	.+30     	; 0x4b0 <LEDS_voidSetLedOff+0x4a>
 492:	8a 81       	ldd	r24, Y+2	; 0x02
 494:	9b 81       	ldd	r25, Y+3	; 0x03
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	91 05       	cpc	r25, r1
 49a:	21 f1       	breq	.+72     	; 0x4e4 <LEDS_voidSetLedOff+0x7e>
 49c:	2a 81       	ldd	r18, Y+2	; 0x02
 49e:	3b 81       	ldd	r19, Y+3	; 0x03
 4a0:	22 30       	cpi	r18, 0x02	; 2
 4a2:	31 05       	cpc	r19, r1
 4a4:	24 f5       	brge	.+72     	; 0x4ee <LEDS_voidSetLedOff+0x88>
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	9b 81       	ldd	r25, Y+3	; 0x03
 4aa:	00 97       	sbiw	r24, 0x00	; 0
 4ac:	b1 f0       	breq	.+44     	; 0x4da <LEDS_voidSetLedOff+0x74>
 4ae:	3c c0       	rjmp	.+120    	; 0x528 <LEDS_voidSetLedOff+0xc2>
 4b0:	2a 81       	ldd	r18, Y+2	; 0x02
 4b2:	3b 81       	ldd	r19, Y+3	; 0x03
 4b4:	25 30       	cpi	r18, 0x05	; 5
 4b6:	31 05       	cpc	r19, r1
 4b8:	49 f1       	breq	.+82     	; 0x50c <LEDS_voidSetLedOff+0xa6>
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	9b 81       	ldd	r25, Y+3	; 0x03
 4be:	85 30       	cpi	r24, 0x05	; 5
 4c0:	91 05       	cpc	r25, r1
 4c2:	fc f0       	brlt	.+62     	; 0x502 <LEDS_voidSetLedOff+0x9c>
 4c4:	2a 81       	ldd	r18, Y+2	; 0x02
 4c6:	3b 81       	ldd	r19, Y+3	; 0x03
 4c8:	26 30       	cpi	r18, 0x06	; 6
 4ca:	31 05       	cpc	r19, r1
 4cc:	21 f1       	breq	.+72     	; 0x516 <LEDS_voidSetLedOff+0xb0>
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	9b 81       	ldd	r25, Y+3	; 0x03
 4d2:	87 30       	cpi	r24, 0x07	; 7
 4d4:	91 05       	cpc	r25, r1
 4d6:	21 f1       	breq	.+72     	; 0x520 <LEDS_voidSetLedOff+0xba>
 4d8:	27 c0       	rjmp	.+78     	; 0x528 <LEDS_voidSetLedOff+0xc2>
	{
	case LEDS_u8_LED0:
#if LEDS_u8_MODE0 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN0,DIO_u8_LOW);
 4da:	88 e0       	ldi	r24, 0x08	; 8
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 4e2:	22 c0       	rjmp	.+68     	; 0x528 <LEDS_voidSetLedOff+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN0,DIO_u8_HIGH);
#endif
		break;
	case LEDS_u8_LED1:
#if LEDS_u8_MODE1 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN1,DIO_u8_LOW);
 4e4:	89 e0       	ldi	r24, 0x09	; 9
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <LEDS_voidSetLedOff+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN1,DIO_u8_HIGH);
#endif
		break;
	case LEDS_u8_LED2:
#if LEDS_u8_MODE2 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN2,DIO_u8_LOW);
 4ee:	8a e0       	ldi	r24, 0x0A	; 10
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 4f6:	18 c0       	rjmp	.+48     	; 0x528 <LEDS_voidSetLedOff+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN2,DIO_u8_HIGH);
#endif
		break;
	case LEDS_u8_LED3:
#if LEDS_u8_MODE3 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN3,DIO_u8_LOW);
 4f8:	8b e0       	ldi	r24, 0x0B	; 11
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 500:	13 c0       	rjmp	.+38     	; 0x528 <LEDS_voidSetLedOff+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN3,DIO_u8_HIGH);
#endif
		break;
	case LEDS_u8_LED4:
#if LEDS_u8_MODE4 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN4,DIO_u8_LOW);
 502:	8c e0       	ldi	r24, 0x0C	; 12
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 50a:	0e c0       	rjmp	.+28     	; 0x528 <LEDS_voidSetLedOff+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN4,DIO_u8_HIGH);
#endif
		break;
	case LEDS_u8_LED5:
#if LEDS_u8_MODE5 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN5,DIO_u8_LOW);
 50c:	8d e0       	ldi	r24, 0x0D	; 13
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 514:	09 c0       	rjmp	.+18     	; 0x528 <LEDS_voidSetLedOff+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN5,DIO_u8_HIGH);
#endif
		break;
	case LEDS_u8_LED6:
#if LEDS_u8_MODE6 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN6,DIO_u8_LOW);
 516:	8e e0       	ldi	r24, 0x0E	; 14
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
 51e:	04 c0       	rjmp	.+8      	; 0x528 <LEDS_voidSetLedOff+0xc2>
		DIO_voidSetPinValue(LEDS_u8_PIN6,DIO_u8_HIGH);
#endif
		break;
	case LEDS_u8_LED7:
#if LEDS_u8_MODE7 == LEDS_u8_NORMAL
		DIO_voidSetPinValue(LEDS_u8_PIN7,DIO_u8_LOW);
 520:	8f e0       	ldi	r24, 0x0F	; 15
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
#else
		DIO_voidSetPinValue(LEDS_u8_PIN7,DIO_u8_HIGH);
#endif
		break;
	}
}
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	cf 91       	pop	r28
 530:	df 91       	pop	r29
 532:	08 95       	ret

00000534 <main>:
void voidAnimationFour(u8 u8SegDigit1,u8 u8SegDigit2);
void voidAnimationFive(u8 u8SegDigit1,u8 u8SegDigit2);
void voidAnimationSix(u8 u8SegDigit1,u8 u8SegDigit2);
void voidDisplayOnSeg(u8 u8Seg1Cpy,u8 u8Seg2Cpy);
int main (void)
{
 534:	df 93       	push	r29
 536:	cf 93       	push	r28
 538:	00 d0       	rcall	.+0      	; 0x53a <main+0x6>
 53a:	0f 92       	push	r0
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
	u8 u8AnimationNumber;
	u8 u8SegDigit1;
	u8 u8SegDigit2;
	DIO_voidInitialize();
 540:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_voidInitialize>
	while(1)
	{
		/*PORTA for Segment*/
		/*PORTB for Led*/
		/*PORTC pin 0 , 1 for Common Anode*/
		u8AnimationNumber=U8_FIRST_ANIMATION;/*First Animation*/
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	9a e0       	ldi	r25, 0x0A	; 10
 54c:	69 2f       	mov	r22, r25
 54e:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 552:	89 2f       	mov	r24, r25
 554:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 556:	8b 81       	ldd	r24, Y+3	; 0x03
 558:	9a e0       	ldi	r25, 0x0A	; 10
 55a:	69 2f       	mov	r22, r25
 55c:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 560:	9a e0       	ldi	r25, 0x0A	; 10
 562:	69 2f       	mov	r22, r25
 564:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 568:	89 2f       	mov	r24, r25
 56a:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationOne(u8SegDigit1,u8SegDigit2);
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	69 81       	ldd	r22, Y+1	; 0x01
 570:	0e 94 0a 04 	call	0x814	; 0x814 <voidAnimationOne>

		u8AnimationNumber++;/*Second Animation*/
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	9a e0       	ldi	r25, 0x0A	; 10
 57e:	69 2f       	mov	r22, r25
 580:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 584:	89 2f       	mov	r24, r25
 586:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	9a e0       	ldi	r25, 0x0A	; 10
 58c:	69 2f       	mov	r22, r25
 58e:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 592:	9a e0       	ldi	r25, 0x0A	; 10
 594:	69 2f       	mov	r22, r25
 596:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 59a:	89 2f       	mov	r24, r25
 59c:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationTwo(u8SegDigit1,u8SegDigit2);
 59e:	8a 81       	ldd	r24, Y+2	; 0x02
 5a0:	69 81       	ldd	r22, Y+1	; 0x01
 5a2:	0e 94 ef 04 	call	0x9de	; 0x9de <voidAnimationTwo>

		u8AnimationNumber++;/*Third Animation*/
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	9a e0       	ldi	r25, 0x0A	; 10
 5b0:	69 2f       	mov	r22, r25
 5b2:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 5b6:	89 2f       	mov	r24, r25
 5b8:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	9a e0       	ldi	r25, 0x0A	; 10
 5be:	69 2f       	mov	r22, r25
 5c0:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 5c4:	9a e0       	ldi	r25, 0x0A	; 10
 5c6:	69 2f       	mov	r22, r25
 5c8:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 5cc:	89 2f       	mov	r24, r25
 5ce:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationThree(u8SegDigit1,u8SegDigit2);
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	69 81       	ldd	r22, Y+1	; 0x01
 5d4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <voidAnimationThree>

		u8AnimationNumber++;/*Fourth Animation*/
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	8f 5f       	subi	r24, 0xFF	; 255
 5dc:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	9a e0       	ldi	r25, 0x0A	; 10
 5e2:	69 2f       	mov	r22, r25
 5e4:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 5e8:	89 2f       	mov	r24, r25
 5ea:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	9a e0       	ldi	r25, 0x0A	; 10
 5f0:	69 2f       	mov	r22, r25
 5f2:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 5f6:	9a e0       	ldi	r25, 0x0A	; 10
 5f8:	69 2f       	mov	r22, r25
 5fa:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 5fe:	89 2f       	mov	r24, r25
 600:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationFour(u8SegDigit1,u8SegDigit2);
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	69 81       	ldd	r22, Y+1	; 0x01
 606:	0e 94 96 05 	call	0xb2c	; 0xb2c <voidAnimationFour>

		u8AnimationNumber++;/*FiFth Animation*/
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	9a e0       	ldi	r25, 0x0A	; 10
 614:	69 2f       	mov	r22, r25
 616:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 61a:	89 2f       	mov	r24, r25
 61c:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	9a e0       	ldi	r25, 0x0A	; 10
 622:	69 2f       	mov	r22, r25
 624:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 628:	9a e0       	ldi	r25, 0x0A	; 10
 62a:	69 2f       	mov	r22, r25
 62c:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 630:	89 2f       	mov	r24, r25
 632:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationThree(u8SegDigit1,u8SegDigit2);
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	69 81       	ldd	r22, Y+1	; 0x01
 638:	0e 94 3f 05 	call	0xa7e	; 0xa7e <voidAnimationThree>

		u8AnimationNumber++;/*Sixth Animation*/
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	8f 5f       	subi	r24, 0xFF	; 255
 640:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	9a e0       	ldi	r25, 0x0A	; 10
 646:	69 2f       	mov	r22, r25
 648:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 64c:	89 2f       	mov	r24, r25
 64e:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	9a e0       	ldi	r25, 0x0A	; 10
 654:	69 2f       	mov	r22, r25
 656:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 65a:	9a e0       	ldi	r25, 0x0A	; 10
 65c:	69 2f       	mov	r22, r25
 65e:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 662:	89 2f       	mov	r24, r25
 664:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationTwo(u8SegDigit1,u8SegDigit2);
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	69 81       	ldd	r22, Y+1	; 0x01
 66a:	0e 94 ef 04 	call	0x9de	; 0x9de <voidAnimationTwo>


		u8AnimationNumber++;/*Seventh Animation*/
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	8f 5f       	subi	r24, 0xFF	; 255
 672:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	9a e0       	ldi	r25, 0x0A	; 10
 678:	69 2f       	mov	r22, r25
 67a:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 67e:	89 2f       	mov	r24, r25
 680:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	9a e0       	ldi	r25, 0x0A	; 10
 686:	69 2f       	mov	r22, r25
 688:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 68c:	9a e0       	ldi	r25, 0x0A	; 10
 68e:	69 2f       	mov	r22, r25
 690:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 694:	89 2f       	mov	r24, r25
 696:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationOne(u8SegDigit1,u8SegDigit2);
 698:	8a 81       	ldd	r24, Y+2	; 0x02
 69a:	69 81       	ldd	r22, Y+1	; 0x01
 69c:	0e 94 0a 04 	call	0x814	; 0x814 <voidAnimationOne>

		u8AnimationNumber++;/*Eight Animation*/
 6a0:	8b 81       	ldd	r24, Y+3	; 0x03
 6a2:	8f 5f       	subi	r24, 0xFF	; 255
 6a4:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
 6a8:	9a e0       	ldi	r25, 0x0A	; 10
 6aa:	69 2f       	mov	r22, r25
 6ac:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 6b0:	89 2f       	mov	r24, r25
 6b2:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 6b4:	8b 81       	ldd	r24, Y+3	; 0x03
 6b6:	9a e0       	ldi	r25, 0x0A	; 10
 6b8:	69 2f       	mov	r22, r25
 6ba:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 6be:	9a e0       	ldi	r25, 0x0A	; 10
 6c0:	69 2f       	mov	r22, r25
 6c2:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 6c6:	89 2f       	mov	r24, r25
 6c8:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationThree(u8SegDigit1,u8SegDigit2);
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	69 81       	ldd	r22, Y+1	; 0x01
 6ce:	0e 94 3f 05 	call	0xa7e	; 0xa7e <voidAnimationThree>

		u8AnimationNumber++;/*ninth Animation*/
 6d2:	8b 81       	ldd	r24, Y+3	; 0x03
 6d4:	8f 5f       	subi	r24, 0xFF	; 255
 6d6:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 6d8:	8b 81       	ldd	r24, Y+3	; 0x03
 6da:	9a e0       	ldi	r25, 0x0A	; 10
 6dc:	69 2f       	mov	r22, r25
 6de:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 6e2:	89 2f       	mov	r24, r25
 6e4:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 6e6:	8b 81       	ldd	r24, Y+3	; 0x03
 6e8:	9a e0       	ldi	r25, 0x0A	; 10
 6ea:	69 2f       	mov	r22, r25
 6ec:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 6f0:	9a e0       	ldi	r25, 0x0A	; 10
 6f2:	69 2f       	mov	r22, r25
 6f4:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 6f8:	89 2f       	mov	r24, r25
 6fa:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationTwo(u8SegDigit1,u8SegDigit2);
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	69 81       	ldd	r22, Y+1	; 0x01
 700:	0e 94 ef 04 	call	0x9de	; 0x9de <voidAnimationTwo>

		u8AnimationNumber++;/*Tenth Animation*/
 704:	8b 81       	ldd	r24, Y+3	; 0x03
 706:	8f 5f       	subi	r24, 0xFF	; 255
 708:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	9a e0       	ldi	r25, 0x0A	; 10
 70e:	69 2f       	mov	r22, r25
 710:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 714:	89 2f       	mov	r24, r25
 716:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	9a e0       	ldi	r25, 0x0A	; 10
 71c:	69 2f       	mov	r22, r25
 71e:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 722:	9a e0       	ldi	r25, 0x0A	; 10
 724:	69 2f       	mov	r22, r25
 726:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 72a:	89 2f       	mov	r24, r25
 72c:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationOne(u8SegDigit1,u8SegDigit2);
 72e:	8a 81       	ldd	r24, Y+2	; 0x02
 730:	69 81       	ldd	r22, Y+1	; 0x01
 732:	0e 94 0a 04 	call	0x814	; 0x814 <voidAnimationOne>

		u8AnimationNumber++;/*Eleventh Animation*/
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	8f 5f       	subi	r24, 0xFF	; 255
 73a:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	9a e0       	ldi	r25, 0x0A	; 10
 740:	69 2f       	mov	r22, r25
 742:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 746:	89 2f       	mov	r24, r25
 748:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 74a:	8b 81       	ldd	r24, Y+3	; 0x03
 74c:	9a e0       	ldi	r25, 0x0A	; 10
 74e:	69 2f       	mov	r22, r25
 750:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 754:	9a e0       	ldi	r25, 0x0A	; 10
 756:	69 2f       	mov	r22, r25
 758:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 75c:	89 2f       	mov	r24, r25
 75e:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationFive(u8SegDigit1,u8SegDigit2);
 760:	8a 81       	ldd	r24, Y+2	; 0x02
 762:	69 81       	ldd	r22, Y+1	; 0x01
 764:	0e 94 47 06 	call	0xc8e	; 0xc8e <voidAnimationFive>

		u8AnimationNumber++;/*twelve Animation*/
 768:	8b 81       	ldd	r24, Y+3	; 0x03
 76a:	8f 5f       	subi	r24, 0xFF	; 255
 76c:	8b 83       	std	Y+3, r24	; 0x03
		u8SegDigit1=u8AnimationNumber % U8_DECIMAL_DIVIDOR_CONVERTER;
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	9a e0       	ldi	r25, 0x0A	; 10
 772:	69 2f       	mov	r22, r25
 774:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 778:	89 2f       	mov	r24, r25
 77a:	8a 83       	std	Y+2, r24	; 0x02
		u8SegDigit2=(u8AnimationNumber/U8_DECIMAL_DIVIDOR_CONVERTER)%U8_DECIMAL_DIVIDOR_CONVERTER;
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	9a e0       	ldi	r25, 0x0A	; 10
 780:	69 2f       	mov	r22, r25
 782:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 786:	9a e0       	ldi	r25, 0x0A	; 10
 788:	69 2f       	mov	r22, r25
 78a:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodqi4>
 78e:	89 2f       	mov	r24, r25
 790:	89 83       	std	Y+1, r24	; 0x01
		voidAnimationSix(u8SegDigit1,u8SegDigit2);
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	69 81       	ldd	r22, Y+1	; 0x01
 796:	0e 94 bf 06 	call	0xd7e	; 0xd7e <voidAnimationSix>
 79a:	d4 ce       	rjmp	.-600    	; 0x544 <main+0x10>

0000079c <voidDisplayOnSeg>:
	}
}
void voidDisplayOnSeg(u8 u8Seg1Cpy,u8 u8Seg2Cpy)
{
 79c:	df 93       	push	r29
 79e:	cf 93       	push	r28
 7a0:	00 d0       	rcall	.+0      	; 0x7a2 <voidDisplayOnSeg+0x6>
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62
 7a6:	89 83       	std	Y+1, r24	; 0x01
 7a8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_HIGH);
 7aa:	80 e1       	ldi	r24, 0x10	; 16
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	PORTA=segtable[u8Seg1Cpy];
 7b2:	ab e3       	ldi	r26, 0x3B	; 59
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	88 2f       	mov	r24, r24
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	fc 01       	movw	r30, r24
 7be:	e0 5a       	subi	r30, 0xA0	; 160
 7c0:	ff 4f       	sbci	r31, 0xFF	; 255
 7c2:	80 81       	ld	r24, Z
 7c4:	8c 93       	st	X, r24
	Delay_ms(1);
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
	DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_LOW);
 7d2:	80 e1       	ldi	r24, 0x10	; 16
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_17,DIO_u8_HIGH);
 7da:	81 e1       	ldi	r24, 0x11	; 17
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
	PORTA=segtable[u8Seg2Cpy];
 7e2:	ab e3       	ldi	r26, 0x3B	; 59
 7e4:	b0 e0       	ldi	r27, 0x00	; 0
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	88 2f       	mov	r24, r24
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	fc 01       	movw	r30, r24
 7ee:	e0 5a       	subi	r30, 0xA0	; 160
 7f0:	ff 4f       	sbci	r31, 0xFF	; 255
 7f2:	80 81       	ld	r24, Z
 7f4:	8c 93       	st	X, r24
	Delay_ms(1);
 7f6:	61 e0       	ldi	r22, 0x01	; 1
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 41 00 	call	0x82	; 0x82 <Delay_ms>
	DIO_voidSetPinValue(DIO_u8_PIN_17,DIO_u8_LOW);
 802:	81 e1       	ldi	r24, 0x11	; 17
 804:	61 e0       	ldi	r22, 0x01	; 1
 806:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_voidSetPinValue>
}
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	cf 91       	pop	r28
 810:	df 91       	pop	r29
 812:	08 95       	ret

00000814 <voidAnimationOne>:
void voidAnimationOne(u8 u8SegDigit1,u8 u8SegDigit2)
{
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	00 d0       	rcall	.+0      	; 0x81a <voidAnimationOne+0x6>
 81a:	00 d0       	rcall	.+0      	; 0x81c <voidAnimationOne+0x8>
 81c:	00 d0       	rcall	.+0      	; 0x81e <voidAnimationOne+0xa>
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
 822:	8d 83       	std	Y+5, r24	; 0x05
 824:	6e 83       	std	Y+6, r22	; 0x06

	for(u8 u8IndexLoc=0;u8IndexLoc< LEDS_u8_NUMBEROFLEDS;u8IndexLoc++)
 826:	1c 82       	std	Y+4, r1	; 0x04
 828:	63 c0       	rjmp	.+198    	; 0x8f0 <__stack+0x91>
	{
		LEDS_voidSetLedOn(u8IndexLoc%LEDS_u8_NUMBEROFLEDS);
 82a:	8c 81       	ldd	r24, Y+4	; 0x04
 82c:	87 70       	andi	r24, 0x07	; 7
 82e:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX1)%LEDS_u8_NUMBEROFLEDS);
 832:	8c 81       	ldd	r24, Y+4	; 0x04
 834:	88 2f       	mov	r24, r24
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	28 e0       	ldi	r18, 0x08	; 8
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	b9 01       	movw	r22, r18
 840:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 844:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX2)%LEDS_u8_NUMBEROFLEDS);
 848:	8c 81       	ldd	r24, Y+4	; 0x04
 84a:	88 2f       	mov	r24, r24
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 96       	adiw	r24, 0x02	; 2
 850:	28 e0       	ldi	r18, 0x08	; 8
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	b9 01       	movw	r22, r18
 856:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 85a:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX3)%LEDS_u8_NUMBEROFLEDS);
 85e:	8c 81       	ldd	r24, Y+4	; 0x04
 860:	88 2f       	mov	r24, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	03 96       	adiw	r24, 0x03	; 3
 866:	28 e0       	ldi	r18, 0x08	; 8
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	b9 01       	movw	r22, r18
 86c:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 870:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX4)%LEDS_u8_NUMBEROFLEDS);
 874:	8c 81       	ldd	r24, Y+4	; 0x04
 876:	88 2f       	mov	r24, r24
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	04 96       	adiw	r24, 0x04	; 4
 87c:	28 e0       	ldi	r18, 0x08	; 8
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	b9 01       	movw	r22, r18
 882:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 886:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX5)%LEDS_u8_NUMBEROFLEDS);
 88a:	8c 81       	ldd	r24, Y+4	; 0x04
 88c:	88 2f       	mov	r24, r24
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	05 96       	adiw	r24, 0x05	; 5
 892:	28 e0       	ldi	r18, 0x08	; 8
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	b9 01       	movw	r22, r18
 898:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 89c:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
 8a0:	8c 81       	ldd	r24, Y+4	; 0x04
 8a2:	88 2f       	mov	r24, r24
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	06 96       	adiw	r24, 0x06	; 6
 8a8:	28 e0       	ldi	r18, 0x08	; 8
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	b9 01       	movw	r22, r18
 8ae:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 8b2:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX7)%LEDS_u8_NUMBEROFLEDS);
 8b6:	8c 81       	ldd	r24, Y+4	; 0x04
 8b8:	88 2f       	mov	r24, r24
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	07 96       	adiw	r24, 0x07	; 7
 8be:	28 e0       	ldi	r18, 0x08	; 8
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	b9 01       	movw	r22, r18
 8c4:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 8c8:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		if(u8IndexLoc!=u8_INDEX7)
 8cc:	8c 81       	ldd	r24, Y+4	; 0x04
 8ce:	87 30       	cpi	r24, 0x07	; 7
 8d0:	61 f0       	breq	.+24     	; 0x8ea <__stack+0x8b>
		for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_1_COUNTER;u8DelayCounter++)
 8d2:	1b 82       	std	Y+3, r1	; 0x03
 8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <__stack+0x85>
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 8d6:	8d 81       	ldd	r24, Y+5	; 0x05
 8d8:	6e 81       	ldd	r22, Y+6	; 0x06
 8da:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX4)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX5)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX7)%LEDS_u8_NUMBEROFLEDS);
		if(u8IndexLoc!=u8_INDEX7)
		for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_1_COUNTER;u8DelayCounter++)
 8de:	8b 81       	ldd	r24, Y+3	; 0x03
 8e0:	8f 5f       	subi	r24, 0xFF	; 255
 8e2:	8b 83       	std	Y+3, r24	; 0x03
 8e4:	8b 81       	ldd	r24, Y+3	; 0x03
 8e6:	84 36       	cpi	r24, 0x64	; 100
 8e8:	b0 f3       	brcs	.-20     	; 0x8d6 <__stack+0x77>
	DIO_voidSetPinValue(DIO_u8_PIN_17,DIO_u8_LOW);
}
void voidAnimationOne(u8 u8SegDigit1,u8 u8SegDigit2)
{

	for(u8 u8IndexLoc=0;u8IndexLoc< LEDS_u8_NUMBEROFLEDS;u8IndexLoc++)
 8ea:	8c 81       	ldd	r24, Y+4	; 0x04
 8ec:	8f 5f       	subi	r24, 0xFF	; 255
 8ee:	8c 83       	std	Y+4, r24	; 0x04
 8f0:	8c 81       	ldd	r24, Y+4	; 0x04
 8f2:	88 30       	cpi	r24, 0x08	; 8
 8f4:	08 f4       	brcc	.+2      	; 0x8f8 <__stack+0x99>
 8f6:	99 cf       	rjmp	.-206    	; 0x82a <voidAnimationOne+0x16>
		if(u8IndexLoc!=u8_INDEX7)
		for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_1_COUNTER;u8DelayCounter++)
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
	}

	for(u8 u8IndexLoc=LEDS_u8_NUMBEROFLEDS;u8IndexLoc>u8_INDEX0;u8IndexLoc--)
 8f8:	88 e0       	ldi	r24, 0x08	; 8
 8fa:	8a 83       	std	Y+2, r24	; 0x02
 8fc:	63 c0       	rjmp	.+198    	; 0x9c4 <__stack+0x165>
	{
		LEDS_voidSetLedOn((u8IndexLoc-u8_INDEX1)%LEDS_u8_NUMBEROFLEDS);
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	88 2f       	mov	r24, r24
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	28 e0       	ldi	r18, 0x08	; 8
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	b9 01       	movw	r22, r18
 90c:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 910:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOff((u8IndexLoc)%LEDS_u8_NUMBEROFLEDS);
 914:	8a 81       	ldd	r24, Y+2	; 0x02
 916:	87 70       	andi	r24, 0x07	; 7
 918:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX1)%LEDS_u8_NUMBEROFLEDS);
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	88 2f       	mov	r24, r24
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	28 e0       	ldi	r18, 0x08	; 8
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	b9 01       	movw	r22, r18
 92a:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 92e:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX2)%LEDS_u8_NUMBEROFLEDS);
 932:	8a 81       	ldd	r24, Y+2	; 0x02
 934:	88 2f       	mov	r24, r24
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	02 96       	adiw	r24, 0x02	; 2
 93a:	28 e0       	ldi	r18, 0x08	; 8
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	b9 01       	movw	r22, r18
 940:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 944:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX3)%LEDS_u8_NUMBEROFLEDS);
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	88 2f       	mov	r24, r24
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	03 96       	adiw	r24, 0x03	; 3
 950:	28 e0       	ldi	r18, 0x08	; 8
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	b9 01       	movw	r22, r18
 956:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 95a:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX4)%LEDS_u8_NUMBEROFLEDS);
 95e:	8a 81       	ldd	r24, Y+2	; 0x02
 960:	88 2f       	mov	r24, r24
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	04 96       	adiw	r24, 0x04	; 4
 966:	28 e0       	ldi	r18, 0x08	; 8
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	b9 01       	movw	r22, r18
 96c:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 970:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX5)%LEDS_u8_NUMBEROFLEDS);
 974:	8a 81       	ldd	r24, Y+2	; 0x02
 976:	88 2f       	mov	r24, r24
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	05 96       	adiw	r24, 0x05	; 5
 97c:	28 e0       	ldi	r18, 0x08	; 8
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	b9 01       	movw	r22, r18
 982:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 986:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
 98a:	8a 81       	ldd	r24, Y+2	; 0x02
 98c:	88 2f       	mov	r24, r24
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	06 96       	adiw	r24, 0x06	; 6
 992:	28 e0       	ldi	r18, 0x08	; 8
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	b9 01       	movw	r22, r18
 998:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 99c:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		if (u8IndexLoc!=u8_INDEX1)
 9a0:	8a 81       	ldd	r24, Y+2	; 0x02
 9a2:	81 30       	cpi	r24, 0x01	; 1
 9a4:	61 f0       	breq	.+24     	; 0x9be <__stack+0x15f>
			for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_1_COUNTER;u8DelayCounter++)
 9a6:	19 82       	std	Y+1, r1	; 0x01
 9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__stack+0x159>
				voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 9aa:	8d 81       	ldd	r24, Y+5	; 0x05
 9ac:	6e 81       	ldd	r22, Y+6	; 0x06
 9ae:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX3)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX4)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX5)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
		if (u8IndexLoc!=u8_INDEX1)
			for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_1_COUNTER;u8DelayCounter++)
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	8f 5f       	subi	r24, 0xFF	; 255
 9b6:	89 83       	std	Y+1, r24	; 0x01
 9b8:	89 81       	ldd	r24, Y+1	; 0x01
 9ba:	84 36       	cpi	r24, 0x64	; 100
 9bc:	b0 f3       	brcs	.-20     	; 0x9aa <__stack+0x14b>
		if(u8IndexLoc!=u8_INDEX7)
		for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_1_COUNTER;u8DelayCounter++)
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
	}

	for(u8 u8IndexLoc=LEDS_u8_NUMBEROFLEDS;u8IndexLoc>u8_INDEX0;u8IndexLoc--)
 9be:	8a 81       	ldd	r24, Y+2	; 0x02
 9c0:	81 50       	subi	r24, 0x01	; 1
 9c2:	8a 83       	std	Y+2, r24	; 0x02
 9c4:	8a 81       	ldd	r24, Y+2	; 0x02
 9c6:	88 23       	and	r24, r24
 9c8:	09 f0       	breq	.+2      	; 0x9cc <__stack+0x16d>
 9ca:	99 cf       	rjmp	.-206    	; 0x8fe <__stack+0x9f>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
		if (u8IndexLoc!=u8_INDEX1)
			for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_1_COUNTER;u8DelayCounter++)
				voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
	}
}
 9cc:	26 96       	adiw	r28, 0x06	; 6
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	de bf       	out	0x3e, r29	; 62
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	cd bf       	out	0x3d, r28	; 61
 9d8:	cf 91       	pop	r28
 9da:	df 91       	pop	r29
 9dc:	08 95       	ret

000009de <voidAnimationTwo>:

void voidAnimationTwo(u8 u8SegDigit1,u8 u8SegDigit2)
{
 9de:	df 93       	push	r29
 9e0:	cf 93       	push	r28
 9e2:	00 d0       	rcall	.+0      	; 0x9e4 <voidAnimationTwo+0x6>
 9e4:	00 d0       	rcall	.+0      	; 0x9e6 <voidAnimationTwo+0x8>
 9e6:	00 d0       	rcall	.+0      	; 0x9e8 <voidAnimationTwo+0xa>
 9e8:	cd b7       	in	r28, 0x3d	; 61
 9ea:	de b7       	in	r29, 0x3e	; 62
 9ec:	8d 83       	std	Y+5, r24	; 0x05
 9ee:	6e 83       	std	Y+6, r22	; 0x06
	for(u8 u8IndexLoc=0;u8IndexLoc < (LEDS_u8_NUMBEROFLEDS/u8_INDEX2);u8IndexLoc++)
 9f0:	1c 82       	std	Y+4, r1	; 0x04
 9f2:	17 c0       	rjmp	.+46     	; 0xa22 <voidAnimationTwo+0x44>
	{
		LEDS_voidSetLedOn(u8IndexLoc);
 9f4:	8c 81       	ldd	r24, Y+4	; 0x04
 9f6:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOn(u8_INDEX7-u8IndexLoc);
 9fa:	87 e0       	ldi	r24, 0x07	; 7
 9fc:	9c 81       	ldd	r25, Y+4	; 0x04
 9fe:	89 1b       	sub	r24, r25
 a00:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_2_COUNTER;u8DelayCounter++)
 a04:	1b 82       	std	Y+3, r1	; 0x03
 a06:	07 c0       	rjmp	.+14     	; 0xa16 <voidAnimationTwo+0x38>
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 a08:	8d 81       	ldd	r24, Y+5	; 0x05
 a0a:	6e 81       	ldd	r22, Y+6	; 0x06
 a0c:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
{
	for(u8 u8IndexLoc=0;u8IndexLoc < (LEDS_u8_NUMBEROFLEDS/u8_INDEX2);u8IndexLoc++)
	{
		LEDS_voidSetLedOn(u8IndexLoc);
		LEDS_voidSetLedOn(u8_INDEX7-u8IndexLoc);
		for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_2_COUNTER;u8DelayCounter++)
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	8f 5f       	subi	r24, 0xFF	; 255
 a14:	8b 83       	std	Y+3, r24	; 0x03
 a16:	8b 81       	ldd	r24, Y+3	; 0x03
 a18:	86 39       	cpi	r24, 0x96	; 150
 a1a:	b0 f3       	brcs	.-20     	; 0xa08 <voidAnimationTwo+0x2a>
	}
}

void voidAnimationTwo(u8 u8SegDigit1,u8 u8SegDigit2)
{
	for(u8 u8IndexLoc=0;u8IndexLoc < (LEDS_u8_NUMBEROFLEDS/u8_INDEX2);u8IndexLoc++)
 a1c:	8c 81       	ldd	r24, Y+4	; 0x04
 a1e:	8f 5f       	subi	r24, 0xFF	; 255
 a20:	8c 83       	std	Y+4, r24	; 0x04
 a22:	8c 81       	ldd	r24, Y+4	; 0x04
 a24:	84 30       	cpi	r24, 0x04	; 4
 a26:	30 f3       	brcs	.-52     	; 0x9f4 <voidAnimationTwo+0x16>
		LEDS_voidSetLedOn(u8IndexLoc);
		LEDS_voidSetLedOn(u8_INDEX7-u8IndexLoc);
		for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_2_COUNTER;u8DelayCounter++)
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
	}
	for(u8 u8IndexLoc=3;u8IndexLoc<LEDS_u8_NUMBEROFLEDS/u8_INDEX2;u8IndexLoc++)
 a28:	83 e0       	ldi	r24, 0x03	; 3
 a2a:	8a 83       	std	Y+2, r24	; 0x02
 a2c:	1c c0       	rjmp	.+56     	; 0xa66 <voidAnimationTwo+0x88>
		{
		LEDS_voidSetLedOff(u8IndexLoc);
 a2e:	8a 81       	ldd	r24, Y+2	; 0x02
 a30:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff(u8_INDEX7-u8IndexLoc);
 a34:	97 e0       	ldi	r25, 0x07	; 7
 a36:	8a 81       	ldd	r24, Y+2	; 0x02
 a38:	29 2f       	mov	r18, r25
 a3a:	28 1b       	sub	r18, r24
 a3c:	82 2f       	mov	r24, r18
 a3e:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		if(u8IndexLoc!=u8_INDEX3)
 a42:	8a 81       	ldd	r24, Y+2	; 0x02
 a44:	83 30       	cpi	r24, 0x03	; 3
 a46:	61 f0       	breq	.+24     	; 0xa60 <voidAnimationTwo+0x82>
			for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_2_COUNTER;u8DelayCounter++)
 a48:	19 82       	std	Y+1, r1	; 0x01
 a4a:	07 c0       	rjmp	.+14     	; 0xa5a <voidAnimationTwo+0x7c>
				voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 a4c:	8d 81       	ldd	r24, Y+5	; 0x05
 a4e:	6e 81       	ldd	r22, Y+6	; 0x06
 a50:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
	for(u8 u8IndexLoc=3;u8IndexLoc<LEDS_u8_NUMBEROFLEDS/u8_INDEX2;u8IndexLoc++)
		{
		LEDS_voidSetLedOff(u8IndexLoc);
		LEDS_voidSetLedOff(u8_INDEX7-u8IndexLoc);
		if(u8IndexLoc!=u8_INDEX3)
			for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_2_COUNTER;u8DelayCounter++)
 a54:	89 81       	ldd	r24, Y+1	; 0x01
 a56:	8f 5f       	subi	r24, 0xFF	; 255
 a58:	89 83       	std	Y+1, r24	; 0x01
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	86 39       	cpi	r24, 0x96	; 150
 a5e:	b0 f3       	brcs	.-20     	; 0xa4c <voidAnimationTwo+0x6e>
		LEDS_voidSetLedOn(u8IndexLoc);
		LEDS_voidSetLedOn(u8_INDEX7-u8IndexLoc);
		for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_2_COUNTER;u8DelayCounter++)
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
	}
	for(u8 u8IndexLoc=3;u8IndexLoc<LEDS_u8_NUMBEROFLEDS/u8_INDEX2;u8IndexLoc++)
 a60:	8a 81       	ldd	r24, Y+2	; 0x02
 a62:	8f 5f       	subi	r24, 0xFF	; 255
 a64:	8a 83       	std	Y+2, r24	; 0x02
 a66:	8a 81       	ldd	r24, Y+2	; 0x02
 a68:	84 30       	cpi	r24, 0x04	; 4
 a6a:	08 f3       	brcs	.-62     	; 0xa2e <voidAnimationTwo+0x50>
		LEDS_voidSetLedOff(u8_INDEX7-u8IndexLoc);
		if(u8IndexLoc!=u8_INDEX3)
			for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_2_COUNTER;u8DelayCounter++)
				voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
		}
}
 a6c:	26 96       	adiw	r28, 0x06	; 6
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	cd bf       	out	0x3d, r28	; 61
 a78:	cf 91       	pop	r28
 a7a:	df 91       	pop	r29
 a7c:	08 95       	ret

00000a7e <voidAnimationThree>:
void voidAnimationThree(u8 u8SegDigit1,u8 u8SegDigit2)
{
 a7e:	df 93       	push	r29
 a80:	cf 93       	push	r28
 a82:	00 d0       	rcall	.+0      	; 0xa84 <voidAnimationThree+0x6>
 a84:	00 d0       	rcall	.+0      	; 0xa86 <voidAnimationThree+0x8>
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	8b 83       	std	Y+3, r24	; 0x03
 a8c:	6c 83       	std	Y+4, r22	; 0x04
	LEDS_voidSetLedOn(LEDS_u8_LED0);
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
	LEDS_voidSetLedOn(LEDS_u8_LED1);
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
	LEDS_voidSetLedOn(LEDS_u8_LED2);
 a9a:	82 e0       	ldi	r24, 0x02	; 2
 a9c:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
	LEDS_voidSetLedOn(LEDS_u8_LED3);
 aa0:	83 e0       	ldi	r24, 0x03	; 3
 aa2:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
	LEDS_voidSetLedOn(LEDS_u8_LED4);
 aa6:	84 e0       	ldi	r24, 0x04	; 4
 aa8:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
	LEDS_voidSetLedOn(LEDS_u8_LED5);
 aac:	85 e0       	ldi	r24, 0x05	; 5
 aae:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
	LEDS_voidSetLedOn(LEDS_u8_LED6);
 ab2:	86 e0       	ldi	r24, 0x06	; 6
 ab4:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
	LEDS_voidSetLedOn(LEDS_u8_LED7);
 ab8:	87 e0       	ldi	r24, 0x07	; 7
 aba:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
	for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_3_COUNTER;u8DelayCounter++)
 abe:	1a 82       	std	Y+2, r1	; 0x02
 ac0:	07 c0       	rjmp	.+14     	; 0xad0 <voidAnimationThree+0x52>
		voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 ac2:	8b 81       	ldd	r24, Y+3	; 0x03
 ac4:	6c 81       	ldd	r22, Y+4	; 0x04
 ac6:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
	LEDS_voidSetLedOn(LEDS_u8_LED3);
	LEDS_voidSetLedOn(LEDS_u8_LED4);
	LEDS_voidSetLedOn(LEDS_u8_LED5);
	LEDS_voidSetLedOn(LEDS_u8_LED6);
	LEDS_voidSetLedOn(LEDS_u8_LED7);
	for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_3_COUNTER;u8DelayCounter++)
 aca:	8a 81       	ldd	r24, Y+2	; 0x02
 acc:	8f 5f       	subi	r24, 0xFF	; 255
 ace:	8a 83       	std	Y+2, r24	; 0x02
 ad0:	8a 81       	ldd	r24, Y+2	; 0x02
 ad2:	8a 3f       	cpi	r24, 0xFA	; 250
 ad4:	b0 f3       	brcs	.-20     	; 0xac2 <voidAnimationThree+0x44>
		voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
	LEDS_voidSetLedOff(LEDS_u8_LED0);
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
	LEDS_voidSetLedOff(LEDS_u8_LED1);
 adc:	81 e0       	ldi	r24, 0x01	; 1
 ade:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
	LEDS_voidSetLedOff(LEDS_u8_LED2);
 ae2:	82 e0       	ldi	r24, 0x02	; 2
 ae4:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
	LEDS_voidSetLedOff(LEDS_u8_LED3);
 ae8:	83 e0       	ldi	r24, 0x03	; 3
 aea:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
	LEDS_voidSetLedOff(LEDS_u8_LED4);
 aee:	84 e0       	ldi	r24, 0x04	; 4
 af0:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
	LEDS_voidSetLedOff(LEDS_u8_LED5);
 af4:	85 e0       	ldi	r24, 0x05	; 5
 af6:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
	LEDS_voidSetLedOff(LEDS_u8_LED6);
 afa:	86 e0       	ldi	r24, 0x06	; 6
 afc:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
	LEDS_voidSetLedOff(LEDS_u8_LED7);
 b00:	87 e0       	ldi	r24, 0x07	; 7
 b02:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
	for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_3_COUNTER;u8DelayCounter++)
 b06:	19 82       	std	Y+1, r1	; 0x01
 b08:	07 c0       	rjmp	.+14     	; 0xb18 <voidAnimationThree+0x9a>
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 b0a:	8b 81       	ldd	r24, Y+3	; 0x03
 b0c:	6c 81       	ldd	r22, Y+4	; 0x04
 b0e:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
	LEDS_voidSetLedOff(LEDS_u8_LED3);
	LEDS_voidSetLedOff(LEDS_u8_LED4);
	LEDS_voidSetLedOff(LEDS_u8_LED5);
	LEDS_voidSetLedOff(LEDS_u8_LED6);
	LEDS_voidSetLedOff(LEDS_u8_LED7);
	for(u8 u8DelayCounter=0;u8DelayCounter<U8_FOR_3_COUNTER;u8DelayCounter++)
 b12:	89 81       	ldd	r24, Y+1	; 0x01
 b14:	8f 5f       	subi	r24, 0xFF	; 255
 b16:	89 83       	std	Y+1, r24	; 0x01
 b18:	89 81       	ldd	r24, Y+1	; 0x01
 b1a:	8a 3f       	cpi	r24, 0xFA	; 250
 b1c:	b0 f3       	brcs	.-20     	; 0xb0a <voidAnimationThree+0x8c>
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);

}
 b1e:	0f 90       	pop	r0
 b20:	0f 90       	pop	r0
 b22:	0f 90       	pop	r0
 b24:	0f 90       	pop	r0
 b26:	cf 91       	pop	r28
 b28:	df 91       	pop	r29
 b2a:	08 95       	ret

00000b2c <voidAnimationFour>:

void voidAnimationFour(u8 u8SegDigit1,u8 u8SegDigit2)
{
 b2c:	df 93       	push	r29
 b2e:	cf 93       	push	r28
 b30:	00 d0       	rcall	.+0      	; 0xb32 <voidAnimationFour+0x6>
 b32:	00 d0       	rcall	.+0      	; 0xb34 <voidAnimationFour+0x8>
 b34:	00 d0       	rcall	.+0      	; 0xb36 <voidAnimationFour+0xa>
 b36:	cd b7       	in	r28, 0x3d	; 61
 b38:	de b7       	in	r29, 0x3e	; 62
 b3a:	8d 83       	std	Y+5, r24	; 0x05
 b3c:	6e 83       	std	Y+6, r22	; 0x06
	u8 u8CounterLoc=0;
 b3e:	1c 82       	std	Y+4, r1	; 0x04
	for(u8 u8ForCounterLoc=1;u8ForCounterLoc<=u8_LED_COUTER;u8ForCounterLoc++)
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	8b 83       	std	Y+3, r24	; 0x03
 b44:	97 c0       	rjmp	.+302    	; 0xc74 <voidAnimationFour+0x148>
	{
		u8CounterLoc=u8ForCounterLoc;
 b46:	8b 81       	ldd	r24, Y+3	; 0x03
 b48:	8c 83       	std	Y+4, r24	; 0x04
		if((u8CounterLoc-u8_SEVEN_DIGHT)>=u8_INDEX0)
 b4a:	8c 81       	ldd	r24, Y+4	; 0x04
 b4c:	88 2f       	mov	r24, r24
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	80 58       	subi	r24, 0x80	; 128
 b52:	90 40       	sbci	r25, 0x00	; 0
 b54:	99 23       	and	r25, r25
 b56:	34 f0       	brlt	.+12     	; 0xb64 <voidAnimationFour+0x38>
		{
			u8CounterLoc-=u8_SEVEN_DIGHT;
 b58:	8c 81       	ldd	r24, Y+4	; 0x04
 b5a:	80 58       	subi	r24, 0x80	; 128
 b5c:	8c 83       	std	Y+4, r24	; 0x04
			LEDS_voidSetLedOn(LEDS_u8_LED7);
 b5e:	87 e0       	ldi	r24, 0x07	; 7
 b60:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		}
		if((u8CounterLoc-u8_SIX_DIGHT)>=u8_INDEX0)
 b64:	8c 81       	ldd	r24, Y+4	; 0x04
 b66:	88 2f       	mov	r24, r24
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	80 54       	subi	r24, 0x40	; 64
 b6c:	90 40       	sbci	r25, 0x00	; 0
 b6e:	99 23       	and	r25, r25
 b70:	34 f0       	brlt	.+12     	; 0xb7e <voidAnimationFour+0x52>
		{
			u8CounterLoc-=u8_SIX_DIGHT;
 b72:	8c 81       	ldd	r24, Y+4	; 0x04
 b74:	80 54       	subi	r24, 0x40	; 64
 b76:	8c 83       	std	Y+4, r24	; 0x04
			LEDS_voidSetLedOn(LEDS_u8_LED6);
 b78:	86 e0       	ldi	r24, 0x06	; 6
 b7a:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		}
		if((u8CounterLoc-u8_FIVE_DIGHT)>=u8_INDEX0)
 b7e:	8c 81       	ldd	r24, Y+4	; 0x04
 b80:	88 2f       	mov	r24, r24
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	80 97       	sbiw	r24, 0x20	; 32
 b86:	99 23       	and	r25, r25
 b88:	34 f0       	brlt	.+12     	; 0xb96 <voidAnimationFour+0x6a>
		{
			u8CounterLoc-=u8_FIVE_DIGHT;
 b8a:	8c 81       	ldd	r24, Y+4	; 0x04
 b8c:	80 52       	subi	r24, 0x20	; 32
 b8e:	8c 83       	std	Y+4, r24	; 0x04
			LEDS_voidSetLedOn(LEDS_u8_LED5);
 b90:	85 e0       	ldi	r24, 0x05	; 5
 b92:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		}
		if((u8CounterLoc-u8_FOUR_DIGHT)>=u8_INDEX0)
 b96:	8c 81       	ldd	r24, Y+4	; 0x04
 b98:	88 2f       	mov	r24, r24
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	40 97       	sbiw	r24, 0x10	; 16
 b9e:	99 23       	and	r25, r25
 ba0:	34 f0       	brlt	.+12     	; 0xbae <voidAnimationFour+0x82>
		{
			u8CounterLoc-=u8_FOUR_DIGHT;
 ba2:	8c 81       	ldd	r24, Y+4	; 0x04
 ba4:	80 51       	subi	r24, 0x10	; 16
 ba6:	8c 83       	std	Y+4, r24	; 0x04
			LEDS_voidSetLedOn(LEDS_u8_LED4);
 ba8:	84 e0       	ldi	r24, 0x04	; 4
 baa:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		}
		if((u8CounterLoc-u8_THREE_DIGHT)>=u8_INDEX0)
 bae:	8c 81       	ldd	r24, Y+4	; 0x04
 bb0:	88 2f       	mov	r24, r24
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	08 97       	sbiw	r24, 0x08	; 8
 bb6:	99 23       	and	r25, r25
 bb8:	34 f0       	brlt	.+12     	; 0xbc6 <voidAnimationFour+0x9a>
		{
			u8CounterLoc-=u8_THREE_DIGHT;
 bba:	8c 81       	ldd	r24, Y+4	; 0x04
 bbc:	88 50       	subi	r24, 0x08	; 8
 bbe:	8c 83       	std	Y+4, r24	; 0x04
			LEDS_voidSetLedOn(LEDS_u8_LED3);
 bc0:	83 e0       	ldi	r24, 0x03	; 3
 bc2:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		}
		if((u8CounterLoc-u8_TWO_DIGHT)>=u8_INDEX0)
 bc6:	8c 81       	ldd	r24, Y+4	; 0x04
 bc8:	88 2f       	mov	r24, r24
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	04 97       	sbiw	r24, 0x04	; 4
 bce:	99 23       	and	r25, r25
 bd0:	34 f0       	brlt	.+12     	; 0xbde <voidAnimationFour+0xb2>
		{
			u8CounterLoc-=u8_TWO_DIGHT;
 bd2:	8c 81       	ldd	r24, Y+4	; 0x04
 bd4:	84 50       	subi	r24, 0x04	; 4
 bd6:	8c 83       	std	Y+4, r24	; 0x04
			LEDS_voidSetLedOn(LEDS_u8_LED2);
 bd8:	82 e0       	ldi	r24, 0x02	; 2
 bda:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		}
		if((u8CounterLoc-u8_ONE_DIGHT)>=u8_INDEX0)
 bde:	8c 81       	ldd	r24, Y+4	; 0x04
 be0:	88 2f       	mov	r24, r24
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	02 97       	sbiw	r24, 0x02	; 2
 be6:	99 23       	and	r25, r25
 be8:	34 f0       	brlt	.+12     	; 0xbf6 <voidAnimationFour+0xca>
		{
			u8CounterLoc-=u8_ONE_DIGHT;
 bea:	8c 81       	ldd	r24, Y+4	; 0x04
 bec:	82 50       	subi	r24, 0x02	; 2
 bee:	8c 83       	std	Y+4, r24	; 0x04
			LEDS_voidSetLedOn(LEDS_u8_LED1);
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		}
		if((u8CounterLoc-u8_ZERO_DIGHT)>=u8_INDEX0)
 bf6:	8c 81       	ldd	r24, Y+4	; 0x04
 bf8:	88 2f       	mov	r24, r24
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	01 97       	sbiw	r24, 0x01	; 1
 bfe:	99 23       	and	r25, r25
 c00:	34 f0       	brlt	.+12     	; 0xc0e <voidAnimationFour+0xe2>
		{
			u8CounterLoc-=u8_ZERO_DIGHT;
 c02:	8c 81       	ldd	r24, Y+4	; 0x04
 c04:	81 50       	subi	r24, 0x01	; 1
 c06:	8c 83       	std	Y+4, r24	; 0x04
			LEDS_voidSetLedOn(LEDS_u8_LED0);
 c08:	80 e0       	ldi	r24, 0x00	; 0
 c0a:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		}
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
 c0e:	1a 82       	std	Y+2, r1	; 0x02
 c10:	07 c0       	rjmp	.+14     	; 0xc20 <voidAnimationFour+0xf4>
		{
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 c12:	8d 81       	ldd	r24, Y+5	; 0x05
 c14:	6e 81       	ldd	r22, Y+6	; 0x06
 c16:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
		if((u8CounterLoc-u8_ZERO_DIGHT)>=u8_INDEX0)
		{
			u8CounterLoc-=u8_ZERO_DIGHT;
			LEDS_voidSetLedOn(LEDS_u8_LED0);
		}
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
 c1a:	8a 81       	ldd	r24, Y+2	; 0x02
 c1c:	8f 5f       	subi	r24, 0xFF	; 255
 c1e:	8a 83       	std	Y+2, r24	; 0x02
 c20:	8a 81       	ldd	r24, Y+2	; 0x02
 c22:	86 39       	cpi	r24, 0x96	; 150
 c24:	b0 f3       	brcs	.-20     	; 0xc12 <voidAnimationFour+0xe6>
		{
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
		}
		LEDS_voidSetLedOff(LEDS_u8_LED0);
 c26:	80 e0       	ldi	r24, 0x00	; 0
 c28:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff(LEDS_u8_LED1);
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff(LEDS_u8_LED2);
 c32:	82 e0       	ldi	r24, 0x02	; 2
 c34:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff(LEDS_u8_LED3);
 c38:	83 e0       	ldi	r24, 0x03	; 3
 c3a:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff(LEDS_u8_LED4);
 c3e:	84 e0       	ldi	r24, 0x04	; 4
 c40:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff(LEDS_u8_LED5);
 c44:	85 e0       	ldi	r24, 0x05	; 5
 c46:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff(LEDS_u8_LED6);
 c4a:	86 e0       	ldi	r24, 0x06	; 6
 c4c:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff(LEDS_u8_LED7);
 c50:	87 e0       	ldi	r24, 0x07	; 7
 c52:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
 c56:	19 82       	std	Y+1, r1	; 0x01
 c58:	07 c0       	rjmp	.+14     	; 0xc68 <voidAnimationFour+0x13c>
		{
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 c5a:	8d 81       	ldd	r24, Y+5	; 0x05
 c5c:	6e 81       	ldd	r22, Y+6	; 0x06
 c5e:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
		LEDS_voidSetLedOff(LEDS_u8_LED3);
		LEDS_voidSetLedOff(LEDS_u8_LED4);
		LEDS_voidSetLedOff(LEDS_u8_LED5);
		LEDS_voidSetLedOff(LEDS_u8_LED6);
		LEDS_voidSetLedOff(LEDS_u8_LED7);
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
 c62:	89 81       	ldd	r24, Y+1	; 0x01
 c64:	8f 5f       	subi	r24, 0xFF	; 255
 c66:	89 83       	std	Y+1, r24	; 0x01
 c68:	89 81       	ldd	r24, Y+1	; 0x01
 c6a:	86 39       	cpi	r24, 0x96	; 150
 c6c:	b0 f3       	brcs	.-20     	; 0xc5a <voidAnimationFour+0x12e>
}

void voidAnimationFour(u8 u8SegDigit1,u8 u8SegDigit2)
{
	u8 u8CounterLoc=0;
	for(u8 u8ForCounterLoc=1;u8ForCounterLoc<=u8_LED_COUTER;u8ForCounterLoc++)
 c6e:	8b 81       	ldd	r24, Y+3	; 0x03
 c70:	8f 5f       	subi	r24, 0xFF	; 255
 c72:	8b 83       	std	Y+3, r24	; 0x03
 c74:	8b 81       	ldd	r24, Y+3	; 0x03
 c76:	8f 31       	cpi	r24, 0x1F	; 31
 c78:	08 f4       	brcc	.+2      	; 0xc7c <voidAnimationFour+0x150>
 c7a:	65 cf       	rjmp	.-310    	; 0xb46 <voidAnimationFour+0x1a>
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
		{
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
		}
	}
}
 c7c:	26 96       	adiw	r28, 0x06	; 6
 c7e:	0f b6       	in	r0, 0x3f	; 63
 c80:	f8 94       	cli
 c82:	de bf       	out	0x3e, r29	; 62
 c84:	0f be       	out	0x3f, r0	; 63
 c86:	cd bf       	out	0x3d, r28	; 61
 c88:	cf 91       	pop	r28
 c8a:	df 91       	pop	r29
 c8c:	08 95       	ret

00000c8e <voidAnimationFive>:
void voidAnimationFive(u8 u8SegDigit1,u8 u8SegDigit2)
{
 c8e:	df 93       	push	r29
 c90:	cf 93       	push	r28
 c92:	00 d0       	rcall	.+0      	; 0xc94 <voidAnimationFive+0x6>
 c94:	00 d0       	rcall	.+0      	; 0xc96 <voidAnimationFive+0x8>
 c96:	cd b7       	in	r28, 0x3d	; 61
 c98:	de b7       	in	r29, 0x3e	; 62
 c9a:	8b 83       	std	Y+3, r24	; 0x03
 c9c:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 u8IndexLoc=0;u8IndexLoc< LEDS_u8_NUMBEROFLEDS/u8_INDEX2;u8IndexLoc++)
 c9e:	1a 82       	std	Y+2, r1	; 0x02
 ca0:	63 c0       	rjmp	.+198    	; 0xd68 <voidAnimationFive+0xda>
	{
		LEDS_voidSetLedOn(u8IndexLoc%LEDS_u8_NUMBEROFLEDS);
 ca2:	8a 81       	ldd	r24, Y+2	; 0x02
 ca4:	87 70       	andi	r24, 0x07	; 7
 ca6:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX1)%LEDS_u8_NUMBEROFLEDS);
 caa:	8a 81       	ldd	r24, Y+2	; 0x02
 cac:	88 2f       	mov	r24, r24
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	01 96       	adiw	r24, 0x01	; 1
 cb2:	28 e0       	ldi	r18, 0x08	; 8
 cb4:	30 e0       	ldi	r19, 0x00	; 0
 cb6:	b9 01       	movw	r22, r18
 cb8:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 cbc:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOn((u8IndexLoc+u8_INDEX2)%LEDS_u8_NUMBEROFLEDS);
 cc0:	8a 81       	ldd	r24, Y+2	; 0x02
 cc2:	88 2f       	mov	r24, r24
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	02 96       	adiw	r24, 0x02	; 2
 cc8:	28 e0       	ldi	r18, 0x08	; 8
 cca:	30 e0       	ldi	r19, 0x00	; 0
 ccc:	b9 01       	movw	r22, r18
 cce:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 cd2:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX3)%LEDS_u8_NUMBEROFLEDS);
 cd6:	8a 81       	ldd	r24, Y+2	; 0x02
 cd8:	88 2f       	mov	r24, r24
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	03 96       	adiw	r24, 0x03	; 3
 cde:	28 e0       	ldi	r18, 0x08	; 8
 ce0:	30 e0       	ldi	r19, 0x00	; 0
 ce2:	b9 01       	movw	r22, r18
 ce4:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 ce8:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOn((u8IndexLoc+u8_INDEX4)%LEDS_u8_NUMBEROFLEDS);
 cec:	8a 81       	ldd	r24, Y+2	; 0x02
 cee:	88 2f       	mov	r24, r24
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	04 96       	adiw	r24, 0x04	; 4
 cf4:	28 e0       	ldi	r18, 0x08	; 8
 cf6:	30 e0       	ldi	r19, 0x00	; 0
 cf8:	b9 01       	movw	r22, r18
 cfa:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 cfe:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX5)%LEDS_u8_NUMBEROFLEDS);
 d02:	8a 81       	ldd	r24, Y+2	; 0x02
 d04:	88 2f       	mov	r24, r24
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	05 96       	adiw	r24, 0x05	; 5
 d0a:	28 e0       	ldi	r18, 0x08	; 8
 d0c:	30 e0       	ldi	r19, 0x00	; 0
 d0e:	b9 01       	movw	r22, r18
 d10:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 d14:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOn((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
 d18:	8a 81       	ldd	r24, Y+2	; 0x02
 d1a:	88 2f       	mov	r24, r24
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	06 96       	adiw	r24, 0x06	; 6
 d20:	28 e0       	ldi	r18, 0x08	; 8
 d22:	30 e0       	ldi	r19, 0x00	; 0
 d24:	b9 01       	movw	r22, r18
 d26:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 d2a:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX7)%LEDS_u8_NUMBEROFLEDS);
 d2e:	8a 81       	ldd	r24, Y+2	; 0x02
 d30:	88 2f       	mov	r24, r24
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	07 96       	adiw	r24, 0x07	; 7
 d36:	28 e0       	ldi	r18, 0x08	; 8
 d38:	30 e0       	ldi	r19, 0x00	; 0
 d3a:	b9 01       	movw	r22, r18
 d3c:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 d40:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		if(u8IndexLoc!=u8_INDEX7)
 d44:	8a 81       	ldd	r24, Y+2	; 0x02
 d46:	87 30       	cpi	r24, 0x07	; 7
 d48:	61 f0       	breq	.+24     	; 0xd62 <voidAnimationFive+0xd4>
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
 d4a:	19 82       	std	Y+1, r1	; 0x01
 d4c:	07 c0       	rjmp	.+14     	; 0xd5c <voidAnimationFive+0xce>
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 d4e:	8b 81       	ldd	r24, Y+3	; 0x03
 d50:	6c 81       	ldd	r22, Y+4	; 0x04
 d52:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
		LEDS_voidSetLedOn((u8IndexLoc+u8_INDEX4)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX5)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOn((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX7)%LEDS_u8_NUMBEROFLEDS);
		if(u8IndexLoc!=u8_INDEX7)
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
 d56:	89 81       	ldd	r24, Y+1	; 0x01
 d58:	8f 5f       	subi	r24, 0xFF	; 255
 d5a:	89 83       	std	Y+1, r24	; 0x01
 d5c:	89 81       	ldd	r24, Y+1	; 0x01
 d5e:	86 39       	cpi	r24, 0x96	; 150
 d60:	b0 f3       	brcs	.-20     	; 0xd4e <voidAnimationFive+0xc0>
		}
	}
}
void voidAnimationFive(u8 u8SegDigit1,u8 u8SegDigit2)
{
	for(u8 u8IndexLoc=0;u8IndexLoc< LEDS_u8_NUMBEROFLEDS/u8_INDEX2;u8IndexLoc++)
 d62:	8a 81       	ldd	r24, Y+2	; 0x02
 d64:	8f 5f       	subi	r24, 0xFF	; 255
 d66:	8a 83       	std	Y+2, r24	; 0x02
 d68:	8a 81       	ldd	r24, Y+2	; 0x02
 d6a:	84 30       	cpi	r24, 0x04	; 4
 d6c:	08 f4       	brcc	.+2      	; 0xd70 <voidAnimationFive+0xe2>
 d6e:	99 cf       	rjmp	.-206    	; 0xca2 <voidAnimationFive+0x14>
		if(u8IndexLoc!=u8_INDEX7)
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
	}

}
 d70:	0f 90       	pop	r0
 d72:	0f 90       	pop	r0
 d74:	0f 90       	pop	r0
 d76:	0f 90       	pop	r0
 d78:	cf 91       	pop	r28
 d7a:	df 91       	pop	r29
 d7c:	08 95       	ret

00000d7e <voidAnimationSix>:

void voidAnimationSix(u8 u8SegDigit1,u8 u8SegDigit2)
{
 d7e:	df 93       	push	r29
 d80:	cf 93       	push	r28
 d82:	00 d0       	rcall	.+0      	; 0xd84 <voidAnimationSix+0x6>
 d84:	00 d0       	rcall	.+0      	; 0xd86 <voidAnimationSix+0x8>
 d86:	cd b7       	in	r28, 0x3d	; 61
 d88:	de b7       	in	r29, 0x3e	; 62
 d8a:	8b 83       	std	Y+3, r24	; 0x03
 d8c:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 u8IndexLoc=0;u8IndexLoc< LEDS_u8_NUMBEROFLEDS/u8_INDEX2;u8IndexLoc++)
 d8e:	1a 82       	std	Y+2, r1	; 0x02
 d90:	63 c0       	rjmp	.+198    	; 0xe58 <voidAnimationSix+0xda>
	{
		LEDS_voidSetLedOn(u8IndexLoc%LEDS_u8_NUMBEROFLEDS);
 d92:	8a 81       	ldd	r24, Y+2	; 0x02
 d94:	87 70       	andi	r24, 0x07	; 7
 d96:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOn((u8IndexLoc+u8_INDEX1)%LEDS_u8_NUMBEROFLEDS);
 d9a:	8a 81       	ldd	r24, Y+2	; 0x02
 d9c:	88 2f       	mov	r24, r24
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	01 96       	adiw	r24, 0x01	; 1
 da2:	28 e0       	ldi	r18, 0x08	; 8
 da4:	30 e0       	ldi	r19, 0x00	; 0
 da6:	b9 01       	movw	r22, r18
 da8:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 dac:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOn((u8IndexLoc+u8_INDEX2)%LEDS_u8_NUMBEROFLEDS);
 db0:	8a 81       	ldd	r24, Y+2	; 0x02
 db2:	88 2f       	mov	r24, r24
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	02 96       	adiw	r24, 0x02	; 2
 db8:	28 e0       	ldi	r18, 0x08	; 8
 dba:	30 e0       	ldi	r19, 0x00	; 0
 dbc:	b9 01       	movw	r22, r18
 dbe:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 dc2:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOn((u8IndexLoc+u8_INDEX3)%LEDS_u8_NUMBEROFLEDS);
 dc6:	8a 81       	ldd	r24, Y+2	; 0x02
 dc8:	88 2f       	mov	r24, r24
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	03 96       	adiw	r24, 0x03	; 3
 dce:	28 e0       	ldi	r18, 0x08	; 8
 dd0:	30 e0       	ldi	r19, 0x00	; 0
 dd2:	b9 01       	movw	r22, r18
 dd4:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 dd8:	0e 94 cc 01 	call	0x398	; 0x398 <LEDS_voidSetLedOn>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX4)%LEDS_u8_NUMBEROFLEDS);
 ddc:	8a 81       	ldd	r24, Y+2	; 0x02
 dde:	88 2f       	mov	r24, r24
 de0:	90 e0       	ldi	r25, 0x00	; 0
 de2:	04 96       	adiw	r24, 0x04	; 4
 de4:	28 e0       	ldi	r18, 0x08	; 8
 de6:	30 e0       	ldi	r19, 0x00	; 0
 de8:	b9 01       	movw	r22, r18
 dea:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 dee:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX5)%LEDS_u8_NUMBEROFLEDS);
 df2:	8a 81       	ldd	r24, Y+2	; 0x02
 df4:	88 2f       	mov	r24, r24
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	05 96       	adiw	r24, 0x05	; 5
 dfa:	28 e0       	ldi	r18, 0x08	; 8
 dfc:	30 e0       	ldi	r19, 0x00	; 0
 dfe:	b9 01       	movw	r22, r18
 e00:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 e04:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
 e08:	8a 81       	ldd	r24, Y+2	; 0x02
 e0a:	88 2f       	mov	r24, r24
 e0c:	90 e0       	ldi	r25, 0x00	; 0
 e0e:	06 96       	adiw	r24, 0x06	; 6
 e10:	28 e0       	ldi	r18, 0x08	; 8
 e12:	30 e0       	ldi	r19, 0x00	; 0
 e14:	b9 01       	movw	r22, r18
 e16:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 e1a:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX7)%LEDS_u8_NUMBEROFLEDS);
 e1e:	8a 81       	ldd	r24, Y+2	; 0x02
 e20:	88 2f       	mov	r24, r24
 e22:	90 e0       	ldi	r25, 0x00	; 0
 e24:	07 96       	adiw	r24, 0x07	; 7
 e26:	28 e0       	ldi	r18, 0x08	; 8
 e28:	30 e0       	ldi	r19, 0x00	; 0
 e2a:	b9 01       	movw	r22, r18
 e2c:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 e30:	0e 94 33 02 	call	0x466	; 0x466 <LEDS_voidSetLedOff>
		if(u8IndexLoc!=u8_INDEX7)
 e34:	8a 81       	ldd	r24, Y+2	; 0x02
 e36:	87 30       	cpi	r24, 0x07	; 7
 e38:	61 f0       	breq	.+24     	; 0xe52 <voidAnimationSix+0xd4>
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
 e3a:	19 82       	std	Y+1, r1	; 0x01
 e3c:	07 c0       	rjmp	.+14     	; 0xe4c <voidAnimationSix+0xce>
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
 e3e:	8b 81       	ldd	r24, Y+3	; 0x03
 e40:	6c 81       	ldd	r22, Y+4	; 0x04
 e42:	0e 94 ce 03 	call	0x79c	; 0x79c <voidDisplayOnSeg>
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX4)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX5)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX6)%LEDS_u8_NUMBEROFLEDS);
		LEDS_voidSetLedOff((u8IndexLoc+u8_INDEX7)%LEDS_u8_NUMBEROFLEDS);
		if(u8IndexLoc!=u8_INDEX7)
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
 e46:	89 81       	ldd	r24, Y+1	; 0x01
 e48:	8f 5f       	subi	r24, 0xFF	; 255
 e4a:	89 83       	std	Y+1, r24	; 0x01
 e4c:	89 81       	ldd	r24, Y+1	; 0x01
 e4e:	86 39       	cpi	r24, 0x96	; 150
 e50:	b0 f3       	brcs	.-20     	; 0xe3e <voidAnimationSix+0xc0>

}

void voidAnimationSix(u8 u8SegDigit1,u8 u8SegDigit2)
{
	for(u8 u8IndexLoc=0;u8IndexLoc< LEDS_u8_NUMBEROFLEDS/u8_INDEX2;u8IndexLoc++)
 e52:	8a 81       	ldd	r24, Y+2	; 0x02
 e54:	8f 5f       	subi	r24, 0xFF	; 255
 e56:	8a 83       	std	Y+2, r24	; 0x02
 e58:	8a 81       	ldd	r24, Y+2	; 0x02
 e5a:	84 30       	cpi	r24, 0x04	; 4
 e5c:	08 f4       	brcc	.+2      	; 0xe60 <voidAnimationSix+0xe2>
 e5e:	99 cf       	rjmp	.-206    	; 0xd92 <voidAnimationSix+0x14>
		if(u8IndexLoc!=u8_INDEX7)
		for(u8 u8DelayCounterLoc=0;u8DelayCounterLoc<U8_FOR_2_COUNTER;u8DelayCounterLoc++)
			voidDisplayOnSeg(u8SegDigit1,u8SegDigit2);
	}

}
 e60:	0f 90       	pop	r0
 e62:	0f 90       	pop	r0
 e64:	0f 90       	pop	r0
 e66:	0f 90       	pop	r0
 e68:	cf 91       	pop	r28
 e6a:	df 91       	pop	r29
 e6c:	08 95       	ret

00000e6e <__mulsi3>:
 e6e:	62 9f       	mul	r22, r18
 e70:	d0 01       	movw	r26, r0
 e72:	73 9f       	mul	r23, r19
 e74:	f0 01       	movw	r30, r0
 e76:	82 9f       	mul	r24, r18
 e78:	e0 0d       	add	r30, r0
 e7a:	f1 1d       	adc	r31, r1
 e7c:	64 9f       	mul	r22, r20
 e7e:	e0 0d       	add	r30, r0
 e80:	f1 1d       	adc	r31, r1
 e82:	92 9f       	mul	r25, r18
 e84:	f0 0d       	add	r31, r0
 e86:	83 9f       	mul	r24, r19
 e88:	f0 0d       	add	r31, r0
 e8a:	74 9f       	mul	r23, r20
 e8c:	f0 0d       	add	r31, r0
 e8e:	65 9f       	mul	r22, r21
 e90:	f0 0d       	add	r31, r0
 e92:	99 27       	eor	r25, r25
 e94:	72 9f       	mul	r23, r18
 e96:	b0 0d       	add	r27, r0
 e98:	e1 1d       	adc	r30, r1
 e9a:	f9 1f       	adc	r31, r25
 e9c:	63 9f       	mul	r22, r19
 e9e:	b0 0d       	add	r27, r0
 ea0:	e1 1d       	adc	r30, r1
 ea2:	f9 1f       	adc	r31, r25
 ea4:	bd 01       	movw	r22, r26
 ea6:	cf 01       	movw	r24, r30
 ea8:	11 24       	eor	r1, r1
 eaa:	08 95       	ret

00000eac <__udivmodqi4>:
 eac:	99 1b       	sub	r25, r25
 eae:	79 e0       	ldi	r23, 0x09	; 9
 eb0:	04 c0       	rjmp	.+8      	; 0xeba <__udivmodqi4_ep>

00000eb2 <__udivmodqi4_loop>:
 eb2:	99 1f       	adc	r25, r25
 eb4:	96 17       	cp	r25, r22
 eb6:	08 f0       	brcs	.+2      	; 0xeba <__udivmodqi4_ep>
 eb8:	96 1b       	sub	r25, r22

00000eba <__udivmodqi4_ep>:
 eba:	88 1f       	adc	r24, r24
 ebc:	7a 95       	dec	r23
 ebe:	c9 f7       	brne	.-14     	; 0xeb2 <__udivmodqi4_loop>
 ec0:	80 95       	com	r24
 ec2:	08 95       	ret

00000ec4 <__divmodhi4>:
 ec4:	97 fb       	bst	r25, 7
 ec6:	09 2e       	mov	r0, r25
 ec8:	07 26       	eor	r0, r23
 eca:	0a d0       	rcall	.+20     	; 0xee0 <__divmodhi4_neg1>
 ecc:	77 fd       	sbrc	r23, 7
 ece:	04 d0       	rcall	.+8      	; 0xed8 <__divmodhi4_neg2>
 ed0:	2e d0       	rcall	.+92     	; 0xf2e <__udivmodhi4>
 ed2:	06 d0       	rcall	.+12     	; 0xee0 <__divmodhi4_neg1>
 ed4:	00 20       	and	r0, r0
 ed6:	1a f4       	brpl	.+6      	; 0xede <__divmodhi4_exit>

00000ed8 <__divmodhi4_neg2>:
 ed8:	70 95       	com	r23
 eda:	61 95       	neg	r22
 edc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ede <__divmodhi4_exit>:
 ede:	08 95       	ret

00000ee0 <__divmodhi4_neg1>:
 ee0:	f6 f7       	brtc	.-4      	; 0xede <__divmodhi4_exit>
 ee2:	90 95       	com	r25
 ee4:	81 95       	neg	r24
 ee6:	9f 4f       	sbci	r25, 0xFF	; 255
 ee8:	08 95       	ret

00000eea <__udivmodsi4>:
 eea:	a1 e2       	ldi	r26, 0x21	; 33
 eec:	1a 2e       	mov	r1, r26
 eee:	aa 1b       	sub	r26, r26
 ef0:	bb 1b       	sub	r27, r27
 ef2:	fd 01       	movw	r30, r26
 ef4:	0d c0       	rjmp	.+26     	; 0xf10 <__udivmodsi4_ep>

00000ef6 <__udivmodsi4_loop>:
 ef6:	aa 1f       	adc	r26, r26
 ef8:	bb 1f       	adc	r27, r27
 efa:	ee 1f       	adc	r30, r30
 efc:	ff 1f       	adc	r31, r31
 efe:	a2 17       	cp	r26, r18
 f00:	b3 07       	cpc	r27, r19
 f02:	e4 07       	cpc	r30, r20
 f04:	f5 07       	cpc	r31, r21
 f06:	20 f0       	brcs	.+8      	; 0xf10 <__udivmodsi4_ep>
 f08:	a2 1b       	sub	r26, r18
 f0a:	b3 0b       	sbc	r27, r19
 f0c:	e4 0b       	sbc	r30, r20
 f0e:	f5 0b       	sbc	r31, r21

00000f10 <__udivmodsi4_ep>:
 f10:	66 1f       	adc	r22, r22
 f12:	77 1f       	adc	r23, r23
 f14:	88 1f       	adc	r24, r24
 f16:	99 1f       	adc	r25, r25
 f18:	1a 94       	dec	r1
 f1a:	69 f7       	brne	.-38     	; 0xef6 <__udivmodsi4_loop>
 f1c:	60 95       	com	r22
 f1e:	70 95       	com	r23
 f20:	80 95       	com	r24
 f22:	90 95       	com	r25
 f24:	9b 01       	movw	r18, r22
 f26:	ac 01       	movw	r20, r24
 f28:	bd 01       	movw	r22, r26
 f2a:	cf 01       	movw	r24, r30
 f2c:	08 95       	ret

00000f2e <__udivmodhi4>:
 f2e:	aa 1b       	sub	r26, r26
 f30:	bb 1b       	sub	r27, r27
 f32:	51 e1       	ldi	r21, 0x11	; 17
 f34:	07 c0       	rjmp	.+14     	; 0xf44 <__udivmodhi4_ep>

00000f36 <__udivmodhi4_loop>:
 f36:	aa 1f       	adc	r26, r26
 f38:	bb 1f       	adc	r27, r27
 f3a:	a6 17       	cp	r26, r22
 f3c:	b7 07       	cpc	r27, r23
 f3e:	10 f0       	brcs	.+4      	; 0xf44 <__udivmodhi4_ep>
 f40:	a6 1b       	sub	r26, r22
 f42:	b7 0b       	sbc	r27, r23

00000f44 <__udivmodhi4_ep>:
 f44:	88 1f       	adc	r24, r24
 f46:	99 1f       	adc	r25, r25
 f48:	5a 95       	dec	r21
 f4a:	a9 f7       	brne	.-22     	; 0xf36 <__udivmodhi4_loop>
 f4c:	80 95       	com	r24
 f4e:	90 95       	com	r25
 f50:	bc 01       	movw	r22, r24
 f52:	cd 01       	movw	r24, r26
 f54:	08 95       	ret

00000f56 <_exit>:
 f56:	f8 94       	cli

00000f58 <__stop_program>:
 f58:	ff cf       	rjmp	.-2      	; 0xf58 <__stop_program>
