
RTO2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000968  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800088  00800088  00000a24  2**0
                  ALLOC
  3 .stab         00000dec  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000074b  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3a       	cpi	r26, 0xA3	; 163
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 04 	call	0x884	; 0x884 <main>
  8a:	0c 94 b2 04 	jmp	0x964	; 0x964 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
  aa:	e4 e3       	ldi	r30, 0x34	; 52
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
}
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <DIO_voidSetPinValue+0x6>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	60 f5       	brcc	.+88     	; 0x12a <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	88 23       	and	r24, r24
  d6:	a1 f4       	brne	.+40     	; 0x100 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
  d8:	ab e3       	ldi	r26, 0x3B	; 59
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	eb e3       	ldi	r30, 0x3B	; 59
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_voidSetPinValue+0x38>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_voidSetPinValue+0x34>
  fa:	84 2b       	or	r24, r20
  fc:	8c 93       	st	X, r24
  fe:	b3 c0       	rjmp	.+358    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 100:	ab e3       	ldi	r26, 0x3B	; 59
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	eb e3       	ldi	r30, 0x3B	; 59
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	48 2f       	mov	r20, r24
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinValue+0x60>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinValue+0x5c>
 122:	80 95       	com	r24
 124:	84 23       	and	r24, r20
 126:	8c 93       	st	X, r24
 128:	9e c0       	rjmp	.+316    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	90 f1       	brcs	.+100    	; 0x194 <DIO_voidSetPinValue+0xd6>
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	80 31       	cpi	r24, 0x10	; 16
 134:	78 f5       	brcc	.+94     	; 0x194 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	88 50       	subi	r24, 0x08	; 8
 13a:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	88 23       	and	r24, r24
 140:	a1 f4       	brne	.+40     	; 0x16a <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 142:	a8 e3       	ldi	r26, 0x38	; 56
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e8 e3       	ldi	r30, 0x38	; 56
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	48 2f       	mov	r20, r24
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	28 2f       	mov	r18, r24
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinValue+0xa2>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinValue+0x9e>
 164:	84 2b       	or	r24, r20
 166:	8c 93       	st	X, r24
 168:	7e c0       	rjmp	.+252    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 16a:	a8 e3       	ldi	r26, 0x38	; 56
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e8 e3       	ldi	r30, 0x38	; 56
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_voidSetPinValue+0xca>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_voidSetPinValue+0xc6>
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	8c 93       	st	X, r24
 192:	69 c0       	rjmp	.+210    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	80 31       	cpi	r24, 0x10	; 16
 198:	90 f1       	brcs	.+100    	; 0x1fe <DIO_voidSetPinValue+0x140>
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	88 31       	cpi	r24, 0x18	; 24
 19e:	78 f5       	brcc	.+94     	; 0x1fe <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	80 51       	subi	r24, 0x10	; 16
 1a4:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	88 23       	and	r24, r24
 1aa:	a1 f4       	brne	.+40     	; 0x1d4 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 1ac:	a5 e3       	ldi	r26, 0x35	; 53
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e5 e3       	ldi	r30, 0x35	; 53
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 2e       	mov	r0, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPinValue+0x10c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_voidSetPinValue+0x108>
 1ce:	84 2b       	or	r24, r20
 1d0:	8c 93       	st	X, r24
 1d2:	49 c0       	rjmp	.+146    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 1d4:	a5 e3       	ldi	r26, 0x35	; 53
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e5 e3       	ldi	r30, 0x35	; 53
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_voidSetPinValue+0x134>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_voidSetPinValue+0x130>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	34 c0       	rjmp	.+104    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	88 31       	cpi	r24, 0x18	; 24
 202:	88 f1       	brcs	.+98     	; 0x266 <DIO_voidSetPinValue+0x1a8>
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	80 32       	cpi	r24, 0x20	; 32
 208:	70 f5       	brcc	.+92     	; 0x266 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	88 51       	subi	r24, 0x18	; 24
 20e:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	88 23       	and	r24, r24
 214:	a1 f4       	brne	.+40     	; 0x23e <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 216:	a2 e3       	ldi	r26, 0x32	; 50
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e2 e3       	ldi	r30, 0x32	; 50
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	48 2f       	mov	r20, r24
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 2e       	mov	r0, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_voidSetPinValue+0x176>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_voidSetPinValue+0x172>
 238:	84 2b       	or	r24, r20
 23a:	8c 93       	st	X, r24
 23c:	14 c0       	rjmp	.+40     	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 23e:	a2 e3       	ldi	r26, 0x32	; 50
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e2 e3       	ldi	r30, 0x32	; 50
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	48 2f       	mov	r20, r24
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	28 2f       	mov	r18, r24
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 2e       	mov	r0, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_voidSetPinValue+0x19e>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_voidSetPinValue+0x19a>
 260:	80 95       	com	r24
 262:	84 23       	and	r24, r20
 264:	8c 93       	st	X, r24
		}			
	}
}
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	00 d0       	rcall	.+0      	; 0x276 <DIO_u8GetPinValue+0x6>
 276:	00 d0       	rcall	.+0      	; 0x278 <DIO_u8GetPinValue+0x8>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 27e:	8c 81       	ldd	r24, Y+4	; 0x04
 280:	88 30       	cpi	r24, 0x08	; 8
 282:	00 f5       	brcc	.+64     	; 0x2c4 <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 288:	e9 e3       	ldi	r30, 0x39	; 57
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	48 2f       	mov	r20, r24
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8GetPinValue+0x32>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	2a 95       	dec	r18
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8GetPinValue+0x2e>
 2a6:	9a 01       	movw	r18, r20
 2a8:	28 23       	and	r18, r24
 2aa:	39 23       	and	r19, r25
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	a9 01       	movw	r20, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_u8GetPinValue+0x4a>
 2b6:	55 95       	asr	r21
 2b8:	47 95       	ror	r20
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_u8GetPinValue+0x46>
 2be:	ca 01       	movw	r24, r20
 2c0:	8a 83       	std	Y+2, r24	; 0x02
 2c2:	74 c0       	rjmp	.+232    	; 0x3ac <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	80 31       	cpi	r24, 0x10	; 16
 2c8:	20 f1       	brcs	.+72     	; 0x312 <DIO_u8GetPinValue+0xa2>
 2ca:	8c 81       	ldd	r24, Y+4	; 0x04
 2cc:	88 31       	cpi	r24, 0x18	; 24
 2ce:	08 f5       	brcc	.+66     	; 0x312 <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	88 50       	subi	r24, 0x08	; 8
 2d4:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 2d6:	e6 e3       	ldi	r30, 0x36	; 54
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	8b 81       	ldd	r24, Y+3	; 0x03
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8GetPinValue+0x80>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8GetPinValue+0x7c>
 2f4:	9a 01       	movw	r18, r20
 2f6:	28 23       	and	r18, r24
 2f8:	39 23       	and	r19, r25
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	a9 01       	movw	r20, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_u8GetPinValue+0x98>
 304:	55 95       	asr	r21
 306:	47 95       	ror	r20
 308:	8a 95       	dec	r24
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_u8GetPinValue+0x94>
 30c:	ca 01       	movw	r24, r20
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	4d c0       	rjmp	.+154    	; 0x3ac <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 312:	8c 81       	ldd	r24, Y+4	; 0x04
 314:	80 31       	cpi	r24, 0x10	; 16
 316:	20 f1       	brcs	.+72     	; 0x360 <DIO_u8GetPinValue+0xf0>
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	88 31       	cpi	r24, 0x18	; 24
 31c:	08 f5       	brcc	.+66     	; 0x360 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 31e:	8c 81       	ldd	r24, Y+4	; 0x04
 320:	80 51       	subi	r24, 0x10	; 16
 322:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 324:	e6 e3       	ldi	r30, 0x36	; 54
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	48 2f       	mov	r20, r24
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_u8GetPinValue+0xce>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	2a 95       	dec	r18
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_u8GetPinValue+0xca>
 342:	9a 01       	movw	r18, r20
 344:	28 23       	and	r18, r24
 346:	39 23       	and	r19, r25
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	88 2f       	mov	r24, r24
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	a9 01       	movw	r20, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_u8GetPinValue+0xe6>
 352:	55 95       	asr	r21
 354:	47 95       	ror	r20
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_u8GetPinValue+0xe2>
 35a:	ca 01       	movw	r24, r20
 35c:	8a 83       	std	Y+2, r24	; 0x02
 35e:	26 c0       	rjmp	.+76     	; 0x3ac <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 360:	8c 81       	ldd	r24, Y+4	; 0x04
 362:	88 31       	cpi	r24, 0x18	; 24
 364:	18 f1       	brcs	.+70     	; 0x3ac <DIO_u8GetPinValue+0x13c>
 366:	8c 81       	ldd	r24, Y+4	; 0x04
 368:	80 32       	cpi	r24, 0x20	; 32
 36a:	00 f5       	brcc	.+64     	; 0x3ac <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 36c:	8c 81       	ldd	r24, Y+4	; 0x04
 36e:	88 51       	subi	r24, 0x18	; 24
 370:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 372:	e0 e3       	ldi	r30, 0x30	; 48
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_u8GetPinValue+0x11c>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_u8GetPinValue+0x118>
 390:	9a 01       	movw	r18, r20
 392:	28 23       	and	r18, r24
 394:	39 23       	and	r19, r25
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	88 2f       	mov	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	a9 01       	movw	r20, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8GetPinValue+0x134>
 3a0:	55 95       	asr	r21
 3a2:	47 95       	ror	r20
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8GetPinValue+0x130>
 3a8:	ca 01       	movw	r24, r20
 3aa:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	88 23       	and	r24, r24
 3b0:	19 f4       	brne	.+6      	; 0x3b8 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 3be:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 3d8:	af e5       	ldi	r26, 0x5F	; 95
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	ef e5       	ldi	r30, 0x5F	; 95
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	8c 93       	st	X, r24
}
 3e6:	cf 91       	pop	r28
 3e8:	df 91       	pop	r29
 3ea:	08 95       	ret

000003ec <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 3f4:	af e5       	ldi	r26, 0x5F	; 95
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	ef e5       	ldi	r30, 0x5F	; 95
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	8f 77       	andi	r24, 0x7F	; 127
 400:	8c 93       	st	X, r24
}
 402:	cf 91       	pop	r28
 404:	df 91       	pop	r29
 406:	08 95       	ret

00000408 <RTO_voidSchedular>:
u32 RTO_u32OvfCount=0;
u8  RTO_u8_INITValue=0;
u32 RTO_u32OvfIncreament=0;
Task* RTO_SYSTASKS[RTO_u8_NUM_OF_TASKS]={(Task *)0};
static void RTO_voidSchedular(void)
{
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	0f 92       	push	r0
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62

	RTO_u32OvfIncreament ++;
 412:	80 91 8d 00 	lds	r24, 0x008D
 416:	90 91 8e 00 	lds	r25, 0x008E
 41a:	a0 91 8f 00 	lds	r26, 0x008F
 41e:	b0 91 90 00 	lds	r27, 0x0090
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	a1 1d       	adc	r26, r1
 426:	b1 1d       	adc	r27, r1
 428:	80 93 8d 00 	sts	0x008D, r24
 42c:	90 93 8e 00 	sts	0x008E, r25
 430:	a0 93 8f 00 	sts	0x008F, r26
 434:	b0 93 90 00 	sts	0x0090, r27
	if(RTO_u32OvfIncreament == RTO_u32OvfCount)
 438:	20 91 8d 00 	lds	r18, 0x008D
 43c:	30 91 8e 00 	lds	r19, 0x008E
 440:	40 91 8f 00 	lds	r20, 0x008F
 444:	50 91 90 00 	lds	r21, 0x0090
 448:	80 91 88 00 	lds	r24, 0x0088
 44c:	90 91 89 00 	lds	r25, 0x0089
 450:	a0 91 8a 00 	lds	r26, 0x008A
 454:	b0 91 8b 00 	lds	r27, 0x008B
 458:	28 17       	cp	r18, r24
 45a:	39 07       	cpc	r19, r25
 45c:	4a 07       	cpc	r20, r26
 45e:	5b 07       	cpc	r21, r27
 460:	09 f0       	breq	.+2      	; 0x464 <RTO_voidSchedular+0x5c>
 462:	76 c0       	rjmp	.+236    	; 0x550 <RTO_voidSchedular+0x148>
	{
		RTO_u32OvfIncreament=0;
 464:	10 92 8d 00 	sts	0x008D, r1
 468:	10 92 8e 00 	sts	0x008E, r1
 46c:	10 92 8f 00 	sts	0x008F, r1
 470:	10 92 90 00 	sts	0x0090, r1
		TIM_voidInitRegister(RTO_u8_INITValue);
 474:	80 91 8c 00 	lds	r24, 0x008C
 478:	0e 94 8f 03 	call	0x71e	; 0x71e <TIM_voidInitRegister>
		/*Schedular code*/
		/*Loop on all Tasks*/
		for(u8 RTO_u8LoopCounter=0;RTO_u8LoopCounter<RTO_u8_NUM_OF_TASKS;RTO_u8LoopCounter++)
 47c:	19 82       	std	Y+1, r1	; 0x01
 47e:	64 c0       	rjmp	.+200    	; 0x548 <RTO_voidSchedular+0x140>
		{
			/*check that a task is created at this location*/
			if(RTO_SYSTASKS[RTO_u8LoopCounter] !=(Task*) 0)
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	88 2f       	mov	r24, r24
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	fc 01       	movw	r30, r24
 48c:	ef 56       	subi	r30, 0x6F	; 111
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	80 81       	ld	r24, Z
 492:	91 81       	ldd	r25, Z+1	; 0x01
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	09 f4       	brne	.+2      	; 0x49a <RTO_voidSchedular+0x92>
 498:	54 c0       	rjmp	.+168    	; 0x542 <RTO_voidSchedular+0x13a>
			{
				if(RTO_SYSTASKS[RTO_u8LoopCounter]->u8State == RTO_u8_ACTIVE_STATE)
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	88 2f       	mov	r24, r24
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	fc 01       	movw	r30, r24
 4a6:	ef 56       	subi	r30, 0x6F	; 111
 4a8:	ff 4f       	sbci	r31, 0xFF	; 255
 4aa:	01 90       	ld	r0, Z+
 4ac:	f0 81       	ld	r31, Z
 4ae:	e0 2d       	mov	r30, r0
 4b0:	82 81       	ldd	r24, Z+2	; 0x02
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <RTO_voidSchedular+0xb0>
 4b6:	45 c0       	rjmp	.+138    	; 0x542 <RTO_voidSchedular+0x13a>
				{

					if(RTO_SYSTASKS[RTO_u8LoopCounter]->u8FirstDelay ==0)
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	88 2f       	mov	r24, r24
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	fc 01       	movw	r30, r24
 4c4:	ef 56       	subi	r30, 0x6F	; 111
 4c6:	ff 4f       	sbci	r31, 0xFF	; 255
 4c8:	01 90       	ld	r0, Z+
 4ca:	f0 81       	ld	r31, Z
 4cc:	e0 2d       	mov	r30, r0
 4ce:	81 81       	ldd	r24, Z+1	; 0x01
 4d0:	88 23       	and	r24, r24
 4d2:	49 f5       	brne	.+82     	; 0x526 <RTO_voidSchedular+0x11e>
					{
						RTO_SYSTASKS[RTO_u8LoopCounter]->u8FirstDelay=RTO_SYSTASKS[RTO_u8LoopCounter]->u8periodicity-1;
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	88 2f       	mov	r24, r24
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	fc 01       	movw	r30, r24
 4e0:	ef 56       	subi	r30, 0x6F	; 111
 4e2:	ff 4f       	sbci	r31, 0xFF	; 255
 4e4:	a0 81       	ld	r26, Z
 4e6:	b1 81       	ldd	r27, Z+1	; 0x01
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	88 2f       	mov	r24, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	fc 01       	movw	r30, r24
 4f4:	ef 56       	subi	r30, 0x6F	; 111
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	01 90       	ld	r0, Z+
 4fa:	f0 81       	ld	r31, Z
 4fc:	e0 2d       	mov	r30, r0
 4fe:	80 81       	ld	r24, Z
 500:	81 50       	subi	r24, 0x01	; 1
 502:	11 96       	adiw	r26, 0x01	; 1
 504:	8c 93       	st	X, r24
						(RTO_SYSTASKS[RTO_u8LoopCounter]->TaskHandler) ();
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	88 2f       	mov	r24, r24
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	fc 01       	movw	r30, r24
 512:	ef 56       	subi	r30, 0x6F	; 111
 514:	ff 4f       	sbci	r31, 0xFF	; 255
 516:	01 90       	ld	r0, Z+
 518:	f0 81       	ld	r31, Z
 51a:	e0 2d       	mov	r30, r0
 51c:	03 80       	ldd	r0, Z+3	; 0x03
 51e:	f4 81       	ldd	r31, Z+4	; 0x04
 520:	e0 2d       	mov	r30, r0
 522:	09 95       	icall
 524:	0e c0       	rjmp	.+28     	; 0x542 <RTO_voidSchedular+0x13a>
					}
					else
					{
						RTO_SYSTASKS[RTO_u8LoopCounter]->u8FirstDelay--;
 526:	89 81       	ldd	r24, Y+1	; 0x01
 528:	88 2f       	mov	r24, r24
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	fc 01       	movw	r30, r24
 532:	ef 56       	subi	r30, 0x6F	; 111
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	01 90       	ld	r0, Z+
 538:	f0 81       	ld	r31, Z
 53a:	e0 2d       	mov	r30, r0
 53c:	81 81       	ldd	r24, Z+1	; 0x01
 53e:	81 50       	subi	r24, 0x01	; 1
 540:	81 83       	std	Z+1, r24	; 0x01
	{
		RTO_u32OvfIncreament=0;
		TIM_voidInitRegister(RTO_u8_INITValue);
		/*Schedular code*/
		/*Loop on all Tasks*/
		for(u8 RTO_u8LoopCounter=0;RTO_u8LoopCounter<RTO_u8_NUM_OF_TASKS;RTO_u8LoopCounter++)
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	88 30       	cpi	r24, 0x08	; 8
 54c:	08 f4       	brcc	.+2      	; 0x550 <RTO_voidSchedular+0x148>
 54e:	98 cf       	rjmp	.-208    	; 0x480 <RTO_voidSchedular+0x78>
			{
				/*No Task created at this location*/
			}
		}
	}
}
 550:	0f 90       	pop	r0
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <RTO_voidInitialize>:

/*This function initialize the RTO driver*/
void RTO_voidInitialize(void)
{
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	28 97       	sbiw	r28, 0x08	; 8
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
	u32 Local_Tovf;
	u32 Local_OvfFrac;
	//	/*Set Call Back of timer to schedular function*/
	TIM_voidSetCallBack(RTO_voidSchedular);
 56c:	84 e0       	ldi	r24, 0x04	; 4
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	0e 94 7d 03 	call	0x6fa	; 0x6fa <TIM_voidSetCallBack>
	//	/*Calculate number of OVF for tick*/
	Local_Tovf=(u32)((u32)((u32)(1<<TIM_u8_TIM_RES) * (u16)(TIM_u16_PRESCALER)) /(u8) RTO_u8_SYS_FREQ_MHZ);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e8       	ldi	r25, 0x80	; 128
 578:	a0 e0       	ldi	r26, 0x00	; 0
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	8d 83       	std	Y+5, r24	; 0x05
 57e:	9e 83       	std	Y+6, r25	; 0x06
 580:	af 83       	std	Y+7, r26	; 0x07
 582:	b8 87       	std	Y+8, r27	; 0x08
	RTO_u32OvfCount=(u32)((u32)((u8) RTO_u8_TICK_TIME_MS * (u32)RTO_u16_MS_TO_US) / (u32)Local_Tovf);
 584:	88 ea       	ldi	r24, 0xA8	; 168
 586:	91 e6       	ldi	r25, 0x61	; 97
 588:	a0 e0       	ldi	r26, 0x00	; 0
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	2d 81       	ldd	r18, Y+5	; 0x05
 58e:	3e 81       	ldd	r19, Y+6	; 0x06
 590:	4f 81       	ldd	r20, Y+7	; 0x07
 592:	58 85       	ldd	r21, Y+8	; 0x08
 594:	bc 01       	movw	r22, r24
 596:	cd 01       	movw	r24, r26
 598:	0e 94 90 04 	call	0x920	; 0x920 <__udivmodsi4>
 59c:	da 01       	movw	r26, r20
 59e:	c9 01       	movw	r24, r18
 5a0:	80 93 88 00 	sts	0x0088, r24
 5a4:	90 93 89 00 	sts	0x0089, r25
 5a8:	a0 93 8a 00 	sts	0x008A, r26
 5ac:	b0 93 8b 00 	sts	0x008B, r27
	Local_OvfFrac=(u32)((u32)((u8)RTO_u8_TICK_TIME_MS * (u32)RTO_u16_MS_TO_US) % (u32)Local_Tovf);
 5b0:	88 ea       	ldi	r24, 0xA8	; 168
 5b2:	91 e6       	ldi	r25, 0x61	; 97
 5b4:	a0 e0       	ldi	r26, 0x00	; 0
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	2d 81       	ldd	r18, Y+5	; 0x05
 5ba:	3e 81       	ldd	r19, Y+6	; 0x06
 5bc:	4f 81       	ldd	r20, Y+7	; 0x07
 5be:	58 85       	ldd	r21, Y+8	; 0x08
 5c0:	bc 01       	movw	r22, r24
 5c2:	cd 01       	movw	r24, r26
 5c4:	0e 94 90 04 	call	0x920	; 0x920 <__udivmodsi4>
 5c8:	dc 01       	movw	r26, r24
 5ca:	cb 01       	movw	r24, r22
 5cc:	89 83       	std	Y+1, r24	; 0x01
 5ce:	9a 83       	std	Y+2, r25	; 0x02
 5d0:	ab 83       	std	Y+3, r26	; 0x03
 5d2:	bc 83       	std	Y+4, r27	; 0x04
	if(Local_OvfFrac != 0)
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	9a 81       	ldd	r25, Y+2	; 0x02
 5d8:	ab 81       	ldd	r26, Y+3	; 0x03
 5da:	bc 81       	ldd	r27, Y+4	; 0x04
 5dc:	00 97       	sbiw	r24, 0x00	; 0
 5de:	a1 05       	cpc	r26, r1
 5e0:	b1 05       	cpc	r27, r1
 5e2:	49 f1       	breq	.+82     	; 0x636 <RTO_voidInitialize+0xde>
	{
		RTO_u32OvfCount++;
 5e4:	80 91 88 00 	lds	r24, 0x0088
 5e8:	90 91 89 00 	lds	r25, 0x0089
 5ec:	a0 91 8a 00 	lds	r26, 0x008A
 5f0:	b0 91 8b 00 	lds	r27, 0x008B
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	a1 1d       	adc	r26, r1
 5f8:	b1 1d       	adc	r27, r1
 5fa:	80 93 88 00 	sts	0x0088, r24
 5fe:	90 93 89 00 	sts	0x0089, r25
 602:	a0 93 8a 00 	sts	0x008A, r26
 606:	b0 93 8b 00 	sts	0x008B, r27
		RTO_u8_INITValue=(u8)((u16)(1 <<TIM_u8_TIM_RES) - (u16)((u32)( (u16) (1 << TIM_u8_TIM_RES) * (u32)Local_OvfFrac) / (u32)Local_Tovf));
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	9a 81       	ldd	r25, Y+2	; 0x02
 60e:	ab 81       	ldd	r26, Y+3	; 0x03
 610:	bc 81       	ldd	r27, Y+4	; 0x04
 612:	ba 2f       	mov	r27, r26
 614:	a9 2f       	mov	r26, r25
 616:	98 2f       	mov	r25, r24
 618:	88 27       	eor	r24, r24
 61a:	2d 81       	ldd	r18, Y+5	; 0x05
 61c:	3e 81       	ldd	r19, Y+6	; 0x06
 61e:	4f 81       	ldd	r20, Y+7	; 0x07
 620:	58 85       	ldd	r21, Y+8	; 0x08
 622:	bc 01       	movw	r22, r24
 624:	cd 01       	movw	r24, r26
 626:	0e 94 90 04 	call	0x920	; 0x920 <__udivmodsi4>
 62a:	da 01       	movw	r26, r20
 62c:	c9 01       	movw	r24, r18
 62e:	81 95       	neg	r24
 630:	80 93 8c 00 	sts	0x008C, r24
 634:	02 c0       	rjmp	.+4      	; 0x63a <RTO_voidInitialize+0xe2>
	}
	else
	{
		RTO_u8_INITValue=0;
 636:	10 92 8c 00 	sts	0x008C, r1
	}
}
 63a:	28 96       	adiw	r28, 0x08	; 8
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	cf 91       	pop	r28
 648:	df 91       	pop	r29
 64a:	08 95       	ret

0000064c <RTO_voidCreateTask>:
/*This function creates a new task*/
void RTO_voidCreateTask(Task * TaskCpy, u8 u8Priority)
{
 64c:	df 93       	push	r29
 64e:	cf 93       	push	r28
 650:	00 d0       	rcall	.+0      	; 0x652 <RTO_voidCreateTask+0x6>
 652:	0f 92       	push	r0
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
 658:	9a 83       	std	Y+2, r25	; 0x02
 65a:	89 83       	std	Y+1, r24	; 0x01
 65c:	6b 83       	std	Y+3, r22	; 0x03
	if(u8Priority< RTO_u8_NUM_OF_TASKS)
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	88 30       	cpi	r24, 0x08	; 8
 662:	60 f4       	brcc	.+24     	; 0x67c <RTO_voidCreateTask+0x30>
	{
		RTO_SYSTASKS[u8Priority]=TaskCpy;
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	88 2f       	mov	r24, r24
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	fc 01       	movw	r30, r24
 670:	ef 56       	subi	r30, 0x6F	; 111
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	89 81       	ldd	r24, Y+1	; 0x01
 676:	9a 81       	ldd	r25, Y+2	; 0x02
 678:	91 83       	std	Z+1, r25	; 0x01
 67a:	80 83       	st	Z, r24
	}
	else
	{
		/*Report Error*/
	}
}
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	cf 91       	pop	r28
 684:	df 91       	pop	r29
 686:	08 95       	ret

00000688 <TIM_voidInitialize>:

static void (* TIM_CallBack) (void);

/*Description: This function shall init the Timer prephiral*/
void TIM_voidInitialize(void)
{
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
	/*clear flag*/
	SET_BIT(TIFR,0);
 690:	a8 e5       	ldi	r26, 0x58	; 88
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	e8 e5       	ldi	r30, 0x58	; 88
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	8c 93       	st	X, r24
	/*disable interrupt*/
	CLR_BIT(TIMSK,0);
 69e:	a9 e5       	ldi	r26, 0x59	; 89
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e9 e5       	ldi	r30, 0x59	; 89
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	8e 7f       	andi	r24, 0xFE	; 254
 6aa:	8c 93       	st	X, r24
	/*initialize timer register*/
	TCNT0=TIM_u8_INIT_VALUE;
 6ac:	e2 e5       	ldi	r30, 0x52	; 82
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	8d e2       	ldi	r24, 0x2D	; 45
 6b2:	80 83       	st	Z, r24
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_64
	TCCR0 = TIM_u8_DIV_BY_64_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_256
	TCCR0 = TIM_u8_DIV_BY_256_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_1024
	TCCR0 = TIM_u8_DIV_BY_1024_MASK;
 6b4:	e3 e5       	ldi	r30, 0x53	; 83
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	85 e0       	ldi	r24, 0x05	; 5
 6ba:	80 83       	st	Z, r24
#endif
}
 6bc:	cf 91       	pop	r28
 6be:	df 91       	pop	r29
 6c0:	08 95       	ret

000006c2 <TIM_voidEnableInt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInt(void)
{
 6c2:	df 93       	push	r29
 6c4:	cf 93       	push	r28
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
 6ca:	a9 e5       	ldi	r26, 0x59	; 89
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	e9 e5       	ldi	r30, 0x59	; 89
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	81 60       	ori	r24, 0x01	; 1
 6d6:	8c 93       	st	X, r24
}
 6d8:	cf 91       	pop	r28
 6da:	df 91       	pop	r29
 6dc:	08 95       	ret

000006de <TIM_voidDisableInt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInt(void)
{
 6de:	df 93       	push	r29
 6e0:	cf 93       	push	r28
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
 6e6:	a9 e5       	ldi	r26, 0x59	; 89
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e9 e5       	ldi	r30, 0x59	; 89
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	8e 7f       	andi	r24, 0xFE	; 254
 6f2:	8c 93       	st	X, r24
}
 6f4:	cf 91       	pop	r28
 6f6:	df 91       	pop	r29
 6f8:	08 95       	ret

000006fa <TIM_voidSetCallBack>:

/*Description: set Timer callback function*/
void TIM_voidSetCallBack(void (* ptrCpy) (void))
{
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	00 d0       	rcall	.+0      	; 0x700 <TIM_voidSetCallBack+0x6>
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
 704:	9a 83       	std	Y+2, r25	; 0x02
 706:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack=ptrCpy;
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	9a 81       	ldd	r25, Y+2	; 0x02
 70c:	90 93 a2 00 	sts	0x00A2, r25
 710:	80 93 a1 00 	sts	0x00A1, r24
}
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	cf 91       	pop	r28
 71a:	df 91       	pop	r29
 71c:	08 95       	ret

0000071e <TIM_voidInitRegister>:

/*Description: init timer register*/
void TIM_voidInitRegister(u8 u8ValueCpy)
{
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	0f 92       	push	r0
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
 72a:	e2 e5       	ldi	r30, 0x52	; 82
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	80 83       	st	Z, r24
}
 732:	0f 90       	pop	r0
 734:	cf 91       	pop	r28
 736:	df 91       	pop	r29
 738:	08 95       	ret

0000073a <__vector_11>:


void __vector_11 (void)__attribute__((signal,used));
void __vector_11 (void)
{
 73a:	1f 92       	push	r1
 73c:	0f 92       	push	r0
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	0f 92       	push	r0
 742:	11 24       	eor	r1, r1
 744:	2f 93       	push	r18
 746:	3f 93       	push	r19
 748:	4f 93       	push	r20
 74a:	5f 93       	push	r21
 74c:	6f 93       	push	r22
 74e:	7f 93       	push	r23
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	af 93       	push	r26
 756:	bf 93       	push	r27
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
 75c:	df 93       	push	r29
 75e:	cf 93       	push	r28
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack();
 764:	e0 91 a1 00 	lds	r30, 0x00A1
 768:	f0 91 a2 00 	lds	r31, 0x00A2
 76c:	09 95       	icall
}
 76e:	cf 91       	pop	r28
 770:	df 91       	pop	r29
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	7f 91       	pop	r23
 780:	6f 91       	pop	r22
 782:	5f 91       	pop	r21
 784:	4f 91       	pop	r20
 786:	3f 91       	pop	r19
 788:	2f 91       	pop	r18
 78a:	0f 90       	pop	r0
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	0f 90       	pop	r0
 790:	1f 90       	pop	r1
 792:	18 95       	reti

00000794 <led1>:
#include "DIO_int.h"
#include "TIM_int.h"
#include "GIE_int.h"
#include "RTO2_init.h"
void led1(void)
{
 794:	df 93       	push	r29
 796:	cf 93       	push	r28
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTA,0);
 79c:	ab e3       	ldi	r26, 0x3B	; 59
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	eb e3       	ldi	r30, 0x3B	; 59
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	90 81       	ld	r25, Z
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	89 27       	eor	r24, r25
 7aa:	8c 93       	st	X, r24
}
 7ac:	cf 91       	pop	r28
 7ae:	df 91       	pop	r29
 7b0:	08 95       	ret

000007b2 <led2>:
void led2(void)
{
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTA,1);
 7ba:	ab e3       	ldi	r26, 0x3B	; 59
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	eb e3       	ldi	r30, 0x3B	; 59
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	90 81       	ld	r25, Z
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	89 27       	eor	r24, r25
 7c8:	8c 93       	st	X, r24
}
 7ca:	cf 91       	pop	r28
 7cc:	df 91       	pop	r29
 7ce:	08 95       	ret

000007d0 <led3>:
void led3(void)
{
 7d0:	df 93       	push	r29
 7d2:	cf 93       	push	r28
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTA,2);
 7d8:	ab e3       	ldi	r26, 0x3B	; 59
 7da:	b0 e0       	ldi	r27, 0x00	; 0
 7dc:	eb e3       	ldi	r30, 0x3B	; 59
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	90 81       	ld	r25, Z
 7e2:	84 e0       	ldi	r24, 0x04	; 4
 7e4:	89 27       	eor	r24, r25
 7e6:	8c 93       	st	X, r24
}
 7e8:	cf 91       	pop	r28
 7ea:	df 91       	pop	r29
 7ec:	08 95       	ret

000007ee <led4>:
void led4(void)
{
 7ee:	df 93       	push	r29
 7f0:	cf 93       	push	r28
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTA,3);
 7f6:	ab e3       	ldi	r26, 0x3B	; 59
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	eb e3       	ldi	r30, 0x3B	; 59
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	90 81       	ld	r25, Z
 800:	88 e0       	ldi	r24, 0x08	; 8
 802:	89 27       	eor	r24, r25
 804:	8c 93       	st	X, r24
}
 806:	cf 91       	pop	r28
 808:	df 91       	pop	r29
 80a:	08 95       	ret

0000080c <led5>:
void led5(void)
{
 80c:	df 93       	push	r29
 80e:	cf 93       	push	r28
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTA,4);
 814:	ab e3       	ldi	r26, 0x3B	; 59
 816:	b0 e0       	ldi	r27, 0x00	; 0
 818:	eb e3       	ldi	r30, 0x3B	; 59
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	90 81       	ld	r25, Z
 81e:	80 e1       	ldi	r24, 0x10	; 16
 820:	89 27       	eor	r24, r25
 822:	8c 93       	st	X, r24
}
 824:	cf 91       	pop	r28
 826:	df 91       	pop	r29
 828:	08 95       	ret

0000082a <led6>:
void led6(void)
{
 82a:	df 93       	push	r29
 82c:	cf 93       	push	r28
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTA,5);
 832:	ab e3       	ldi	r26, 0x3B	; 59
 834:	b0 e0       	ldi	r27, 0x00	; 0
 836:	eb e3       	ldi	r30, 0x3B	; 59
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	90 81       	ld	r25, Z
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	89 27       	eor	r24, r25
 840:	8c 93       	st	X, r24
}
 842:	cf 91       	pop	r28
 844:	df 91       	pop	r29
 846:	08 95       	ret

00000848 <led7>:
void led7(void)
{
 848:	df 93       	push	r29
 84a:	cf 93       	push	r28
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTA,6);
 850:	ab e3       	ldi	r26, 0x3B	; 59
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	eb e3       	ldi	r30, 0x3B	; 59
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	90 81       	ld	r25, Z
 85a:	80 e4       	ldi	r24, 0x40	; 64
 85c:	89 27       	eor	r24, r25
 85e:	8c 93       	st	X, r24
}
 860:	cf 91       	pop	r28
 862:	df 91       	pop	r29
 864:	08 95       	ret

00000866 <led8>:
void led8(void)
{
 866:	df 93       	push	r29
 868:	cf 93       	push	r28
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(PORTA,7);
 86e:	ab e3       	ldi	r26, 0x3B	; 59
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	eb e3       	ldi	r30, 0x3B	; 59
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	90 81       	ld	r25, Z
 878:	80 e8       	ldi	r24, 0x80	; 128
 87a:	89 27       	eor	r24, r25
 87c:	8c 93       	st	X, r24
}
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	08 95       	ret

00000884 <main>:
void main (void)
{
 884:	df 93       	push	r29
 886:	cf 93       	push	r28
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
 88c:	ae 97       	sbiw	r28, 0x2e	; 46
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	f8 94       	cli
 892:	de bf       	out	0x3e, r29	; 62
 894:	0f be       	out	0x3f, r0	; 63
 896:	cd bf       	out	0x3d, r28	; 61
	Task ledTask[8]={
			{4,0,RTO_u8_ACTIVE_STATE,led1},{6,0,RTO_u8_ACTIVE_STATE,led2},
			{8,0,RTO_u8_ACTIVE_STATE,led3},{10,0,RTO_u8_ACTIVE_STATE,led4},
			{2,0,RTO_u8_ACTIVE_STATE,led5},{1,0,RTO_u8_ACTIVE_STATE,led6},
			{5,0,RTO_u8_ACTIVE_STATE,led7},{7,0,RTO_u8_ACTIVE_STATE,led7}
	};
 898:	ce 01       	movw	r24, r28
 89a:	02 96       	adiw	r24, 0x02	; 2
 89c:	9b a7       	std	Y+43, r25	; 0x2b
 89e:	8a a7       	std	Y+42, r24	; 0x2a
 8a0:	e0 e6       	ldi	r30, 0x60	; 96
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	fd a7       	std	Y+45, r31	; 0x2d
 8a6:	ec a7       	std	Y+44, r30	; 0x2c
 8a8:	f8 e2       	ldi	r31, 0x28	; 40
 8aa:	fe a7       	std	Y+46, r31	; 0x2e
 8ac:	ec a5       	ldd	r30, Y+44	; 0x2c
 8ae:	fd a5       	ldd	r31, Y+45	; 0x2d
 8b0:	00 80       	ld	r0, Z
 8b2:	8c a5       	ldd	r24, Y+44	; 0x2c
 8b4:	9d a5       	ldd	r25, Y+45	; 0x2d
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	9d a7       	std	Y+45, r25	; 0x2d
 8ba:	8c a7       	std	Y+44, r24	; 0x2c
 8bc:	ea a5       	ldd	r30, Y+42	; 0x2a
 8be:	fb a5       	ldd	r31, Y+43	; 0x2b
 8c0:	00 82       	st	Z, r0
 8c2:	8a a5       	ldd	r24, Y+42	; 0x2a
 8c4:	9b a5       	ldd	r25, Y+43	; 0x2b
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	9b a7       	std	Y+43, r25	; 0x2b
 8ca:	8a a7       	std	Y+42, r24	; 0x2a
 8cc:	9e a5       	ldd	r25, Y+46	; 0x2e
 8ce:	91 50       	subi	r25, 0x01	; 1
 8d0:	9e a7       	std	Y+46, r25	; 0x2e
 8d2:	ee a5       	ldd	r30, Y+46	; 0x2e
 8d4:	ee 23       	and	r30, r30
 8d6:	51 f7       	brne	.-44     	; 0x8ac <main+0x28>
	for(u8 i=0;i<8;i++)
 8d8:	19 82       	std	Y+1, r1	; 0x01
 8da:	14 c0       	rjmp	.+40     	; 0x904 <main+0x80>
	{
		RTO_voidCreateTask(&ledTask[i],i);
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	c9 01       	movw	r24, r18
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	28 0f       	add	r18, r24
 8ee:	39 1f       	adc	r19, r25
 8f0:	ce 01       	movw	r24, r28
 8f2:	02 96       	adiw	r24, 0x02	; 2
 8f4:	82 0f       	add	r24, r18
 8f6:	93 1f       	adc	r25, r19
 8f8:	69 81       	ldd	r22, Y+1	; 0x01
 8fa:	0e 94 26 03 	call	0x64c	; 0x64c <RTO_voidCreateTask>
			{4,0,RTO_u8_ACTIVE_STATE,led1},{6,0,RTO_u8_ACTIVE_STATE,led2},
			{8,0,RTO_u8_ACTIVE_STATE,led3},{10,0,RTO_u8_ACTIVE_STATE,led4},
			{2,0,RTO_u8_ACTIVE_STATE,led5},{1,0,RTO_u8_ACTIVE_STATE,led6},
			{5,0,RTO_u8_ACTIVE_STATE,led7},{7,0,RTO_u8_ACTIVE_STATE,led7}
	};
	for(u8 i=0;i<8;i++)
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	8f 5f       	subi	r24, 0xFF	; 255
 902:	89 83       	std	Y+1, r24	; 0x01
 904:	89 81       	ldd	r24, Y+1	; 0x01
 906:	88 30       	cpi	r24, 0x08	; 8
 908:	48 f3       	brcs	.-46     	; 0x8dc <main+0x58>
	{
		RTO_voidCreateTask(&ledTask[i],i);
	}
	DIO_voidInitialize();
 90a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInitialize>
	TIM_voidInitialize();
 90e:	0e 94 44 03 	call	0x688	; 0x688 <TIM_voidInitialize>
	TIM_voidEnableInt();
 912:	0e 94 61 03 	call	0x6c2	; 0x6c2 <TIM_voidEnableInt>
	RTO_voidInitialize();
 916:	0e 94 ac 02 	call	0x558	; 0x558 <RTO_voidInitialize>
	GIE_EnableGlobalInterrupt();
 91a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GIE_EnableGlobalInterrupt>
 91e:	ff cf       	rjmp	.-2      	; 0x91e <main+0x9a>

00000920 <__udivmodsi4>:
 920:	a1 e2       	ldi	r26, 0x21	; 33
 922:	1a 2e       	mov	r1, r26
 924:	aa 1b       	sub	r26, r26
 926:	bb 1b       	sub	r27, r27
 928:	fd 01       	movw	r30, r26
 92a:	0d c0       	rjmp	.+26     	; 0x946 <__udivmodsi4_ep>

0000092c <__udivmodsi4_loop>:
 92c:	aa 1f       	adc	r26, r26
 92e:	bb 1f       	adc	r27, r27
 930:	ee 1f       	adc	r30, r30
 932:	ff 1f       	adc	r31, r31
 934:	a2 17       	cp	r26, r18
 936:	b3 07       	cpc	r27, r19
 938:	e4 07       	cpc	r30, r20
 93a:	f5 07       	cpc	r31, r21
 93c:	20 f0       	brcs	.+8      	; 0x946 <__udivmodsi4_ep>
 93e:	a2 1b       	sub	r26, r18
 940:	b3 0b       	sbc	r27, r19
 942:	e4 0b       	sbc	r30, r20
 944:	f5 0b       	sbc	r31, r21

00000946 <__udivmodsi4_ep>:
 946:	66 1f       	adc	r22, r22
 948:	77 1f       	adc	r23, r23
 94a:	88 1f       	adc	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	1a 94       	dec	r1
 950:	69 f7       	brne	.-38     	; 0x92c <__udivmodsi4_loop>
 952:	60 95       	com	r22
 954:	70 95       	com	r23
 956:	80 95       	com	r24
 958:	90 95       	com	r25
 95a:	9b 01       	movw	r18, r22
 95c:	ac 01       	movw	r20, r24
 95e:	bd 01       	movw	r22, r26
 960:	cf 01       	movw	r24, r30
 962:	08 95       	ret

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>
