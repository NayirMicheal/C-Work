
PlaneSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000007e8  0000087c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800078  00800078  00000894  2**0
                  ALLOC
  3 .stab         00000d38  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000072b  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 03 	call	0x720	; 0x720 <main>
  8a:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1ea:	e1 e3       	ldi	r30, 0x31	; 49
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	10 82       	st	Z, r1
}
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

000001f6 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <DIO_voidSetPinValue+0x6>
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	60 f5       	brcc	.+88     	; 0x262 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	88 23       	and	r24, r24
 20e:	a1 f4       	brne	.+40     	; 0x238 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 210:	ab e3       	ldi	r26, 0x3B	; 59
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	eb e3       	ldi	r30, 0x3B	; 59
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinValue+0x38>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinValue+0x34>
 232:	84 2b       	or	r24, r20
 234:	8c 93       	st	X, r24
 236:	b3 c0       	rjmp	.+358    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 238:	ab e3       	ldi	r26, 0x3B	; 59
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	eb e3       	ldi	r30, 0x3B	; 59
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_voidSetPinValue+0x60>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_voidSetPinValue+0x5c>
 25a:	80 95       	com	r24
 25c:	84 23       	and	r24, r20
 25e:	8c 93       	st	X, r24
 260:	9e c0       	rjmp	.+316    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	90 f1       	brcs	.+100    	; 0x2cc <DIO_voidSetPinValue+0xd6>
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	80 31       	cpi	r24, 0x10	; 16
 26c:	78 f5       	brcc	.+94     	; 0x2cc <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	88 50       	subi	r24, 0x08	; 8
 272:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	88 23       	and	r24, r24
 278:	a1 f4       	brne	.+40     	; 0x2a2 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27a:	a8 e3       	ldi	r26, 0x38	; 56
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e8 e3       	ldi	r30, 0x38	; 56
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	48 2f       	mov	r20, r24
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPinValue+0xa2>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPinValue+0x9e>
 29c:	84 2b       	or	r24, r20
 29e:	8c 93       	st	X, r24
 2a0:	7e c0       	rjmp	.+252    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a2:	a8 e3       	ldi	r26, 0x38	; 56
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e8 e3       	ldi	r30, 0x38	; 56
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	48 2f       	mov	r20, r24
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 2e       	mov	r0, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_voidSetPinValue+0xca>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_voidSetPinValue+0xc6>
 2c4:	80 95       	com	r24
 2c6:	84 23       	and	r24, r20
 2c8:	8c 93       	st	X, r24
 2ca:	69 c0       	rjmp	.+210    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	80 31       	cpi	r24, 0x10	; 16
 2d0:	90 f1       	brcs	.+100    	; 0x336 <DIO_voidSetPinValue+0x140>
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	88 31       	cpi	r24, 0x18	; 24
 2d6:	78 f5       	brcc	.+94     	; 0x336 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	80 51       	subi	r24, 0x10	; 16
 2dc:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	88 23       	and	r24, r24
 2e2:	a1 f4       	brne	.+40     	; 0x30c <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e3       	ldi	r30, 0x35	; 53
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_voidSetPinValue+0x10c>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_voidSetPinValue+0x108>
 306:	84 2b       	or	r24, r20
 308:	8c 93       	st	X, r24
 30a:	49 c0       	rjmp	.+146    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30c:	a5 e3       	ldi	r26, 0x35	; 53
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e5 e3       	ldi	r30, 0x35	; 53
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	48 2f       	mov	r20, r24
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 2e       	mov	r0, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_voidSetPinValue+0x134>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_voidSetPinValue+0x130>
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	8c 93       	st	X, r24
 334:	34 c0       	rjmp	.+104    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	88 31       	cpi	r24, 0x18	; 24
 33a:	88 f1       	brcs	.+98     	; 0x39e <DIO_voidSetPinValue+0x1a8>
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	80 32       	cpi	r24, 0x20	; 32
 340:	70 f5       	brcc	.+92     	; 0x39e <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	88 51       	subi	r24, 0x18	; 24
 346:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	88 23       	and	r24, r24
 34c:	a1 f4       	brne	.+40     	; 0x376 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 34e:	a2 e3       	ldi	r26, 0x32	; 50
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e2 e3       	ldi	r30, 0x32	; 50
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_voidSetPinValue+0x176>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_voidSetPinValue+0x172>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	14 c0       	rjmp	.+40     	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 376:	a2 e3       	ldi	r26, 0x32	; 50
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e2 e3       	ldi	r30, 0x32	; 50
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_voidSetPinValue+0x19e>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_voidSetPinValue+0x19a>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
		}			
	}
}
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3a8:	df 93       	push	r29
 3aa:	cf 93       	push	r28
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <DIO_u8GetPinValue+0x6>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x8>
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
 3b4:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	88 30       	cpi	r24, 0x08	; 8
 3ba:	00 f5       	brcc	.+64     	; 0x3fc <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3bc:	8c 81       	ldd	r24, Y+4	; 0x04
 3be:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c0:	e9 e3       	ldi	r30, 0x39	; 57
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	48 2f       	mov	r20, r24
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_u8GetPinValue+0x32>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	2a 95       	dec	r18
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_u8GetPinValue+0x2e>
 3de:	9a 01       	movw	r18, r20
 3e0:	28 23       	and	r18, r24
 3e2:	39 23       	and	r19, r25
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	a9 01       	movw	r20, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_u8GetPinValue+0x4a>
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_u8GetPinValue+0x46>
 3f6:	ca 01       	movw	r24, r20
 3f8:	8a 83       	std	Y+2, r24	; 0x02
 3fa:	74 c0       	rjmp	.+232    	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	80 31       	cpi	r24, 0x10	; 16
 400:	20 f1       	brcs	.+72     	; 0x44a <DIO_u8GetPinValue+0xa2>
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	88 31       	cpi	r24, 0x18	; 24
 406:	08 f5       	brcc	.+66     	; 0x44a <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 408:	8c 81       	ldd	r24, Y+4	; 0x04
 40a:	88 50       	subi	r24, 0x08	; 8
 40c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 40e:	e6 e3       	ldi	r30, 0x36	; 54
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	48 2f       	mov	r20, r24
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_u8GetPinValue+0x80>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	2a 95       	dec	r18
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_u8GetPinValue+0x7c>
 42c:	9a 01       	movw	r18, r20
 42e:	28 23       	and	r18, r24
 430:	39 23       	and	r19, r25
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	a9 01       	movw	r20, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8GetPinValue+0x98>
 43c:	55 95       	asr	r21
 43e:	47 95       	ror	r20
 440:	8a 95       	dec	r24
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_u8GetPinValue+0x94>
 444:	ca 01       	movw	r24, r20
 446:	8a 83       	std	Y+2, r24	; 0x02
 448:	4d c0       	rjmp	.+154    	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44a:	8c 81       	ldd	r24, Y+4	; 0x04
 44c:	80 31       	cpi	r24, 0x10	; 16
 44e:	20 f1       	brcs	.+72     	; 0x498 <DIO_u8GetPinValue+0xf0>
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	88 31       	cpi	r24, 0x18	; 24
 454:	08 f5       	brcc	.+66     	; 0x498 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	80 51       	subi	r24, 0x10	; 16
 45a:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45c:	e6 e3       	ldi	r30, 0x36	; 54
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	48 2f       	mov	r20, r24
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_u8GetPinValue+0xce>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	2a 95       	dec	r18
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_u8GetPinValue+0xca>
 47a:	9a 01       	movw	r18, r20
 47c:	28 23       	and	r18, r24
 47e:	39 23       	and	r19, r25
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	88 2f       	mov	r24, r24
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	a9 01       	movw	r20, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_u8GetPinValue+0xe6>
 48a:	55 95       	asr	r21
 48c:	47 95       	ror	r20
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_u8GetPinValue+0xe2>
 492:	ca 01       	movw	r24, r20
 494:	8a 83       	std	Y+2, r24	; 0x02
 496:	26 c0       	rjmp	.+76     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	88 31       	cpi	r24, 0x18	; 24
 49c:	18 f1       	brcs	.+70     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	80 32       	cpi	r24, 0x20	; 32
 4a2:	00 f5       	brcc	.+64     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	88 51       	subi	r24, 0x18	; 24
 4a8:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4aa:	e0 e3       	ldi	r30, 0x30	; 48
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_u8GetPinValue+0x11c>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	2a 95       	dec	r18
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_u8GetPinValue+0x118>
 4c8:	9a 01       	movw	r18, r20
 4ca:	28 23       	and	r18, r24
 4cc:	39 23       	and	r19, r25
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	a9 01       	movw	r20, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8GetPinValue+0x134>
 4d8:	55 95       	asr	r21
 4da:	47 95       	ror	r20
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8GetPinValue+0x130>
 4e0:	ca 01       	movw	r24, r20
 4e2:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	88 23       	and	r24, r24
 4e8:	19 f4       	brne	.+6      	; 0x4f0 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	08 95       	ret

00000508 <LEDS_voidSetLedOn>:
#include "STD_TYPES.h"
#include "DIO_int.h"
#include "LEDS_priv.h"
#include "LEDS_int.h"
void LEDS_voidSetLedOn(u8 u8LedIndexCpy)
{
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	0f 92       	push	r0
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	89 83       	std	Y+1, r24	; 0x01

	if(u8LedIndexCpy < LEDS_u8_LEDS_NB)
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	88 30       	cpi	r24, 0x08	; 8
 518:	f0 f4       	brcc	.+60     	; 0x556 <LEDS_voidSetLedOn+0x4e>
	{
		if (LEDS_u8LedMode[u8LedIndexCpy] == LEDS_u8_MODE_NORMAL)
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	88 2f       	mov	r24, r24
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fc 01       	movw	r30, r24
 522:	e8 59       	subi	r30, 0x98	; 152
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	80 81       	ld	r24, Z
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	59 f4       	brne	.+22     	; 0x542 <LEDS_voidSetLedOn+0x3a>
		{
			DIO_voidSetPinValue(LEDS_u8LedToDioLink[u8LedIndexCpy],DIO_u8_HIGH);
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	fc 01       	movw	r30, r24
 534:	e0 5a       	subi	r30, 0xA0	; 160
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	80 81       	ld	r24, Z
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
 540:	0a c0       	rjmp	.+20     	; 0x556 <LEDS_voidSetLedOn+0x4e>
		}
		else
		{
			DIO_voidSetPinValue(LEDS_u8LedToDioLink[u8LedIndexCpy],DIO_u8_LOW);
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	88 2f       	mov	r24, r24
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	fc 01       	movw	r30, r24
 54a:	e0 5a       	subi	r30, 0xA0	; 160
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	80 81       	ld	r24, Z
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	}
	else
	{

	}
}
 556:	0f 90       	pop	r0
 558:	cf 91       	pop	r28
 55a:	df 91       	pop	r29
 55c:	08 95       	ret

0000055e <LEDS_voidSetLedOff>:
void LEDS_voidSetLedOff(u8 u8LedIndexCpy)
{
 55e:	df 93       	push	r29
 560:	cf 93       	push	r28
 562:	0f 92       	push	r0
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	89 83       	std	Y+1, r24	; 0x01

	if(u8LedIndexCpy < LEDS_u8_LEDS_NB)
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	88 30       	cpi	r24, 0x08	; 8
 56e:	f0 f4       	brcc	.+60     	; 0x5ac <LEDS_voidSetLedOff+0x4e>
	{
		if (LEDS_u8LedMode[u8LedIndexCpy] == LEDS_u8_MODE_NORMAL)
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	88 2f       	mov	r24, r24
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	fc 01       	movw	r30, r24
 578:	e8 59       	subi	r30, 0x98	; 152
 57a:	ff 4f       	sbci	r31, 0xFF	; 255
 57c:	80 81       	ld	r24, Z
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	59 f4       	brne	.+22     	; 0x598 <LEDS_voidSetLedOff+0x3a>
		{
			DIO_voidSetPinValue(LEDS_u8LedToDioLink[u8LedIndexCpy],DIO_u8_LOW);
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	88 2f       	mov	r24, r24
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	fc 01       	movw	r30, r24
 58a:	e0 5a       	subi	r30, 0xA0	; 160
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	80 81       	ld	r24, Z
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
 596:	0a c0       	rjmp	.+20     	; 0x5ac <LEDS_voidSetLedOff+0x4e>
		}
		else
		{
			DIO_voidSetPinValue(LEDS_u8LedToDioLink[u8LedIndexCpy],DIO_u8_HIGH);
 598:	89 81       	ldd	r24, Y+1	; 0x01
 59a:	88 2f       	mov	r24, r24
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	fc 01       	movw	r30, r24
 5a0:	e0 5a       	subi	r30, 0xA0	; 160
 5a2:	ff 4f       	sbci	r31, 0xFF	; 255
 5a4:	80 81       	ld	r24, Z
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	}
	else
	{

	}
}
 5ac:	0f 90       	pop	r0
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <SevenSeg_voidDisplayOnSeg>:
#include "SEVENSEG_int.h"
#include "SEVENSEG_priv.h"

/*Display on Seven segment take a u8 variable a display it on the seven segment */
void SevenSeg_voidDisplayOnSeg(u8 u8PaternCpy)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	0f 92       	push	r0
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	89 83       	std	Y+1, r24	; 0x01
	/*if the seven segment type is Anode type*/
#if u8_SEVENSEG_TYPE == u8_SEVENSEG_ANODE
	/*then set the bit of the common with high value*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_COMMON,DIO_u8_HIGH);
 5c0:	88 e0       	ldi	r24, 0x08	; 8
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 0 of the sent variable and out it on the seven segment A*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_A,GET_BIT(u8PaternCpy,0));
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	98 2f       	mov	r25, r24
 5cc:	91 70       	andi	r25, 0x01	; 1
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	69 2f       	mov	r22, r25
 5d2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 1 of the sent variable and out it on the seven segment B*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_B,GET_BIT(u8PaternCpy,1));
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	88 2f       	mov	r24, r24
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	82 70       	andi	r24, 0x02	; 2
 5de:	90 70       	andi	r25, 0x00	; 0
 5e0:	95 95       	asr	r25
 5e2:	87 95       	ror	r24
 5e4:	98 2f       	mov	r25, r24
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	69 2f       	mov	r22, r25
 5ea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 2 of the sent variable and out it on the seven segment C*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_C,GET_BIT(u8PaternCpy,2));
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	84 70       	andi	r24, 0x04	; 4
 5f6:	90 70       	andi	r25, 0x00	; 0
 5f8:	95 95       	asr	r25
 5fa:	87 95       	ror	r24
 5fc:	95 95       	asr	r25
 5fe:	87 95       	ror	r24
 600:	98 2f       	mov	r25, r24
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	69 2f       	mov	r22, r25
 606:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 3 of the sent variable and out it on the seven segment D*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_D,GET_BIT(u8PaternCpy,3));
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	88 2f       	mov	r24, r24
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	88 70       	andi	r24, 0x08	; 8
 612:	90 70       	andi	r25, 0x00	; 0
 614:	95 95       	asr	r25
 616:	87 95       	ror	r24
 618:	95 95       	asr	r25
 61a:	87 95       	ror	r24
 61c:	95 95       	asr	r25
 61e:	87 95       	ror	r24
 620:	98 2f       	mov	r25, r24
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	69 2f       	mov	r22, r25
 626:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 4 of the sent variable and out it on the seven segment E*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_E,GET_BIT(u8PaternCpy,4));
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	88 2f       	mov	r24, r24
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	80 71       	andi	r24, 0x10	; 16
 632:	90 70       	andi	r25, 0x00	; 0
 634:	95 95       	asr	r25
 636:	87 95       	ror	r24
 638:	95 95       	asr	r25
 63a:	87 95       	ror	r24
 63c:	95 95       	asr	r25
 63e:	87 95       	ror	r24
 640:	95 95       	asr	r25
 642:	87 95       	ror	r24
 644:	98 2f       	mov	r25, r24
 646:	84 e0       	ldi	r24, 0x04	; 4
 648:	69 2f       	mov	r22, r25
 64a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 5 of the sent variable and out it on the seven segment F*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_F,GET_BIT(u8PaternCpy,5));
 64e:	89 81       	ldd	r24, Y+1	; 0x01
 650:	88 2f       	mov	r24, r24
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	80 72       	andi	r24, 0x20	; 32
 656:	90 70       	andi	r25, 0x00	; 0
 658:	95 95       	asr	r25
 65a:	87 95       	ror	r24
 65c:	95 95       	asr	r25
 65e:	87 95       	ror	r24
 660:	95 95       	asr	r25
 662:	87 95       	ror	r24
 664:	95 95       	asr	r25
 666:	87 95       	ror	r24
 668:	95 95       	asr	r25
 66a:	87 95       	ror	r24
 66c:	98 2f       	mov	r25, r24
 66e:	85 e0       	ldi	r24, 0x05	; 5
 670:	69 2f       	mov	r22, r25
 672:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 6 of the sent variable and out it on the seven segment G*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_G,GET_BIT(u8PaternCpy,6));
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	88 2f       	mov	r24, r24
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	80 74       	andi	r24, 0x40	; 64
 67e:	90 70       	andi	r25, 0x00	; 0
 680:	08 2e       	mov	r0, r24
 682:	89 2f       	mov	r24, r25
 684:	00 0c       	add	r0, r0
 686:	88 1f       	adc	r24, r24
 688:	99 0b       	sbc	r25, r25
 68a:	00 0c       	add	r0, r0
 68c:	88 1f       	adc	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	98 2f       	mov	r25, r24
 692:	86 e0       	ldi	r24, 0x06	; 6
 694:	69 2f       	mov	r22, r25
 696:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 7 of the sent variable and out it on the seven segment DOT*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_DOT,GET_BIT(u8PaternCpy,7));
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	98 2f       	mov	r25, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	99 27       	eor	r25, r25
 6a2:	99 1f       	adc	r25, r25
 6a4:	87 e0       	ldi	r24, 0x07	; 7
 6a6:	69 2f       	mov	r22, r25
 6a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*get bit 7 of the sent variable and out it on the seven segment DOT*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_DOT,!GET_BIT(u8PaternCpy,7));
#endif


}
 6ac:	0f 90       	pop	r0
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	08 95       	ret

000006b4 <SWD_u8GetSwitchState>:
#include"SWD_priv.h"
#include"SWD_int.h"


u8 SWD_u8GetSwitchState(u8 u8SwIdxCpy)
{
 6b4:	df 93       	push	r29
 6b6:	cf 93       	push	r28
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <SWD_u8GetSwitchState+0x6>
 6ba:	0f 92       	push	r0
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	8b 83       	std	Y+3, r24	; 0x03
	u8 DioStateLoc;
	u8 SwitchStateLoc;
	if(u8SwIdxCpy < SWD_u8_SW_NB)
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	88 30       	cpi	r24, 0x08	; 8
 6c6:	20 f5       	brcc	.+72     	; 0x710 <SWD_u8GetSwitchState+0x5c>
	{
		DioStateLoc=DIO_u8GetPinValue(SWD_u8SwToDioLink[u8SwIdxCpy]);
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	fc 01       	movw	r30, r24
 6d0:	e0 59       	subi	r30, 0x90	; 144
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
 6d4:	80 81       	ld	r24, Z
 6d6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_u8GetPinValue>
 6da:	8a 83       	std	Y+2, r24	; 0x02
		/*if switch state equals its open state return released*/
		if(DioStateLoc==SWD_u8SwOpenState[u8SwIdxCpy])
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	88 2f       	mov	r24, r24
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	fc 01       	movw	r30, r24
 6e4:	e8 58       	subi	r30, 0x88	; 136
 6e6:	ff 4f       	sbci	r31, 0xFF	; 255
 6e8:	90 81       	ld	r25, Z
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	98 17       	cp	r25, r24
 6ee:	19 f4       	brne	.+6      	; 0x6f6 <SWD_u8GetSwitchState+0x42>
		{
			SwitchStateLoc= SWD_u8RELEASED;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	0e c0       	rjmp	.+28     	; 0x712 <SWD_u8GetSwitchState+0x5e>
		}
		/*if switch state not equal open state return pushed */
		else if(DioStateLoc != SWD_u8SwOpenState[u8SwIdxCpy])
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	fc 01       	movw	r30, r24
 6fe:	e8 58       	subi	r30, 0x88	; 136
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	90 81       	ld	r25, Z
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	98 17       	cp	r25, r24
 708:	21 f0       	breq	.+8      	; 0x712 <SWD_u8GetSwitchState+0x5e>
		{
			SwitchStateLoc= SWD_u8PUSHED;
 70a:	82 e0       	ldi	r24, 0x02	; 2
 70c:	89 83       	std	Y+1, r24	; 0x01
 70e:	01 c0       	rjmp	.+2      	; 0x712 <SWD_u8GetSwitchState+0x5e>
		}
	}
	/* Error: returned if the number of switch isn't in the range */
	else{
		SwitchStateLoc= SWD_u8ERROR;
 710:	19 82       	std	Y+1, r1	; 0x01
		}
	return SwitchStateLoc;
 712:	89 81       	ldd	r24, Y+1	; 0x01
}
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	cf 91       	pop	r28
 71c:	df 91       	pop	r29
 71e:	08 95       	ret

00000720 <main>:
#include"DIO_int.h"
#include"LEDS_int.h"
#include"SWD_int.h"
#include"SEVENSEG_int.h"
void main (void)
{
 720:	df 93       	push	r29
 722:	cf 93       	push	r28
 724:	0f 92       	push	r0
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 72a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	while(1)
	{
		for(u8 SwAndLedLoc=0;SwAndLedLoc<8;SwAndLedLoc++)
 72e:	19 82       	std	Y+1, r1	; 0x01
 730:	14 c0       	rjmp	.+40     	; 0x75a <main+0x3a>
		{
			if(SWD_u8GetSwitchState(SwAndLedLoc)==SWD_u8PUSHED)
 732:	89 81       	ldd	r24, Y+1	; 0x01
 734:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <SWD_u8GetSwitchState>
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	21 f4       	brne	.+8      	; 0x744 <main+0x24>
			{
				LEDS_voidSetLedOn(SwAndLedLoc);
 73c:	89 81       	ldd	r24, Y+1	; 0x01
 73e:	0e 94 84 02 	call	0x508	; 0x508 <LEDS_voidSetLedOn>
 742:	08 c0       	rjmp	.+16     	; 0x754 <main+0x34>
			}
			else if(SWD_u8GetSwitchState(SwAndLedLoc)==SWD_u8RELEASED)
 744:	89 81       	ldd	r24, Y+1	; 0x01
 746:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <SWD_u8GetSwitchState>
 74a:	81 30       	cpi	r24, 0x01	; 1
 74c:	19 f4       	brne	.+6      	; 0x754 <main+0x34>
			{
				LEDS_voidSetLedOff(SwAndLedLoc);
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	0e 94 af 02 	call	0x55e	; 0x55e <LEDS_voidSetLedOff>
void main (void)
{
	DIO_voidInitialize();
	while(1)
	{
		for(u8 SwAndLedLoc=0;SwAndLedLoc<8;SwAndLedLoc++)
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	89 81       	ldd	r24, Y+1	; 0x01
 75c:	88 30       	cpi	r24, 0x08	; 8
 75e:	48 f3       	brcs	.-46     	; 0x732 <main+0x12>
 760:	e6 cf       	rjmp	.-52     	; 0x72e <main+0xe>

00000762 <__mulsi3>:
 762:	62 9f       	mul	r22, r18
 764:	d0 01       	movw	r26, r0
 766:	73 9f       	mul	r23, r19
 768:	f0 01       	movw	r30, r0
 76a:	82 9f       	mul	r24, r18
 76c:	e0 0d       	add	r30, r0
 76e:	f1 1d       	adc	r31, r1
 770:	64 9f       	mul	r22, r20
 772:	e0 0d       	add	r30, r0
 774:	f1 1d       	adc	r31, r1
 776:	92 9f       	mul	r25, r18
 778:	f0 0d       	add	r31, r0
 77a:	83 9f       	mul	r24, r19
 77c:	f0 0d       	add	r31, r0
 77e:	74 9f       	mul	r23, r20
 780:	f0 0d       	add	r31, r0
 782:	65 9f       	mul	r22, r21
 784:	f0 0d       	add	r31, r0
 786:	99 27       	eor	r25, r25
 788:	72 9f       	mul	r23, r18
 78a:	b0 0d       	add	r27, r0
 78c:	e1 1d       	adc	r30, r1
 78e:	f9 1f       	adc	r31, r25
 790:	63 9f       	mul	r22, r19
 792:	b0 0d       	add	r27, r0
 794:	e1 1d       	adc	r30, r1
 796:	f9 1f       	adc	r31, r25
 798:	bd 01       	movw	r22, r26
 79a:	cf 01       	movw	r24, r30
 79c:	11 24       	eor	r1, r1
 79e:	08 95       	ret

000007a0 <__udivmodsi4>:
 7a0:	a1 e2       	ldi	r26, 0x21	; 33
 7a2:	1a 2e       	mov	r1, r26
 7a4:	aa 1b       	sub	r26, r26
 7a6:	bb 1b       	sub	r27, r27
 7a8:	fd 01       	movw	r30, r26
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <__udivmodsi4_ep>

000007ac <__udivmodsi4_loop>:
 7ac:	aa 1f       	adc	r26, r26
 7ae:	bb 1f       	adc	r27, r27
 7b0:	ee 1f       	adc	r30, r30
 7b2:	ff 1f       	adc	r31, r31
 7b4:	a2 17       	cp	r26, r18
 7b6:	b3 07       	cpc	r27, r19
 7b8:	e4 07       	cpc	r30, r20
 7ba:	f5 07       	cpc	r31, r21
 7bc:	20 f0       	brcs	.+8      	; 0x7c6 <__udivmodsi4_ep>
 7be:	a2 1b       	sub	r26, r18
 7c0:	b3 0b       	sbc	r27, r19
 7c2:	e4 0b       	sbc	r30, r20
 7c4:	f5 0b       	sbc	r31, r21

000007c6 <__udivmodsi4_ep>:
 7c6:	66 1f       	adc	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	1a 94       	dec	r1
 7d0:	69 f7       	brne	.-38     	; 0x7ac <__udivmodsi4_loop>
 7d2:	60 95       	com	r22
 7d4:	70 95       	com	r23
 7d6:	80 95       	com	r24
 7d8:	90 95       	com	r25
 7da:	9b 01       	movw	r18, r22
 7dc:	ac 01       	movw	r20, r24
 7de:	bd 01       	movw	r22, r26
 7e0:	cf 01       	movw	r24, r30
 7e2:	08 95       	ret

000007e4 <_exit>:
 7e4:	f8 94       	cli

000007e6 <__stop_program>:
 7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <__stop_program>
