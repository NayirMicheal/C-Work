
LED_intensity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000bbe  00000c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  00000c68  2**0
                  ALLOC
  3 .stab         00001338  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000094f  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_10>
  2c:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 30 05 	call	0xa60	; 0xa60 <main>
  8a:	0c 94 dd 05 	jmp	0xbba	; 0xbba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 9c 05 	call	0xb38	; 0xb38 <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 9c 05 	call	0xb38	; 0xb38 <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 bb 05 	call	0xb76	; 0xb76 <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1ea:	e1 e3       	ldi	r30, 0x31	; 49
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	88 ef       	ldi	r24, 0xF8	; 248
 1f0:	80 83       	st	Z, r24
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_voidSetPinValue+0x6>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 30       	cpi	r24, 0x08	; 8
 20a:	60 f5       	brcc	.+88     	; 0x264 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	88 23       	and	r24, r24
 210:	a1 f4       	brne	.+40     	; 0x23a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 212:	ab e3       	ldi	r26, 0x3B	; 59
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x38>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x34>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	b3 c0       	rjmp	.+358    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 23a:	ab e3       	ldi	r26, 0x3B	; 59
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	eb e3       	ldi	r30, 0x3B	; 59
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0x60>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0x5c>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	9e c0       	rjmp	.+316    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	90 f1       	brcs	.+100    	; 0x2ce <DIO_voidSetPinValue+0xd6>
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	80 31       	cpi	r24, 0x10	; 16
 26e:	78 f5       	brcc	.+94     	; 0x2ce <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 50       	subi	r24, 0x08	; 8
 274:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	88 23       	and	r24, r24
 27a:	a1 f4       	brne	.+40     	; 0x2a4 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27c:	a8 e3       	ldi	r26, 0x38	; 56
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e8 e3       	ldi	r30, 0x38	; 56
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xa2>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0x9e>
 29e:	84 2b       	or	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a4:	a8 e3       	ldi	r26, 0x38	; 56
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinValue+0xca>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinValue+0xc6>
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 31       	cpi	r24, 0x10	; 16
 2d2:	90 f1       	brcs	.+100    	; 0x338 <DIO_voidSetPinValue+0x140>
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 31       	cpi	r24, 0x18	; 24
 2d8:	78 f5       	brcc	.+94     	; 0x338 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	80 51       	subi	r24, 0x10	; 16
 2de:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	88 23       	and	r24, r24
 2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e6:	a5 e3       	ldi	r26, 0x35	; 53
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e5 e3       	ldi	r30, 0x35	; 53
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x10c>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x108>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	49 c0       	rjmp	.+146    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30e:	a5 e3       	ldi	r26, 0x35	; 53
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e5 e3       	ldi	r30, 0x35	; 53
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x134>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x130>
 330:	80 95       	com	r24
 332:	84 23       	and	r24, r20
 334:	8c 93       	st	X, r24
 336:	34 c0       	rjmp	.+104    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	70 f5       	brcc	.+92     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 51       	subi	r24, 0x18	; 24
 348:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 23       	and	r24, r24
 34e:	a1 f4       	brne	.+40     	; 0x378 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 350:	a2 e3       	ldi	r26, 0x32	; 50
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e2 e3       	ldi	r30, 0x32	; 50
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x176>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x172>
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 378:	a2 e3       	ldi	r26, 0x32	; 50
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e2 e3       	ldi	r30, 0x32	; 50
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x19e>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x19a>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	8c 93       	st	X, r24
		}			
	}
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8GetPinValue+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	00 f5       	brcc	.+64     	; 0x3fe <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c2:	e9 e3       	ldi	r30, 0x39	; 57
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8GetPinValue+0x32>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	2a 95       	dec	r18
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8GetPinValue+0x2e>
 3e0:	9a 01       	movw	r18, r20
 3e2:	28 23       	and	r18, r24
 3e4:	39 23       	and	r19, r25
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPinValue+0x4a>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPinValue+0x46>
 3f8:	ca 01       	movw	r24, r20
 3fa:	8a 83       	std	Y+2, r24	; 0x02
 3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 3fe:	8c 81       	ldd	r24, Y+4	; 0x04
 400:	88 30       	cpi	r24, 0x08	; 8
 402:	20 f1       	brcs	.+72     	; 0x44c <DIO_u8GetPinValue+0xa2>
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	80 31       	cpi	r24, 0x10	; 16
 408:	08 f5       	brcc	.+66     	; 0x44c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	88 50       	subi	r24, 0x08	; 8
 40e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 410:	e6 e3       	ldi	r30, 0x36	; 54
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8GetPinValue+0x80>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	2a 95       	dec	r18
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8GetPinValue+0x7c>
 42e:	9a 01       	movw	r18, r20
 430:	28 23       	and	r18, r24
 432:	39 23       	and	r19, r25
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a9 01       	movw	r20, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0x98>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0x94>
 446:	ca 01       	movw	r24, r20
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	4d c0       	rjmp	.+154    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	80 31       	cpi	r24, 0x10	; 16
 450:	20 f1       	brcs	.+72     	; 0x49a <DIO_u8GetPinValue+0xf0>
 452:	8c 81       	ldd	r24, Y+4	; 0x04
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	08 f5       	brcc	.+66     	; 0x49a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	80 51       	subi	r24, 0x10	; 16
 45c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45e:	e6 e3       	ldi	r30, 0x36	; 54
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8GetPinValue+0xce>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8GetPinValue+0xca>
 47c:	9a 01       	movw	r18, r20
 47e:	28 23       	and	r18, r24
 480:	39 23       	and	r19, r25
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a9 01       	movw	r20, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8GetPinValue+0xe6>
 48c:	55 95       	asr	r21
 48e:	47 95       	ror	r20
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8GetPinValue+0xe2>
 494:	ca 01       	movw	r24, r20
 496:	8a 83       	std	Y+2, r24	; 0x02
 498:	26 c0       	rjmp	.+76     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	88 31       	cpi	r24, 0x18	; 24
 49e:	18 f1       	brcs	.+70     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	80 32       	cpi	r24, 0x20	; 32
 4a4:	00 f5       	brcc	.+64     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	88 51       	subi	r24, 0x18	; 24
 4aa:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4ac:	e0 e3       	ldi	r30, 0x30	; 48
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0x11c>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	2a 95       	dec	r18
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0x118>
 4ca:	9a 01       	movw	r18, r20
 4cc:	28 23       	and	r18, r24
 4ce:	39 23       	and	r19, r25
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a9 01       	movw	r20, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8GetPinValue+0x134>
 4da:	55 95       	asr	r21
 4dc:	47 95       	ror	r20
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8GetPinValue+0x130>
 4e2:	ca 01       	movw	r24, r20
 4e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	88 23       	and	r24, r24
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
 512:	62 e3       	ldi	r22, 0x32	; 50
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*Write Function Set command*/
	voidWriteCmd(0b00110000 | (LCD_u8_FONT<<2) | (LCD_u8_NUM_OF_LINES<<3));
 51e:	88 e3       	ldi	r24, 0x38	; 56
 520:	0e 94 be 02 	call	0x57c	; 0x57c <voidWriteCmd>

	Delay_ms(1);
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write Display on command*/
	voidWriteCmd(0b00001000 | (LCD_u8_BLINK_ON_OFF<<0) | (LCD_u8_CURSOR_ON_OFF<<1) | (LCD_u8_DISPLAY_ON_OFF<<2));
 530:	8c e0       	ldi	r24, 0x0C	; 12
 532:	0e 94 be 02 	call	0x57c	; 0x57c <voidWriteCmd>

	Delay_ms(1);
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write command clear display*/
	voidWriteCmd(0b00000001);
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 be 02 	call	0x57c	; 0x57c <voidWriteCmd>

	Delay_ms(2);
 548:	62 e0       	ldi	r22, 0x02	; 2
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 554:	cf 91       	pop	r28
 556:	df 91       	pop	r29
 558:	08 95       	ret

0000055a <voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
static void voidWriteData(u8 u8DataCpy)
{
 55a:	df 93       	push	r29
 55c:	cf 93       	push	r28
 55e:	0f 92       	push	r0
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
 566:	8d e1       	ldi	r24, 0x1D	; 29
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	0e 94 cf 02 	call	0x59e	; 0x59e <voidLcdExecute>
}
 574:	0f 90       	pop	r0
 576:	cf 91       	pop	r28
 578:	df 91       	pop	r29
 57a:	08 95       	ret

0000057c <voidWriteCmd>:
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
static void voidWriteCmd(u8 u8CommandCpy)
{
 57c:	df 93       	push	r29
 57e:	cf 93       	push	r28
 580:	0f 92       	push	r0
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
 588:	8d e1       	ldi	r24, 0x1D	; 29
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	0e 94 cf 02 	call	0x59e	; 0x59e <voidLcdExecute>
}
 596:	0f 90       	pop	r0
 598:	cf 91       	pop	r28
 59a:	df 91       	pop	r29
 59c:	08 95       	ret

0000059e <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
 59e:	df 93       	push	r29
 5a0:	cf 93       	push	r28
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <voidLcdExecute+0x6>
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	8a 83       	std	Y+2, r24	; 0x02
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
 5aa:	8e e1       	ldi	r24, 0x1E	; 30
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 5b2:	19 82       	std	Y+1, r1	; 0x01
 5b4:	34 c0       	rjmp	.+104    	; 0x61e <voidLcdExecute+0x80>
	{
		if(GET_BIT(u8ValueCpy,u8PinsCounterLocal))
 5b6:	8a 81       	ldd	r24, Y+2	; 0x02
 5b8:	48 2f       	mov	r20, r24
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <voidLcdExecute+0x2e>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	2a 95       	dec	r18
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <voidLcdExecute+0x2a>
 5d0:	9a 01       	movw	r18, r20
 5d2:	28 23       	and	r18, r24
 5d4:	39 23       	and	r19, r25
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	88 2f       	mov	r24, r24
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a9 01       	movw	r20, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <voidLcdExecute+0x46>
 5e0:	55 95       	asr	r21
 5e2:	47 95       	ror	r20
 5e4:	8a 95       	dec	r24
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <voidLcdExecute+0x42>
 5e8:	ca 01       	movw	r24, r20
 5ea:	00 97       	sbiw	r24, 0x00	; 0
 5ec:	59 f0       	breq	.+22     	; 0x604 <voidLcdExecute+0x66>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_HIGH);
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	fc 01       	movw	r30, r24
 5f6:	e6 59       	subi	r30, 0x96	; 150
 5f8:	ff 4f       	sbci	r31, 0xFF	; 255
 5fa:	80 81       	ld	r24, Z
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
 602:	0a c0       	rjmp	.+20     	; 0x618 <voidLcdExecute+0x7a>
		}
			else
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
 604:	89 81       	ldd	r24, Y+1	; 0x01
 606:	88 2f       	mov	r24, r24
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	fc 01       	movw	r30, r24
 60c:	e6 59       	subi	r30, 0x96	; 150
 60e:	ff 4f       	sbci	r31, 0xFF	; 255
 610:	80 81       	ld	r24, Z
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
static void voidLcdExecute(u8 u8ValueCpy)
{
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	88 30       	cpi	r24, 0x08	; 8
 622:	48 f2       	brcs	.-110    	; 0x5b6 <voidLcdExecute+0x18>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
		}
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
 624:	8f e1       	ldi	r24, 0x1F	; 31
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_ms(1);
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
 638:	8f e1       	ldi	r24, 0x1F	; 31
 63a:	61 e0       	ldi	r22, 0x01	; 1
 63c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
}
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	cf 91       	pop	r28
 646:	df 91       	pop	r29
 648:	08 95       	ret

0000064a <LCD_voidWriteStringXY>:


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
 64a:	df 93       	push	r29
 64c:	cf 93       	push	r28
 64e:	00 d0       	rcall	.+0      	; 0x650 <LCD_voidWriteStringXY+0x6>
 650:	00 d0       	rcall	.+0      	; 0x652 <LCD_voidWriteStringXY+0x8>
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	9a 83       	std	Y+2, r25	; 0x02
 658:	89 83       	std	Y+1, r24	; 0x01
 65a:	6b 83       	std	Y+3, r22	; 0x03
 65c:	4c 83       	std	Y+4, r20	; 0x04
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
 65e:	8c 81       	ldd	r24, Y+4	; 0x04
 660:	88 2f       	mov	r24, r24
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	00 24       	eor	r0, r0
 666:	96 95       	lsr	r25
 668:	87 95       	ror	r24
 66a:	07 94       	ror	r0
 66c:	96 95       	lsr	r25
 66e:	87 95       	ror	r24
 670:	07 94       	ror	r0
 672:	98 2f       	mov	r25, r24
 674:	80 2d       	mov	r24, r0
 676:	98 2f       	mov	r25, r24
 678:	90 68       	ori	r25, 0x80	; 128
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	89 2b       	or	r24, r25
 67e:	0e 94 be 02 	call	0x57c	; 0x57c <voidWriteCmd>
 682:	0a c0       	rjmp	.+20     	; 0x698 <LCD_voidWriteStringXY+0x4e>
	while(*u8PtrCpy)
	{
		voidWriteData(*u8PtrCpy);
 684:	e9 81       	ldd	r30, Y+1	; 0x01
 686:	fa 81       	ldd	r31, Y+2	; 0x02
 688:	80 81       	ld	r24, Z
 68a:	0e 94 ad 02 	call	0x55a	; 0x55a <voidWriteData>
		u8PtrCpy++;
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	9a 81       	ldd	r25, Y+2	; 0x02
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	9a 83       	std	Y+2, r25	; 0x02
 696:	89 83       	std	Y+1, r24	; 0x01


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
	while(*u8PtrCpy)
 698:	e9 81       	ldd	r30, Y+1	; 0x01
 69a:	fa 81       	ldd	r31, Y+2	; 0x02
 69c:	80 81       	ld	r24, Z
 69e:	88 23       	and	r24, r24
 6a0:	89 f7       	brne	.-30     	; 0x684 <LCD_voidWriteStringXY+0x3a>
	{
		voidWriteData(*u8PtrCpy);
		u8PtrCpy++;
	}
}
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	cf 91       	pop	r28
 6ac:	df 91       	pop	r29
 6ae:	08 95       	ret

000006b0 <LCD_voidWriteStringCurrentPosition>:
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
 6b0:	df 93       	push	r29
 6b2:	cf 93       	push	r28
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <LCD_voidWriteStringCurrentPosition+0x6>
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
 6ba:	9a 83       	std	Y+2, r25	; 0x02
 6bc:	89 83       	std	Y+1, r24	; 0x01
 6be:	0a c0       	rjmp	.+20     	; 0x6d4 <LCD_voidWriteStringCurrentPosition+0x24>
	while(*u8PtrCpy)
		{
			voidWriteData(*u8PtrCpy);
 6c0:	e9 81       	ldd	r30, Y+1	; 0x01
 6c2:	fa 81       	ldd	r31, Y+2	; 0x02
 6c4:	80 81       	ld	r24, Z
 6c6:	0e 94 ad 02 	call	0x55a	; 0x55a <voidWriteData>
			u8PtrCpy++;
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
 6cc:	9a 81       	ldd	r25, Y+2	; 0x02
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	9a 83       	std	Y+2, r25	; 0x02
 6d2:	89 83       	std	Y+1, r24	; 0x01
		u8PtrCpy++;
	}
}
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
	while(*u8PtrCpy)
 6d4:	e9 81       	ldd	r30, Y+1	; 0x01
 6d6:	fa 81       	ldd	r31, Y+2	; 0x02
 6d8:	80 81       	ld	r24, Z
 6da:	88 23       	and	r24, r24
 6dc:	89 f7       	brne	.-30     	; 0x6c0 <LCD_voidWriteStringCurrentPosition+0x10>
		{
			voidWriteData(*u8PtrCpy);
			u8PtrCpy++;
		}
}
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	cf 91       	pop	r28
 6e4:	df 91       	pop	r29
 6e6:	08 95       	ret

000006e8 <LCD_voidClearDisplay>:
extern void LCD_voidClearDisplay(void)
{
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
	voidWriteCmd(0b00000001);
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 be 02 	call	0x57c	; 0x57c <voidWriteCmd>
	Delay_ms(2);
 6f6:	62 e0       	ldi	r22, 0x02	; 2
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 702:	cf 91       	pop	r28
 704:	df 91       	pop	r29
 706:	08 95       	ret

00000708 <LCD_voidDrawCustomChar>:

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
 708:	df 93       	push	r29
 70a:	cf 93       	push	r28
 70c:	00 d0       	rcall	.+0      	; 0x70e <LCD_voidDrawCustomChar+0x6>
 70e:	00 d0       	rcall	.+0      	; 0x710 <LCD_voidDrawCustomChar+0x8>
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	9b 83       	std	Y+3, r25	; 0x03
 716:	8a 83       	std	Y+2, r24	; 0x02
 718:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
 71a:	8c 81       	ldd	r24, Y+4	; 0x04
 71c:	88 2f       	mov	r24, r24
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	80 64       	ori	r24, 0x40	; 64
 72e:	0e 94 be 02 	call	0x57c	; 0x57c <voidWriteCmd>
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 732:	19 82       	std	Y+1, r1	; 0x01
 734:	0e c0       	rjmp	.+28     	; 0x752 <LCD_voidDrawCustomChar+0x4a>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
 736:	89 81       	ldd	r24, Y+1	; 0x01
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	9b 81       	ldd	r25, Y+3	; 0x03
 740:	fc 01       	movw	r30, r24
 742:	e2 0f       	add	r30, r18
 744:	f3 1f       	adc	r31, r19
 746:	80 81       	ld	r24, Z
 748:	0e 94 ad 02 	call	0x55a	; 0x55a <voidWriteData>
}

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	8f 5f       	subi	r24, 0xFF	; 255
 750:	89 83       	std	Y+1, r24	; 0x01
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	88 30       	cpi	r24, 0x08	; 8
 756:	78 f3       	brcs	.-34     	; 0x736 <LCD_voidDrawCustomChar+0x2e>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
	}
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	cf 91       	pop	r28
 762:	df 91       	pop	r29
 764:	08 95       	ret

00000766 <LCD_voidWriteCustomChar>:

extern void LCD_voidWriteCustomChar(u8 u8IndexCpy ,u8 u8XPositionCpy,u8 u8YPositionCpy)
{
 766:	df 93       	push	r29
 768:	cf 93       	push	r28
 76a:	00 d0       	rcall	.+0      	; 0x76c <LCD_voidWriteCustomChar+0x6>
 76c:	0f 92       	push	r0
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	6a 83       	std	Y+2, r22	; 0x02
 776:	4b 83       	std	Y+3, r20	; 0x03
	voidWriteCmd((0x80 | (u8YPositionCpy<<6) | u8XPositionCpy));
 778:	8b 81       	ldd	r24, Y+3	; 0x03
 77a:	88 2f       	mov	r24, r24
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	00 24       	eor	r0, r0
 780:	96 95       	lsr	r25
 782:	87 95       	ror	r24
 784:	07 94       	ror	r0
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	07 94       	ror	r0
 78c:	98 2f       	mov	r25, r24
 78e:	80 2d       	mov	r24, r0
 790:	98 2f       	mov	r25, r24
 792:	90 68       	ori	r25, 0x80	; 128
 794:	8a 81       	ldd	r24, Y+2	; 0x02
 796:	89 2b       	or	r24, r25
 798:	0e 94 be 02 	call	0x57c	; 0x57c <voidWriteCmd>
	voidWriteData(u8IndexCpy);
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	0e 94 ad 02 	call	0x55a	; 0x55a <voidWriteData>
}
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	cf 91       	pop	r28
 7aa:	df 91       	pop	r29
 7ac:	08 95       	ret

000007ae <SWD_u8GetSwitchState>:
#include"SWD_priv.h"
#include"SWD_int.h"


u8 SWD_u8GetSwitchState(u8 u8SwIdxCpy)
{
 7ae:	df 93       	push	r29
 7b0:	cf 93       	push	r28
 7b2:	00 d0       	rcall	.+0      	; 0x7b4 <SWD_u8GetSwitchState+0x6>
 7b4:	0f 92       	push	r0
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
 7ba:	8b 83       	std	Y+3, r24	; 0x03
	u8 DioStateLoc;
	u8 SwitchStateLoc;
	if(u8SwIdxCpy < SWD_u8_SW_NB)
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	82 30       	cpi	r24, 0x02	; 2
 7c0:	20 f5       	brcc	.+72     	; 0x80a <SWD_u8GetSwitchState+0x5c>
	{
		DioStateLoc=DIO_u8GetPinValue(SWD_u8SwToDioLink[u8SwIdxCpy]);
 7c2:	8b 81       	ldd	r24, Y+3	; 0x03
 7c4:	88 2f       	mov	r24, r24
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	fc 01       	movw	r30, r24
 7ca:	ee 58       	subi	r30, 0x8E	; 142
 7cc:	ff 4f       	sbci	r31, 0xFF	; 255
 7ce:	80 81       	ld	r24, Z
 7d0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 7d4:	8a 83       	std	Y+2, r24	; 0x02
		/*if switch state equals its open state return released*/
		if(DioStateLoc==SWD_u8SwOpenState[u8SwIdxCpy])
 7d6:	8b 81       	ldd	r24, Y+3	; 0x03
 7d8:	88 2f       	mov	r24, r24
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	fc 01       	movw	r30, r24
 7de:	ea 58       	subi	r30, 0x8A	; 138
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	90 81       	ld	r25, Z
 7e4:	8a 81       	ldd	r24, Y+2	; 0x02
 7e6:	98 17       	cp	r25, r24
 7e8:	19 f4       	brne	.+6      	; 0x7f0 <SWD_u8GetSwitchState+0x42>
		{
			SwitchStateLoc= SWD_u8RELEASED;
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	89 83       	std	Y+1, r24	; 0x01
 7ee:	0e c0       	rjmp	.+28     	; 0x80c <SWD_u8GetSwitchState+0x5e>
		}
		/*if switch state not equal open state return pushed */
		else if(DioStateLoc != SWD_u8SwOpenState[u8SwIdxCpy])
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	88 2f       	mov	r24, r24
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	fc 01       	movw	r30, r24
 7f8:	ea 58       	subi	r30, 0x8A	; 138
 7fa:	ff 4f       	sbci	r31, 0xFF	; 255
 7fc:	90 81       	ld	r25, Z
 7fe:	8a 81       	ldd	r24, Y+2	; 0x02
 800:	98 17       	cp	r25, r24
 802:	21 f0       	breq	.+8      	; 0x80c <SWD_u8GetSwitchState+0x5e>
		{
			SwitchStateLoc= SWD_u8PUSHED;
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	89 83       	std	Y+1, r24	; 0x01
 808:	01 c0       	rjmp	.+2      	; 0x80c <SWD_u8GetSwitchState+0x5e>
		}
	}
	/* Error: returned if the number of switch isn't in the range */
	else{
		SwitchStateLoc= SWD_u8ERROR;
 80a:	19 82       	std	Y+1, r1	; 0x01
		}
	return SwitchStateLoc;
 80c:	89 81       	ldd	r24, Y+1	; 0x01
}
 80e:	0f 90       	pop	r0
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	cf 91       	pop	r28
 816:	df 91       	pop	r29
 818:	08 95       	ret

0000081a <TIM_voidInitialize>:
static void (* TIM_CallBack) (void);
static void (* TIM_CallBack_CTC) (void);

/*Description: This function shall init the Timer prephiral*/
void TIM_voidInitialize(void)
{
 81a:	df 93       	push	r29
 81c:	cf 93       	push	r28
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
	/*clear flag*/
	SET_BIT(TIFR,0);
 822:	a8 e5       	ldi	r26, 0x58	; 88
 824:	b0 e0       	ldi	r27, 0x00	; 0
 826:	e8 e5       	ldi	r30, 0x58	; 88
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	81 60       	ori	r24, 0x01	; 1
 82e:	8c 93       	st	X, r24
	SET_BIT(TIFR,1);
 830:	a8 e5       	ldi	r26, 0x58	; 88
 832:	b0 e0       	ldi	r27, 0x00	; 0
 834:	e8 e5       	ldi	r30, 0x58	; 88
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	82 60       	ori	r24, 0x02	; 2
 83c:	8c 93       	st	X, r24
	/*disable interrupt for counting and ctc*/
	CLR_BIT(TIMSK,0);
 83e:	a9 e5       	ldi	r26, 0x59	; 89
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	e9 e5       	ldi	r30, 0x59	; 89
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	8e 7f       	andi	r24, 0xFE	; 254
 84a:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
 84c:	a9 e5       	ldi	r26, 0x59	; 89
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	e9 e5       	ldi	r30, 0x59	; 89
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	8d 7f       	andi	r24, 0xFD	; 253
 858:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
#elif TIM_u8_FAST_PWM_MODES == TIM_u8_FAST_PWM_REVERSE
	SET_BIT(TCCR0,4);
	CLR_BIT(TCCR0,5);
#elif TIM_u8_FAST_PWM_MODES == TIM_u8_FAST_PWM_CLEAR_OC0
	CLR_BIT(TCCR0,4);
 85a:	a3 e5       	ldi	r26, 0x53	; 83
 85c:	b0 e0       	ldi	r27, 0x00	; 0
 85e:	e3 e5       	ldi	r30, 0x53	; 83
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	80 81       	ld	r24, Z
 864:	8f 7e       	andi	r24, 0xEF	; 239
 866:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
 868:	a3 e5       	ldi	r26, 0x53	; 83
 86a:	b0 e0       	ldi	r27, 0x00	; 0
 86c:	e3 e5       	ldi	r30, 0x53	; 83
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	80 62       	ori	r24, 0x20	; 32
 874:	8c 93       	st	X, r24
#elif TIM_u8_FAST_PWM_MODES == TIM_u8_FAST_PWM_SET_OC0
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#endif
	OCR0=TIM_u8_OCR0_VALUE;
 876:	ec e5       	ldi	r30, 0x5C	; 92
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	8e ef       	ldi	r24, 0xFE	; 254
 87c:	80 83       	st	Z, r24
	SET_BIT(TCCR0,3);
 87e:	a3 e5       	ldi	r26, 0x53	; 83
 880:	b0 e0       	ldi	r27, 0x00	; 0
 882:	e3 e5       	ldi	r30, 0x53	; 83
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	88 60       	ori	r24, 0x08	; 8
 88a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
 88c:	a3 e5       	ldi	r26, 0x53	; 83
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	e3 e5       	ldi	r30, 0x53	; 83
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	80 64       	ori	r24, 0x40	; 64
 898:	8c 93       	st	X, r24
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_64
	TCCR0 |= TIM_u8_DIV_BY_64_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_256
	TCCR0 |= TIM_u8_DIV_BY_256_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_1024
	TCCR0 |= TIM_u8_DIV_BY_1024_MASK;
 89a:	a3 e5       	ldi	r26, 0x53	; 83
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	e3 e5       	ldi	r30, 0x53	; 83
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
 8a4:	85 60       	ori	r24, 0x05	; 5
 8a6:	8c 93       	st	X, r24
#endif
}
 8a8:	cf 91       	pop	r28
 8aa:	df 91       	pop	r29
 8ac:	08 95       	ret

000008ae <TIM_voidEnableInt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInt(void)
{
 8ae:	df 93       	push	r29
 8b0:	cf 93       	push	r28
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
 8b6:	a9 e5       	ldi	r26, 0x59	; 89
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e9 e5       	ldi	r30, 0x59	; 89
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	81 60       	ori	r24, 0x01	; 1
 8c2:	8c 93       	st	X, r24
}
 8c4:	cf 91       	pop	r28
 8c6:	df 91       	pop	r29
 8c8:	08 95       	ret

000008ca <TIM_voidDisableInt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInt(void)
{
 8ca:	df 93       	push	r29
 8cc:	cf 93       	push	r28
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
 8d2:	a9 e5       	ldi	r26, 0x59	; 89
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	e9 e5       	ldi	r30, 0x59	; 89
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	8e 7f       	andi	r24, 0xFE	; 254
 8de:	8c 93       	st	X, r24
}
 8e0:	cf 91       	pop	r28
 8e2:	df 91       	pop	r29
 8e4:	08 95       	ret

000008e6 <TIM_voidEnableIntCTC>:

/*Description: enable Timer interrupt CTC*/
void TIM_voidEnableIntCTC(void)
{
 8e6:	df 93       	push	r29
 8e8:	cf 93       	push	r28
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
 8ee:	a9 e5       	ldi	r26, 0x59	; 89
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	e9 e5       	ldi	r30, 0x59	; 89
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	8c 93       	st	X, r24
}
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <TIM_voidDisableIntCTC>:

/*Description: disable Timer interrupt CTC*/
void TIM_voidDisableIntCTC(void)
{
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
 90a:	a9 e5       	ldi	r26, 0x59	; 89
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	e9 e5       	ldi	r30, 0x59	; 89
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	8d 7f       	andi	r24, 0xFD	; 253
 916:	8c 93       	st	X, r24
}
 918:	cf 91       	pop	r28
 91a:	df 91       	pop	r29
 91c:	08 95       	ret

0000091e <TIM_voidSetCallBack>:


/*Description: set Timer callback function*/
void TIM_voidSetCallBack(void (* ptrCpy) (void))
{
 91e:	df 93       	push	r29
 920:	cf 93       	push	r28
 922:	00 d0       	rcall	.+0      	; 0x924 <TIM_voidSetCallBack+0x6>
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	9a 83       	std	Y+2, r25	; 0x02
 92a:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack=ptrCpy;
 92c:	89 81       	ldd	r24, Y+1	; 0x01
 92e:	9a 81       	ldd	r25, Y+2	; 0x02
 930:	90 93 79 00 	sts	0x0079, r25
 934:	80 93 78 00 	sts	0x0078, r24
}
 938:	0f 90       	pop	r0
 93a:	0f 90       	pop	r0
 93c:	cf 91       	pop	r28
 93e:	df 91       	pop	r29
 940:	08 95       	ret

00000942 <TIM_voidSetCallBackCTC>:

/*Description: set CTC Timer callback function*/
void TIM_voidSetCallBackCTC(void (* ptrCpy) (void))
{
 942:	df 93       	push	r29
 944:	cf 93       	push	r28
 946:	00 d0       	rcall	.+0      	; 0x948 <TIM_voidSetCallBackCTC+0x6>
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	9a 83       	std	Y+2, r25	; 0x02
 94e:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack_CTC=ptrCpy;
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	9a 81       	ldd	r25, Y+2	; 0x02
 954:	90 93 7b 00 	sts	0x007B, r25
 958:	80 93 7a 00 	sts	0x007A, r24
}
 95c:	0f 90       	pop	r0
 95e:	0f 90       	pop	r0
 960:	cf 91       	pop	r28
 962:	df 91       	pop	r29
 964:	08 95       	ret

00000966 <TIM_voidInitCountingRegister>:

/*Description: init timer register*/
void TIM_voidInitCountingRegister(u8 u8ValueCpy)
{
 966:	df 93       	push	r29
 968:	cf 93       	push	r28
 96a:	0f 92       	push	r0
 96c:	cd b7       	in	r28, 0x3d	; 61
 96e:	de b7       	in	r29, 0x3e	; 62
 970:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
 972:	e2 e5       	ldi	r30, 0x52	; 82
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	89 81       	ldd	r24, Y+1	; 0x01
 978:	80 83       	st	Z, r24
}
 97a:	0f 90       	pop	r0
 97c:	cf 91       	pop	r28
 97e:	df 91       	pop	r29
 980:	08 95       	ret

00000982 <TIM_voidInitCTCRegister>:

/*Description: init OCR0 timer register*/
void TIM_voidInitCTCRegister(u8 u8ValueCpy)
{
 982:	df 93       	push	r29
 984:	cf 93       	push	r28
 986:	0f 92       	push	r0
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
 98c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8ValueCpy;
 98e:	ec e5       	ldi	r30, 0x5C	; 92
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	80 83       	st	Z, r24
}
 996:	0f 90       	pop	r0
 998:	cf 91       	pop	r28
 99a:	df 91       	pop	r29
 99c:	08 95       	ret

0000099e <__vector_11>:

void __vector_11 (void)__attribute__((signal,used));
void __vector_11 (void)
{
 99e:	1f 92       	push	r1
 9a0:	0f 92       	push	r0
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	0f 92       	push	r0
 9a6:	11 24       	eor	r1, r1
 9a8:	2f 93       	push	r18
 9aa:	3f 93       	push	r19
 9ac:	4f 93       	push	r20
 9ae:	5f 93       	push	r21
 9b0:	6f 93       	push	r22
 9b2:	7f 93       	push	r23
 9b4:	8f 93       	push	r24
 9b6:	9f 93       	push	r25
 9b8:	af 93       	push	r26
 9ba:	bf 93       	push	r27
 9bc:	ef 93       	push	r30
 9be:	ff 93       	push	r31
 9c0:	df 93       	push	r29
 9c2:	cf 93       	push	r28
 9c4:	cd b7       	in	r28, 0x3d	; 61
 9c6:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack();
 9c8:	e0 91 78 00 	lds	r30, 0x0078
 9cc:	f0 91 79 00 	lds	r31, 0x0079
 9d0:	09 95       	icall
}
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	ff 91       	pop	r31
 9d8:	ef 91       	pop	r30
 9da:	bf 91       	pop	r27
 9dc:	af 91       	pop	r26
 9de:	9f 91       	pop	r25
 9e0:	8f 91       	pop	r24
 9e2:	7f 91       	pop	r23
 9e4:	6f 91       	pop	r22
 9e6:	5f 91       	pop	r21
 9e8:	4f 91       	pop	r20
 9ea:	3f 91       	pop	r19
 9ec:	2f 91       	pop	r18
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <__vector_10>:


void __vector_10 (void)__attribute__((signal,used));
void __vector_10 (void)
{
 9f8:	1f 92       	push	r1
 9fa:	0f 92       	push	r0
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	0f 92       	push	r0
 a00:	11 24       	eor	r1, r1
 a02:	2f 93       	push	r18
 a04:	3f 93       	push	r19
 a06:	4f 93       	push	r20
 a08:	5f 93       	push	r21
 a0a:	6f 93       	push	r22
 a0c:	7f 93       	push	r23
 a0e:	8f 93       	push	r24
 a10:	9f 93       	push	r25
 a12:	af 93       	push	r26
 a14:	bf 93       	push	r27
 a16:	ef 93       	push	r30
 a18:	ff 93       	push	r31
 a1a:	df 93       	push	r29
 a1c:	cf 93       	push	r28
 a1e:	cd b7       	in	r28, 0x3d	; 61
 a20:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack_CTC();
 a22:	e0 91 7a 00 	lds	r30, 0x007A
 a26:	f0 91 7b 00 	lds	r31, 0x007B
 a2a:	09 95       	icall
}
 a2c:	cf 91       	pop	r28
 a2e:	df 91       	pop	r29
 a30:	ff 91       	pop	r31
 a32:	ef 91       	pop	r30
 a34:	bf 91       	pop	r27
 a36:	af 91       	pop	r26
 a38:	9f 91       	pop	r25
 a3a:	8f 91       	pop	r24
 a3c:	7f 91       	pop	r23
 a3e:	6f 91       	pop	r22
 a40:	5f 91       	pop	r21
 a42:	4f 91       	pop	r20
 a44:	3f 91       	pop	r19
 a46:	2f 91       	pop	r18
 a48:	0f 90       	pop	r0
 a4a:	0f be       	out	0x3f, r0	; 63
 a4c:	0f 90       	pop	r0
 a4e:	1f 90       	pop	r1
 a50:	18 95       	reti

00000a52 <callback>:



u8 u8PwmWidth=254;
void callback(void)
{
 a52:	df 93       	push	r29
 a54:	cf 93       	push	r28
 a56:	cd b7       	in	r28, 0x3d	; 61
 a58:	de b7       	in	r29, 0x3e	; 62

}
 a5a:	cf 91       	pop	r28
 a5c:	df 91       	pop	r29
 a5e:	08 95       	ret

00000a60 <main>:
void main(void)
{
 a60:	df 93       	push	r29
 a62:	cf 93       	push	r28
 a64:	00 d0       	rcall	.+0      	; 0xa66 <main+0x6>
 a66:	00 d0       	rcall	.+0      	; 0xa68 <main+0x8>
 a68:	00 d0       	rcall	.+0      	; 0xa6a <main+0xa>
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62
	u8  block[2]={255,0};
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	8b 83       	std	Y+3, r24	; 0x03
 a72:	1c 82       	std	Y+4, r1	; 0x04
	u8  space[2]={254,0};
 a74:	8e ef       	ldi	r24, 0xFE	; 254
 a76:	8d 83       	std	Y+5, r24	; 0x05
 a78:	1e 82       	std	Y+6, r1	; 0x06
	u8 index=7;
 a7a:	87 e0       	ldi	r24, 0x07	; 7
 a7c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_voidInitialize();
 a7e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_24,DIO_u8_HIGH);
 a82:	88 e1       	ldi	r24, 0x18	; 24
 a84:	60 e0       	ldi	r22, 0x00	; 0
 a86:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_25,DIO_u8_HIGH);
 a8a:	89 e1       	ldi	r24, 0x19	; 25
 a8c:	60 e0       	ldi	r22, 0x00	; 0
 a8e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	LCD_voidInitialize();
 a92:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_voidInitialize>
	TIM_voidInitialize();
 a96:	0e 94 0d 04 	call	0x81a	; 0x81a <TIM_voidInitialize>
	LCD_voidWriteStringCurrentPosition((u8 *)"INTENSITY");
 a9a:	80 e6       	ldi	r24, 0x60	; 96
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_voidWriteStringCurrentPosition>
	for(u8 i=0;i<8;i++)
 aa2:	19 82       	std	Y+1, r1	; 0x01
 aa4:	09 c0       	rjmp	.+18     	; 0xab8 <main+0x58>
		LCD_voidWriteStringXY((u8 *)block,i,1);
 aa6:	ce 01       	movw	r24, r28
 aa8:	03 96       	adiw	r24, 0x03	; 3
 aaa:	69 81       	ldd	r22, Y+1	; 0x01
 aac:	41 e0       	ldi	r20, 0x01	; 1
 aae:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_voidWriteStringXY>
	DIO_voidSetPinValue(DIO_u8_PIN_24,DIO_u8_HIGH);
	DIO_voidSetPinValue(DIO_u8_PIN_25,DIO_u8_HIGH);
	LCD_voidInitialize();
	TIM_voidInitialize();
	LCD_voidWriteStringCurrentPosition((u8 *)"INTENSITY");
	for(u8 i=0;i<8;i++)
 ab2:	89 81       	ldd	r24, Y+1	; 0x01
 ab4:	8f 5f       	subi	r24, 0xFF	; 255
 ab6:	89 83       	std	Y+1, r24	; 0x01
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	88 30       	cpi	r24, 0x08	; 8
 abc:	a0 f3       	brcs	.-24     	; 0xaa6 <main+0x46>
		LCD_voidWriteStringXY((u8 *)block,i,1);
	while(1)
	{

		if(SWD_u8GetSwitchState(SWD_u8_SW1)==SWD_u8PUSHED)
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <SWD_u8GetSwitchState>
 ac4:	82 30       	cpi	r24, 0x02	; 2
 ac6:	b1 f4       	brne	.+44     	; 0xaf4 <main+0x94>
		{
			if(u8PwmWidth>U8_SMALLEST_PERIOD)
 ac8:	80 91 74 00 	lds	r24, 0x0074
 acc:	8f 30       	cpi	r24, 0x0F	; 15
 ace:	70 f0       	brcs	.+28     	; 0xaec <main+0x8c>
			{
				u8PwmWidth-=30;
 ad0:	80 91 74 00 	lds	r24, 0x0074
 ad4:	8e 51       	subi	r24, 0x1E	; 30
 ad6:	80 93 74 00 	sts	0x0074, r24
				LCD_voidWriteStringXY((u8 *) space,index,1);
 ada:	ce 01       	movw	r24, r28
 adc:	05 96       	adiw	r24, 0x05	; 5
 ade:	6a 81       	ldd	r22, Y+2	; 0x02
 ae0:	41 e0       	ldi	r20, 0x01	; 1
 ae2:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_voidWriteStringXY>
				index--;
 ae6:	8a 81       	ldd	r24, Y+2	; 0x02
 ae8:	81 50       	subi	r24, 0x01	; 1
 aea:	8a 83       	std	Y+2, r24	; 0x02
			}
			TIM_voidInitCTCRegister(u8PwmWidth);
 aec:	80 91 74 00 	lds	r24, 0x0074
 af0:	0e 94 c1 04 	call	0x982	; 0x982 <TIM_voidInitCTCRegister>
		}
		if(SWD_u8GetSwitchState(SWD_u8_SW2)==SWD_u8PUSHED)
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <SWD_u8GetSwitchState>
 afa:	82 30       	cpi	r24, 0x02	; 2
 afc:	b1 f4       	brne	.+44     	; 0xb2a <main+0xca>
		{
			if(u8PwmWidth<U8_BIGEST_PERIOD)
 afe:	80 91 74 00 	lds	r24, 0x0074
 b02:	8e 3f       	cpi	r24, 0xFE	; 254
 b04:	70 f4       	brcc	.+28     	; 0xb22 <main+0xc2>
			{
				index++;
 b06:	8a 81       	ldd	r24, Y+2	; 0x02
 b08:	8f 5f       	subi	r24, 0xFF	; 255
 b0a:	8a 83       	std	Y+2, r24	; 0x02
				u8PwmWidth+=30;
 b0c:	80 91 74 00 	lds	r24, 0x0074
 b10:	82 5e       	subi	r24, 0xE2	; 226
 b12:	80 93 74 00 	sts	0x0074, r24
				LCD_voidWriteStringXY((u8 *)block,index,1);
 b16:	ce 01       	movw	r24, r28
 b18:	03 96       	adiw	r24, 0x03	; 3
 b1a:	6a 81       	ldd	r22, Y+2	; 0x02
 b1c:	41 e0       	ldi	r20, 0x01	; 1
 b1e:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_voidWriteStringXY>

			}
			TIM_voidInitCTCRegister(u8PwmWidth);
 b22:	80 91 74 00 	lds	r24, 0x0074
 b26:	0e 94 c1 04 	call	0x982	; 0x982 <TIM_voidInitCTCRegister>
		}
		Delay_ms(200);
 b2a:	68 ec       	ldi	r22, 0xC8	; 200
 b2c:	70 e0       	ldi	r23, 0x00	; 0
 b2e:	80 e0       	ldi	r24, 0x00	; 0
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
 b36:	c3 cf       	rjmp	.-122    	; 0xabe <main+0x5e>

00000b38 <__mulsi3>:
 b38:	62 9f       	mul	r22, r18
 b3a:	d0 01       	movw	r26, r0
 b3c:	73 9f       	mul	r23, r19
 b3e:	f0 01       	movw	r30, r0
 b40:	82 9f       	mul	r24, r18
 b42:	e0 0d       	add	r30, r0
 b44:	f1 1d       	adc	r31, r1
 b46:	64 9f       	mul	r22, r20
 b48:	e0 0d       	add	r30, r0
 b4a:	f1 1d       	adc	r31, r1
 b4c:	92 9f       	mul	r25, r18
 b4e:	f0 0d       	add	r31, r0
 b50:	83 9f       	mul	r24, r19
 b52:	f0 0d       	add	r31, r0
 b54:	74 9f       	mul	r23, r20
 b56:	f0 0d       	add	r31, r0
 b58:	65 9f       	mul	r22, r21
 b5a:	f0 0d       	add	r31, r0
 b5c:	99 27       	eor	r25, r25
 b5e:	72 9f       	mul	r23, r18
 b60:	b0 0d       	add	r27, r0
 b62:	e1 1d       	adc	r30, r1
 b64:	f9 1f       	adc	r31, r25
 b66:	63 9f       	mul	r22, r19
 b68:	b0 0d       	add	r27, r0
 b6a:	e1 1d       	adc	r30, r1
 b6c:	f9 1f       	adc	r31, r25
 b6e:	bd 01       	movw	r22, r26
 b70:	cf 01       	movw	r24, r30
 b72:	11 24       	eor	r1, r1
 b74:	08 95       	ret

00000b76 <__udivmodsi4>:
 b76:	a1 e2       	ldi	r26, 0x21	; 33
 b78:	1a 2e       	mov	r1, r26
 b7a:	aa 1b       	sub	r26, r26
 b7c:	bb 1b       	sub	r27, r27
 b7e:	fd 01       	movw	r30, r26
 b80:	0d c0       	rjmp	.+26     	; 0xb9c <__udivmodsi4_ep>

00000b82 <__udivmodsi4_loop>:
 b82:	aa 1f       	adc	r26, r26
 b84:	bb 1f       	adc	r27, r27
 b86:	ee 1f       	adc	r30, r30
 b88:	ff 1f       	adc	r31, r31
 b8a:	a2 17       	cp	r26, r18
 b8c:	b3 07       	cpc	r27, r19
 b8e:	e4 07       	cpc	r30, r20
 b90:	f5 07       	cpc	r31, r21
 b92:	20 f0       	brcs	.+8      	; 0xb9c <__udivmodsi4_ep>
 b94:	a2 1b       	sub	r26, r18
 b96:	b3 0b       	sbc	r27, r19
 b98:	e4 0b       	sbc	r30, r20
 b9a:	f5 0b       	sbc	r31, r21

00000b9c <__udivmodsi4_ep>:
 b9c:	66 1f       	adc	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	99 1f       	adc	r25, r25
 ba4:	1a 94       	dec	r1
 ba6:	69 f7       	brne	.-38     	; 0xb82 <__udivmodsi4_loop>
 ba8:	60 95       	com	r22
 baa:	70 95       	com	r23
 bac:	80 95       	com	r24
 bae:	90 95       	com	r25
 bb0:	9b 01       	movw	r18, r22
 bb2:	ac 01       	movw	r20, r24
 bb4:	bd 01       	movw	r22, r26
 bb6:	cf 01       	movw	r24, r30
 bb8:	08 95       	ret

00000bba <_exit>:
 bba:	f8 94       	cli

00000bbc <__stop_program>:
 bbc:	ff cf       	rjmp	.-2      	; 0xbbc <__stop_program>
