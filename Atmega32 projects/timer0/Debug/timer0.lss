
timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000538  2**0
                  ALLOC
  2 .stab         0000072c  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000419  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  74:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
  9c:	e1 e3       	ldi	r30, 0x31	; 49
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
}
  a2:	cf 91       	pop	r28
  a4:	df 91       	pop	r29
  a6:	08 95       	ret

000000a8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	00 d0       	rcall	.+0      	; 0xae <DIO_voidSetPinValue+0x6>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	60 f5       	brcc	.+88     	; 0x114 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
  bc:	8a 81       	ldd	r24, Y+2	; 0x02
  be:	88 23       	and	r24, r24
  c0:	a1 f4       	brne	.+40     	; 0xea <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
  c2:	ab e3       	ldi	r26, 0x3B	; 59
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	eb e3       	ldi	r30, 0x3B	; 59
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	48 2f       	mov	r20, r24
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	28 2f       	mov	r18, r24
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 2e       	mov	r0, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_voidSetPinValue+0x38>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_voidSetPinValue+0x34>
  e4:	84 2b       	or	r24, r20
  e6:	8c 93       	st	X, r24
  e8:	b3 c0       	rjmp	.+358    	; 0x250 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
  ea:	ab e3       	ldi	r26, 0x3B	; 59
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	eb e3       	ldi	r30, 0x3B	; 59
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	48 2f       	mov	r20, r24
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 2e       	mov	r0, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_voidSetPinValue+0x60>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_voidSetPinValue+0x5c>
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	8c 93       	st	X, r24
 112:	9e c0       	rjmp	.+316    	; 0x250 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	88 30       	cpi	r24, 0x08	; 8
 118:	90 f1       	brcs	.+100    	; 0x17e <DIO_voidSetPinValue+0xd6>
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	80 31       	cpi	r24, 0x10	; 16
 11e:	78 f5       	brcc	.+94     	; 0x17e <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	88 50       	subi	r24, 0x08	; 8
 124:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	88 23       	and	r24, r24
 12a:	a1 f4       	brne	.+40     	; 0x154 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 12c:	a8 e3       	ldi	r26, 0x38	; 56
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e8 e3       	ldi	r30, 0x38	; 56
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinValue+0xa2>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinValue+0x9e>
 14e:	84 2b       	or	r24, r20
 150:	8c 93       	st	X, r24
 152:	7e c0       	rjmp	.+252    	; 0x250 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 154:	a8 e3       	ldi	r26, 0x38	; 56
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e8 e3       	ldi	r30, 0x38	; 56
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 2e       	mov	r0, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinValue+0xca>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinValue+0xc6>
 176:	80 95       	com	r24
 178:	84 23       	and	r24, r20
 17a:	8c 93       	st	X, r24
 17c:	69 c0       	rjmp	.+210    	; 0x250 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	80 31       	cpi	r24, 0x10	; 16
 182:	90 f1       	brcs	.+100    	; 0x1e8 <DIO_voidSetPinValue+0x140>
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	88 31       	cpi	r24, 0x18	; 24
 188:	78 f5       	brcc	.+94     	; 0x1e8 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	80 51       	subi	r24, 0x10	; 16
 18e:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	88 23       	and	r24, r24
 194:	a1 f4       	brne	.+40     	; 0x1be <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 196:	a5 e3       	ldi	r26, 0x35	; 53
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e5 e3       	ldi	r30, 0x35	; 53
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	48 2f       	mov	r20, r24
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 2e       	mov	r0, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_voidSetPinValue+0x10c>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_voidSetPinValue+0x108>
 1b8:	84 2b       	or	r24, r20
 1ba:	8c 93       	st	X, r24
 1bc:	49 c0       	rjmp	.+146    	; 0x250 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 1be:	a5 e3       	ldi	r26, 0x35	; 53
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e5 e3       	ldi	r30, 0x35	; 53
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	48 2f       	mov	r20, r24
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 2e       	mov	r0, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x134>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x130>
 1e0:	80 95       	com	r24
 1e2:	84 23       	and	r24, r20
 1e4:	8c 93       	st	X, r24
 1e6:	34 c0       	rjmp	.+104    	; 0x250 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	88 31       	cpi	r24, 0x18	; 24
 1ec:	88 f1       	brcs	.+98     	; 0x250 <DIO_voidSetPinValue+0x1a8>
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	80 32       	cpi	r24, 0x20	; 32
 1f2:	70 f5       	brcc	.+92     	; 0x250 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	88 51       	subi	r24, 0x18	; 24
 1f8:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	88 23       	and	r24, r24
 1fe:	a1 f4       	brne	.+40     	; 0x228 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 200:	a2 e3       	ldi	r26, 0x32	; 50
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e2 e3       	ldi	r30, 0x32	; 50
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_voidSetPinValue+0x176>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_voidSetPinValue+0x172>
 222:	84 2b       	or	r24, r20
 224:	8c 93       	st	X, r24
 226:	14 c0       	rjmp	.+40     	; 0x250 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 228:	a2 e3       	ldi	r26, 0x32	; 50
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e2 e3       	ldi	r30, 0x32	; 50
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinValue+0x19e>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinValue+0x19a>
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	8c 93       	st	X, r24
		}			
	}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	08 95       	ret

0000025a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 25a:	df 93       	push	r29
 25c:	cf 93       	push	r28
 25e:	00 d0       	rcall	.+0      	; 0x260 <DIO_u8GetPinValue+0x6>
 260:	00 d0       	rcall	.+0      	; 0x262 <DIO_u8GetPinValue+0x8>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 268:	8c 81       	ldd	r24, Y+4	; 0x04
 26a:	88 30       	cpi	r24, 0x08	; 8
 26c:	00 f5       	brcc	.+64     	; 0x2ae <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 26e:	8c 81       	ldd	r24, Y+4	; 0x04
 270:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 272:	e9 e3       	ldi	r30, 0x39	; 57
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	48 2f       	mov	r20, r24
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8GetPinValue+0x32>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	2a 95       	dec	r18
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_u8GetPinValue+0x2e>
 290:	9a 01       	movw	r18, r20
 292:	28 23       	and	r18, r24
 294:	39 23       	and	r19, r25
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	88 2f       	mov	r24, r24
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	a9 01       	movw	r20, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_u8GetPinValue+0x4a>
 2a0:	55 95       	asr	r21
 2a2:	47 95       	ror	r20
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_u8GetPinValue+0x46>
 2a8:	ca 01       	movw	r24, r20
 2aa:	8a 83       	std	Y+2, r24	; 0x02
 2ac:	74 c0       	rjmp	.+232    	; 0x396 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 2ae:	8c 81       	ldd	r24, Y+4	; 0x04
 2b0:	80 31       	cpi	r24, 0x10	; 16
 2b2:	20 f1       	brcs	.+72     	; 0x2fc <DIO_u8GetPinValue+0xa2>
 2b4:	8c 81       	ldd	r24, Y+4	; 0x04
 2b6:	88 31       	cpi	r24, 0x18	; 24
 2b8:	08 f5       	brcc	.+66     	; 0x2fc <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 2ba:	8c 81       	ldd	r24, Y+4	; 0x04
 2bc:	88 50       	subi	r24, 0x08	; 8
 2be:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 2c0:	e6 e3       	ldi	r30, 0x36	; 54
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_u8GetPinValue+0x80>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	2a 95       	dec	r18
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_u8GetPinValue+0x7c>
 2de:	9a 01       	movw	r18, r20
 2e0:	28 23       	and	r18, r24
 2e2:	39 23       	and	r19, r25
 2e4:	8b 81       	ldd	r24, Y+3	; 0x03
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a9 01       	movw	r20, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8GetPinValue+0x98>
 2ee:	55 95       	asr	r21
 2f0:	47 95       	ror	r20
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8GetPinValue+0x94>
 2f6:	ca 01       	movw	r24, r20
 2f8:	8a 83       	std	Y+2, r24	; 0x02
 2fa:	4d c0       	rjmp	.+154    	; 0x396 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 2fc:	8c 81       	ldd	r24, Y+4	; 0x04
 2fe:	80 31       	cpi	r24, 0x10	; 16
 300:	20 f1       	brcs	.+72     	; 0x34a <DIO_u8GetPinValue+0xf0>
 302:	8c 81       	ldd	r24, Y+4	; 0x04
 304:	88 31       	cpi	r24, 0x18	; 24
 306:	08 f5       	brcc	.+66     	; 0x34a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 308:	8c 81       	ldd	r24, Y+4	; 0x04
 30a:	80 51       	subi	r24, 0x10	; 16
 30c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 30e:	e6 e3       	ldi	r30, 0x36	; 54
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8GetPinValue+0xce>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	2a 95       	dec	r18
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8GetPinValue+0xca>
 32c:	9a 01       	movw	r18, r20
 32e:	28 23       	and	r18, r24
 330:	39 23       	and	r19, r25
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	a9 01       	movw	r20, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_u8GetPinValue+0xe6>
 33c:	55 95       	asr	r21
 33e:	47 95       	ror	r20
 340:	8a 95       	dec	r24
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_u8GetPinValue+0xe2>
 344:	ca 01       	movw	r24, r20
 346:	8a 83       	std	Y+2, r24	; 0x02
 348:	26 c0       	rjmp	.+76     	; 0x396 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	88 31       	cpi	r24, 0x18	; 24
 34e:	18 f1       	brcs	.+70     	; 0x396 <DIO_u8GetPinValue+0x13c>
 350:	8c 81       	ldd	r24, Y+4	; 0x04
 352:	80 32       	cpi	r24, 0x20	; 32
 354:	00 f5       	brcc	.+64     	; 0x396 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 356:	8c 81       	ldd	r24, Y+4	; 0x04
 358:	88 51       	subi	r24, 0x18	; 24
 35a:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 35c:	e0 e3       	ldi	r30, 0x30	; 48
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	48 2f       	mov	r20, r24
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_u8GetPinValue+0x11c>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	2a 95       	dec	r18
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_u8GetPinValue+0x118>
 37a:	9a 01       	movw	r18, r20
 37c:	28 23       	and	r18, r24
 37e:	39 23       	and	r19, r25
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	88 2f       	mov	r24, r24
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	a9 01       	movw	r20, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_u8GetPinValue+0x134>
 38a:	55 95       	asr	r21
 38c:	47 95       	ror	r20
 38e:	8a 95       	dec	r24
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_u8GetPinValue+0x130>
 392:	ca 01       	movw	r24, r20
 394:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	88 23       	and	r24, r24
 39a:	19 f4       	brne	.+6      	; 0x3a2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	09 f4       	brne	.+2      	; 0x3aa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 3a8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	cf 91       	pop	r28
 3b6:	df 91       	pop	r29
 3b8:	08 95       	ret

000003ba <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 3ba:	df 93       	push	r29
 3bc:	cf 93       	push	r28
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 3c2:	af e5       	ldi	r26, 0x5F	; 95
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	ef e5       	ldi	r30, 0x5F	; 95
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	80 68       	ori	r24, 0x80	; 128
 3ce:	8c 93       	st	X, r24
}
 3d0:	cf 91       	pop	r28
 3d2:	df 91       	pop	r29
 3d4:	08 95       	ret

000003d6 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 3d6:	df 93       	push	r29
 3d8:	cf 93       	push	r28
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 3de:	af e5       	ldi	r26, 0x5F	; 95
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	ef e5       	ldi	r30, 0x5F	; 95
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	8f 77       	andi	r24, 0x7F	; 127
 3ea:	8c 93       	st	X, r24
}
 3ec:	cf 91       	pop	r28
 3ee:	df 91       	pop	r29
 3f0:	08 95       	ret

000003f2 <Timer_init>:
#define TIMSK *((u8*)0x59)
#define TIFR *((u8*)0x58)

volatile static u16 count;
void Timer_init(void)
{
 3f2:	df 93       	push	r29
 3f4:	cf 93       	push	r28
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
TCNT0=112;
 3fa:	e2 e5       	ldi	r30, 0x52	; 82
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 e7       	ldi	r24, 0x70	; 112
 400:	80 83       	st	Z, r24
SET_BIT(TIMSK,0);
 402:	a9 e5       	ldi	r26, 0x59	; 89
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e9 e5       	ldi	r30, 0x59	; 89
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	8c 93       	st	X, r24
SET_BIT(TIFR,0);
 410:	a8 e5       	ldi	r26, 0x58	; 88
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	e8 e5       	ldi	r30, 0x58	; 88
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	8c 93       	st	X, r24
TCCR0=0b00000010;
 41e:	e3 e5       	ldi	r30, 0x53	; 83
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	80 83       	st	Z, r24
}
 426:	cf 91       	pop	r28
 428:	df 91       	pop	r29
 42a:	08 95       	ret

0000042c <__vector_11>:
void  __vector_11  (void) __attribute__((signal,used));
void  __vector_11  (void)
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
	count++;
 44c:	80 91 60 00 	lds	r24, 0x0060
 450:	90 91 61 00 	lds	r25, 0x0061
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	90 93 61 00 	sts	0x0061, r25
 45a:	80 93 60 00 	sts	0x0060, r24
	if(count==977)
 45e:	80 91 60 00 	lds	r24, 0x0060
 462:	90 91 61 00 	lds	r25, 0x0061
 466:	23 e0       	ldi	r18, 0x03	; 3
 468:	81 3d       	cpi	r24, 0xD1	; 209
 46a:	92 07       	cpc	r25, r18
 46c:	81 f4       	brne	.+32     	; 0x48e <__vector_11+0x62>
	{
		TOG_BIT(PORTA,0);
 46e:	ab e3       	ldi	r26, 0x3B	; 59
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	eb e3       	ldi	r30, 0x3B	; 59
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	90 81       	ld	r25, Z
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	89 27       	eor	r24, r25
 47c:	8c 93       	st	X, r24
		count=0;
 47e:	10 92 61 00 	sts	0x0061, r1
 482:	10 92 60 00 	sts	0x0060, r1
		TCNT0=112;
 486:	e2 e5       	ldi	r30, 0x52	; 82
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 e7       	ldi	r24, 0x70	; 112
 48c:	80 83       	st	Z, r24
	}
}
 48e:	cf 91       	pop	r28
 490:	df 91       	pop	r29
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <main>:
void main(void)
{
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 4b2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidInitialize>
	Timer_init();
 4b6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <Timer_init>
	GIE_EnableGlobalInterrupt();
 4ba:	0e 94 dd 01 	call	0x3ba	; 0x3ba <GIE_EnableGlobalInterrupt>
 4be:	ff cf       	rjmp	.-2      	; 0x4be <main+0x14>

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
