
playFootball.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000009ac  00000a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800082  00800082  00000a62  2**0
                  ALLOC
  3 .stab         00000fe4  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000722  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_1>
   8:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 39 04 	call	0x872	; 0x872 <main>
  8a:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 93 04 	call	0x926	; 0x926 <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 93 04 	call	0x926	; 0x926 <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 b2 04 	call	0x964	; 0x964 <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	10 82       	st	Z, r1
	DDRD = DIO_u8_PORTD_DIRECTION;
 1e8:	e1 e3       	ldi	r30, 0x31	; 49
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	80 83       	st	Z, r24
}
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

000001f6 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <DIO_voidSetPinValue+0x6>
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	60 f5       	brcc	.+88     	; 0x262 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	88 23       	and	r24, r24
 20e:	a1 f4       	brne	.+40     	; 0x238 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 210:	ab e3       	ldi	r26, 0x3B	; 59
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	eb e3       	ldi	r30, 0x3B	; 59
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinValue+0x38>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinValue+0x34>
 232:	84 2b       	or	r24, r20
 234:	8c 93       	st	X, r24
 236:	b3 c0       	rjmp	.+358    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 238:	ab e3       	ldi	r26, 0x3B	; 59
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	eb e3       	ldi	r30, 0x3B	; 59
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_voidSetPinValue+0x60>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_voidSetPinValue+0x5c>
 25a:	80 95       	com	r24
 25c:	84 23       	and	r24, r20
 25e:	8c 93       	st	X, r24
 260:	9e c0       	rjmp	.+316    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	90 f1       	brcs	.+100    	; 0x2cc <DIO_voidSetPinValue+0xd6>
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	80 31       	cpi	r24, 0x10	; 16
 26c:	78 f5       	brcc	.+94     	; 0x2cc <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	88 50       	subi	r24, 0x08	; 8
 272:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	88 23       	and	r24, r24
 278:	a1 f4       	brne	.+40     	; 0x2a2 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27a:	a8 e3       	ldi	r26, 0x38	; 56
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e8 e3       	ldi	r30, 0x38	; 56
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	48 2f       	mov	r20, r24
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPinValue+0xa2>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPinValue+0x9e>
 29c:	84 2b       	or	r24, r20
 29e:	8c 93       	st	X, r24
 2a0:	7e c0       	rjmp	.+252    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a2:	a8 e3       	ldi	r26, 0x38	; 56
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e8 e3       	ldi	r30, 0x38	; 56
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	48 2f       	mov	r20, r24
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 2e       	mov	r0, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_voidSetPinValue+0xca>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_voidSetPinValue+0xc6>
 2c4:	80 95       	com	r24
 2c6:	84 23       	and	r24, r20
 2c8:	8c 93       	st	X, r24
 2ca:	69 c0       	rjmp	.+210    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	80 31       	cpi	r24, 0x10	; 16
 2d0:	90 f1       	brcs	.+100    	; 0x336 <DIO_voidSetPinValue+0x140>
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	88 31       	cpi	r24, 0x18	; 24
 2d6:	78 f5       	brcc	.+94     	; 0x336 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	80 51       	subi	r24, 0x10	; 16
 2dc:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	88 23       	and	r24, r24
 2e2:	a1 f4       	brne	.+40     	; 0x30c <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e3       	ldi	r30, 0x35	; 53
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_voidSetPinValue+0x10c>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_voidSetPinValue+0x108>
 306:	84 2b       	or	r24, r20
 308:	8c 93       	st	X, r24
 30a:	49 c0       	rjmp	.+146    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30c:	a5 e3       	ldi	r26, 0x35	; 53
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e5 e3       	ldi	r30, 0x35	; 53
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	48 2f       	mov	r20, r24
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 2e       	mov	r0, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_voidSetPinValue+0x134>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_voidSetPinValue+0x130>
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	8c 93       	st	X, r24
 334:	34 c0       	rjmp	.+104    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	88 31       	cpi	r24, 0x18	; 24
 33a:	88 f1       	brcs	.+98     	; 0x39e <DIO_voidSetPinValue+0x1a8>
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	80 32       	cpi	r24, 0x20	; 32
 340:	70 f5       	brcc	.+92     	; 0x39e <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	88 51       	subi	r24, 0x18	; 24
 346:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	88 23       	and	r24, r24
 34c:	a1 f4       	brne	.+40     	; 0x376 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 34e:	a2 e3       	ldi	r26, 0x32	; 50
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e2 e3       	ldi	r30, 0x32	; 50
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_voidSetPinValue+0x176>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_voidSetPinValue+0x172>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	14 c0       	rjmp	.+40     	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 376:	a2 e3       	ldi	r26, 0x32	; 50
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e2 e3       	ldi	r30, 0x32	; 50
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_voidSetPinValue+0x19e>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_voidSetPinValue+0x19a>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
		}			
	}
}
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3a8:	df 93       	push	r29
 3aa:	cf 93       	push	r28
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <DIO_u8GetPinValue+0x6>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x8>
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
 3b4:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	88 30       	cpi	r24, 0x08	; 8
 3ba:	00 f5       	brcc	.+64     	; 0x3fc <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3bc:	8c 81       	ldd	r24, Y+4	; 0x04
 3be:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c0:	e9 e3       	ldi	r30, 0x39	; 57
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	48 2f       	mov	r20, r24
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_u8GetPinValue+0x32>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	2a 95       	dec	r18
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_u8GetPinValue+0x2e>
 3de:	9a 01       	movw	r18, r20
 3e0:	28 23       	and	r18, r24
 3e2:	39 23       	and	r19, r25
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	a9 01       	movw	r20, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_u8GetPinValue+0x4a>
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_u8GetPinValue+0x46>
 3f6:	ca 01       	movw	r24, r20
 3f8:	8a 83       	std	Y+2, r24	; 0x02
 3fa:	74 c0       	rjmp	.+232    	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	80 31       	cpi	r24, 0x10	; 16
 400:	20 f1       	brcs	.+72     	; 0x44a <DIO_u8GetPinValue+0xa2>
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	88 31       	cpi	r24, 0x18	; 24
 406:	08 f5       	brcc	.+66     	; 0x44a <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 408:	8c 81       	ldd	r24, Y+4	; 0x04
 40a:	88 50       	subi	r24, 0x08	; 8
 40c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 40e:	e6 e3       	ldi	r30, 0x36	; 54
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	48 2f       	mov	r20, r24
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_u8GetPinValue+0x80>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	2a 95       	dec	r18
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_u8GetPinValue+0x7c>
 42c:	9a 01       	movw	r18, r20
 42e:	28 23       	and	r18, r24
 430:	39 23       	and	r19, r25
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	a9 01       	movw	r20, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8GetPinValue+0x98>
 43c:	55 95       	asr	r21
 43e:	47 95       	ror	r20
 440:	8a 95       	dec	r24
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_u8GetPinValue+0x94>
 444:	ca 01       	movw	r24, r20
 446:	8a 83       	std	Y+2, r24	; 0x02
 448:	4d c0       	rjmp	.+154    	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44a:	8c 81       	ldd	r24, Y+4	; 0x04
 44c:	80 31       	cpi	r24, 0x10	; 16
 44e:	20 f1       	brcs	.+72     	; 0x498 <DIO_u8GetPinValue+0xf0>
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	88 31       	cpi	r24, 0x18	; 24
 454:	08 f5       	brcc	.+66     	; 0x498 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	80 51       	subi	r24, 0x10	; 16
 45a:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45c:	e6 e3       	ldi	r30, 0x36	; 54
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	48 2f       	mov	r20, r24
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_u8GetPinValue+0xce>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	2a 95       	dec	r18
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_u8GetPinValue+0xca>
 47a:	9a 01       	movw	r18, r20
 47c:	28 23       	and	r18, r24
 47e:	39 23       	and	r19, r25
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	88 2f       	mov	r24, r24
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	a9 01       	movw	r20, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_u8GetPinValue+0xe6>
 48a:	55 95       	asr	r21
 48c:	47 95       	ror	r20
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_u8GetPinValue+0xe2>
 492:	ca 01       	movw	r24, r20
 494:	8a 83       	std	Y+2, r24	; 0x02
 496:	26 c0       	rjmp	.+76     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	88 31       	cpi	r24, 0x18	; 24
 49c:	18 f1       	brcs	.+70     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	80 32       	cpi	r24, 0x20	; 32
 4a2:	00 f5       	brcc	.+64     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	88 51       	subi	r24, 0x18	; 24
 4a8:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4aa:	e0 e3       	ldi	r30, 0x30	; 48
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_u8GetPinValue+0x11c>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	2a 95       	dec	r18
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_u8GetPinValue+0x118>
 4c8:	9a 01       	movw	r18, r20
 4ca:	28 23       	and	r18, r24
 4cc:	39 23       	and	r19, r25
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	a9 01       	movw	r20, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8GetPinValue+0x134>
 4d8:	55 95       	asr	r21
 4da:	47 95       	ror	r20
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8GetPinValue+0x130>
 4e0:	ca 01       	movw	r24, r20
 4e2:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	88 23       	and	r24, r24
 4e8:	19 f4       	brne	.+6      	; 0x4f0 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	08 95       	ret

00000508 <EXTI_voidInit>:
#include"EXTI_config.h"
#include "EXTI_int.h"
/*this function shall intialize the EXTI and*/
/*Set its ooperation initially disabled*/
void EXTI_voidInit(void)
{
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0_ENABLE == EXTI_ON
	/*set EXTI 0 mode to Interrupt on change*/
	SET_BIT(MCUCR,0);
 510:	a5 e5       	ldi	r26, 0x55	; 85
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	e5 e5       	ldi	r30, 0x55	; 85
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
 51e:	a5 e5       	ldi	r26, 0x55	; 85
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e5 e5       	ldi	r30, 0x55	; 85
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	8d 7f       	andi	r24, 0xFD	; 253
 52a:	8c 93       	st	X, r24

	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
 52c:	ab e5       	ldi	r26, 0x5B	; 91
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	eb e5       	ldi	r30, 0x5B	; 91
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	8f 7b       	andi	r24, 0xBF	; 191
 538:	8c 93       	st	X, r24

	/*Clear Flag*/
	SET_BIT(GIFR,6);
 53a:	aa e5       	ldi	r26, 0x5A	; 90
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	ea e5       	ldi	r30, 0x5A	; 90
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	80 64       	ori	r24, 0x40	; 64
 546:	8c 93       	st	X, r24
#endif
#if EXTI_INT1_ENABLE == EXTI_ON
	/*set EXTI 1 mode to Interrupt on change*/
	SET_BIT(MCUCR,2);
 548:	a5 e5       	ldi	r26, 0x55	; 85
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	e5 e5       	ldi	r30, 0x55	; 85
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	84 60       	ori	r24, 0x04	; 4
 554:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,3);
 556:	a5 e5       	ldi	r26, 0x55	; 85
 558:	b0 e0       	ldi	r27, 0x00	; 0
 55a:	e5 e5       	ldi	r30, 0x55	; 85
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	87 7f       	andi	r24, 0xF7	; 247
 562:	8c 93       	st	X, r24

	/*Disable EXTI 0*/
	CLR_BIT(GICR,7);
 564:	ab e5       	ldi	r26, 0x5B	; 91
 566:	b0 e0       	ldi	r27, 0x00	; 0
 568:	eb e5       	ldi	r30, 0x5B	; 91
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	8f 77       	andi	r24, 0x7F	; 127
 570:	8c 93       	st	X, r24

	/*Clear Flag*/
	SET_BIT(GIFR,7);
 572:	aa e5       	ldi	r26, 0x5A	; 90
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	ea e5       	ldi	r30, 0x5A	; 90
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	80 68       	ori	r24, 0x80	; 128
 57e:	8c 93       	st	X, r24
#endif
}
 580:	cf 91       	pop	r28
 582:	df 91       	pop	r29
 584:	08 95       	ret

00000586 <EXTI_voidSetCallback_EXT0>:

/*this function shall set the callback pointer*/
/*to the recieved address*/
void EXTI_voidSetCallback_EXT0(void (*ptrCpy)(void))
{
 586:	df 93       	push	r29
 588:	cf 93       	push	r28
 58a:	00 d0       	rcall	.+0      	; 0x58c <EXTI_voidSetCallback_EXT0+0x6>
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	9a 83       	std	Y+2, r25	; 0x02
 592:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidCallback_INT0=ptrCpy;
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	90 93 83 00 	sts	0x0083, r25
 59c:	80 93 82 00 	sts	0x0082, r24
}
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	cf 91       	pop	r28
 5a6:	df 91       	pop	r29
 5a8:	08 95       	ret

000005aa <EXTI_voidSetCallback_EXT1>:

void EXTI_voidSetCallback_EXT1(void (*ptrCpy)(void))
{
 5aa:	df 93       	push	r29
 5ac:	cf 93       	push	r28
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <EXTI_voidSetCallback_EXT1+0x6>
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	9a 83       	std	Y+2, r25	; 0x02
 5b6:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidCallback_INT1=ptrCpy;
 5b8:	89 81       	ldd	r24, Y+1	; 0x01
 5ba:	9a 81       	ldd	r25, Y+2	; 0x02
 5bc:	90 93 85 00 	sts	0x0085, r25
 5c0:	80 93 84 00 	sts	0x0084, r24
}
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	cf 91       	pop	r28
 5ca:	df 91       	pop	r29
 5cc:	08 95       	ret

000005ce <EXTI_voidEnable_EXT0>:
/*this function shall enable the external interrupt*/
void EXTI_voidEnable_EXT0(void)
{
 5ce:	df 93       	push	r29
 5d0:	cf 93       	push	r28
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
 5d6:	ab e5       	ldi	r26, 0x5B	; 91
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	eb e5       	ldi	r30, 0x5B	; 91
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	80 64       	ori	r24, 0x40	; 64
 5e2:	8c 93       	st	X, r24

}
 5e4:	cf 91       	pop	r28
 5e6:	df 91       	pop	r29
 5e8:	08 95       	ret

000005ea <EXTI_voidEnable_EXT1>:

void EXTI_voidEnable_EXT1(void)
{
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
	/*Enable EXTI 1*/
	SET_BIT(GICR,7);
 5f2:	ab e5       	ldi	r26, 0x5B	; 91
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	eb e5       	ldi	r30, 0x5B	; 91
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	80 68       	ori	r24, 0x80	; 128
 5fe:	8c 93       	st	X, r24

}
 600:	cf 91       	pop	r28
 602:	df 91       	pop	r29
 604:	08 95       	ret

00000606 <EXTI_voidDisable_EXT0>:
/*this function shall disable the external interrupt*/
void EXTI_voidDisable_EXT0(void)
{
 606:	df 93       	push	r29
 608:	cf 93       	push	r28
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
 60e:	ab e5       	ldi	r26, 0x5B	; 91
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	eb e5       	ldi	r30, 0x5B	; 91
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	8f 7b       	andi	r24, 0xBF	; 191
 61a:	8c 93       	st	X, r24
}
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <EXTI_voidDisable_EXT1>:

void EXTI_voidDisable_EXT1(void)
{
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
	/*Disable EXTI 1*/
	CLR_BIT(GICR,7);
 62a:	ab e5       	ldi	r26, 0x5B	; 91
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	eb e5       	ldi	r30, 0x5B	; 91
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	8f 77       	andi	r24, 0x7F	; 127
 636:	8c 93       	st	X, r24
}
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <__vector_1>:
void  __vector_1  (void) __attribute__((signal,used));
void  __vector_1  (void)
{
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	3f 93       	push	r19
 64c:	4f 93       	push	r20
 64e:	5f 93       	push	r21
 650:	6f 93       	push	r22
 652:	7f 93       	push	r23
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
 658:	af 93       	push	r26
 65a:	bf 93       	push	r27
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
 660:	df 93       	push	r29
 662:	cf 93       	push	r28
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallback_INT0();
 668:	e0 91 82 00 	lds	r30, 0x0082
 66c:	f0 91 83 00 	lds	r31, 0x0083
 670:	09 95       	icall
}
 672:	cf 91       	pop	r28
 674:	df 91       	pop	r29
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <__vector_2>:

void  __vector_2  (void) __attribute__((signal,used));
void  __vector_2  (void)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	2f 93       	push	r18
 6a4:	3f 93       	push	r19
 6a6:	4f 93       	push	r20
 6a8:	5f 93       	push	r21
 6aa:	6f 93       	push	r22
 6ac:	7f 93       	push	r23
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
 6ba:	df 93       	push	r29
 6bc:	cf 93       	push	r28
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallback_INT1();
 6c2:	e0 91 84 00 	lds	r30, 0x0084
 6c6:	f0 91 85 00 	lds	r31, 0x0085
 6ca:	09 95       	icall
}
 6cc:	cf 91       	pop	r28
 6ce:	df 91       	pop	r29
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 6fa:	af e5       	ldi	r26, 0x5F	; 95
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	ef e5       	ldi	r30, 0x5F	; 95
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	80 68       	ori	r24, 0x80	; 128
 706:	8c 93       	st	X, r24
}
 708:	cf 91       	pop	r28
 70a:	df 91       	pop	r29
 70c:	08 95       	ret

0000070e <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 716:	af e5       	ldi	r26, 0x5F	; 95
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	ef e5       	ldi	r30, 0x5F	; 95
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	8f 77       	andi	r24, 0x7F	; 127
 722:	8c 93       	st	X, r24
}
 724:	cf 91       	pop	r28
 726:	df 91       	pop	r29
 728:	08 95       	ret

0000072a <LED_MATRIX_voidCloseLedMatrix>:
#include"LED_MATRIX_priv.h"
#include "LED_MATRIX_int.h"
#include "LED_MATRIX_config.h"

void LED_MATRIX_voidCloseLedMatrix(void)
{
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
#if u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTA
		PORTA=0xff;
#elif u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTB
		PORTB=0xff;
 732:	e8 e3       	ldi	r30, 0x38	; 56
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	80 83       	st	Z, r24
		PORTC=0xff;
#elif u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTD
		PORTD=0xff;
#endif

}
 73a:	cf 91       	pop	r28
 73c:	df 91       	pop	r29
 73e:	08 95       	ret

00000740 <LED_MATRIX_voidLedMatrixOutputImage>:
void LED_MATRIX_voidLedMatrixOutputImage(u8* u8ImageCopy)
{
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	60 97       	sbiw	r28, 0x10	; 16
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
 754:	9b 87       	std	Y+11, r25	; 0x0b
 756:	8a 87       	std	Y+10, r24	; 0x0a
	u8 u8ColsActivationLoc [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
 758:	ce 01       	movw	r24, r28
 75a:	02 96       	adiw	r24, 0x02	; 2
 75c:	9d 87       	std	Y+13, r25	; 0x0d
 75e:	8c 87       	std	Y+12, r24	; 0x0c
 760:	e9 e7       	ldi	r30, 0x79	; 121
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	ff 87       	std	Y+15, r31	; 0x0f
 766:	ee 87       	std	Y+14, r30	; 0x0e
 768:	f8 e0       	ldi	r31, 0x08	; 8
 76a:	f8 8b       	std	Y+16, r31	; 0x10
 76c:	ee 85       	ldd	r30, Y+14	; 0x0e
 76e:	ff 85       	ldd	r31, Y+15	; 0x0f
 770:	00 80       	ld	r0, Z
 772:	8e 85       	ldd	r24, Y+14	; 0x0e
 774:	9f 85       	ldd	r25, Y+15	; 0x0f
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	9f 87       	std	Y+15, r25	; 0x0f
 77a:	8e 87       	std	Y+14, r24	; 0x0e
 77c:	ec 85       	ldd	r30, Y+12	; 0x0c
 77e:	fd 85       	ldd	r31, Y+13	; 0x0d
 780:	00 82       	st	Z, r0
 782:	8c 85       	ldd	r24, Y+12	; 0x0c
 784:	9d 85       	ldd	r25, Y+13	; 0x0d
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	9d 87       	std	Y+13, r25	; 0x0d
 78a:	8c 87       	std	Y+12, r24	; 0x0c
 78c:	98 89       	ldd	r25, Y+16	; 0x10
 78e:	91 50       	subi	r25, 0x01	; 1
 790:	98 8b       	std	Y+16, r25	; 0x10
 792:	e8 89       	ldd	r30, Y+16	; 0x10
 794:	ee 23       	and	r30, r30
 796:	51 f7       	brne	.-44     	; 0x76c <LED_MATRIX_voidLedMatrixOutputImage+0x2c>
	for(u8 u8ColAndRowsLoc=0;u8ColAndRowsLoc<u8_LED_MATRIX_SIZE;u8ColAndRowsLoc++)
 798:	19 82       	std	Y+1, r1	; 0x01
 79a:	21 c0       	rjmp	.+66     	; 0x7de <LED_MATRIX_voidLedMatrixOutputImage+0x9e>
	{
#if u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTA
		PORTA=u8ColsActivationLoc[u8ColAndRowsLoc];
#elif u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTB
		PORTB=u8ColsActivationLoc[u8ColAndRowsLoc];
 79c:	a8 e3       	ldi	r26, 0x38	; 56
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	ce 01       	movw	r24, r28
 7a8:	02 96       	adiw	r24, 0x02	; 2
 7aa:	fc 01       	movw	r30, r24
 7ac:	e2 0f       	add	r30, r18
 7ae:	f3 1f       	adc	r31, r19
 7b0:	80 81       	ld	r24, Z
 7b2:	8c 93       	st	X, r24
#elif u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTD
		PORTD=u8ColsActivationLoc[u8ColAndRowsLoc];
#endif

#if u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTA
		PORTA=u8ImageCopy[u8ColAndRowsLoc];
 7b4:	ab e3       	ldi	r26, 0x3B	; 59
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	89 81       	ldd	r24, Y+1	; 0x01
 7ba:	28 2f       	mov	r18, r24
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	8a 85       	ldd	r24, Y+10	; 0x0a
 7c0:	9b 85       	ldd	r25, Y+11	; 0x0b
 7c2:	fc 01       	movw	r30, r24
 7c4:	e2 0f       	add	r30, r18
 7c6:	f3 1f       	adc	r31, r19
 7c8:	80 81       	ld	r24, Z
 7ca:	8c 93       	st	X, r24
#elif u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTC
		PORTC=u8ImageCopy[u8ColAndRowsLoc];
#elif u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTD
		PORTD=u8ImageCopy[u8ColAndRowsLoc];
#endif
		Delay_ms(u8_LED_MATRIX_POV_DELAY);
 7cc:	62 e0       	ldi	r22, 0x02	; 2
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

}
void LED_MATRIX_voidLedMatrixOutputImage(u8* u8ImageCopy)
{
	u8 u8ColsActivationLoc [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
	for(u8 u8ColAndRowsLoc=0;u8ColAndRowsLoc<u8_LED_MATRIX_SIZE;u8ColAndRowsLoc++)
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	8f 5f       	subi	r24, 0xFF	; 255
 7dc:	89 83       	std	Y+1, r24	; 0x01
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	88 30       	cpi	r24, 0x08	; 8
 7e2:	e0 f2       	brcs	.-72     	; 0x79c <LED_MATRIX_voidLedMatrixOutputImage+0x5c>
		PORTD=u8ImageCopy[u8ColAndRowsLoc];
#endif
		Delay_ms(u8_LED_MATRIX_POV_DELAY);
	}

}
 7e4:	60 96       	adiw	r28, 0x10	; 16
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	f8 94       	cli
 7ea:	de bf       	out	0x3e, r29	; 62
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	cd bf       	out	0x3d, r28	; 61
 7f0:	cf 91       	pop	r28
 7f2:	df 91       	pop	r29
 7f4:	08 95       	ret

000007f6 <int0>:
u8 GaffarBall[8]={0, 0, 146, 127, 138, 96, 96, 0};
volatile static u8 GetBall=1;
volatile static u8 kick=0;
//connected with magnet
void int0(void) // to kick
{
 7f6:	df 93       	push	r29
 7f8:	cf 93       	push	r28
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
	if(kick==0 && GetBall ==1) // if have the ball and and not kicked yet
 7fe:	80 91 86 00 	lds	r24, 0x0086
 802:	88 23       	and	r24, r24
 804:	f9 f4       	brne	.+62     	; 0x844 <int0+0x4e>
 806:	80 91 78 00 	lds	r24, 0x0078
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	d9 f4       	brne	.+54     	; 0x844 <int0+0x4e>
	{
	volatile static u8 pinstatus=0;
		// then kick and not have the ball
		kick=1;
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	80 93 86 00 	sts	0x0086, r24
		GetBall=0;
 814:	10 92 78 00 	sts	0x0078, r1
		if(pinstatus==0)
 818:	80 91 87 00 	lds	r24, 0x0087
 81c:	88 23       	and	r24, r24
 81e:	41 f4       	brne	.+16     	; 0x830 <int0+0x3a>
		{
			pinstatus=1;
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	80 93 87 00 	sts	0x0087, r24
			DIO_voidSetPinValue(DIO_u8_PIN_29,DIO_u8_HIGH);
 826:	8d e1       	ldi	r24, 0x1D	; 29
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
 82e:	0a c0       	rjmp	.+20     	; 0x844 <int0+0x4e>
		}
		else if(pinstatus==1)
 830:	80 91 87 00 	lds	r24, 0x0087
 834:	81 30       	cpi	r24, 0x01	; 1
 836:	31 f4       	brne	.+12     	; 0x844 <int0+0x4e>
		{
			pinstatus=0;
 838:	10 92 87 00 	sts	0x0087, r1
			DIO_voidSetPinValue(DIO_u8_PIN_29,DIO_u8_LOW);
 83c:	8d e1       	ldi	r24, 0x1D	; 29
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
		}
	}

}
 844:	cf 91       	pop	r28
 846:	df 91       	pop	r29
 848:	08 95       	ret

0000084a <int1>:
//connected with controller
void int1(void) // to recieve the ball
{
 84a:	df 93       	push	r29
 84c:	cf 93       	push	r28
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
	if(GetBall==0 && kick ==1)
 852:	80 91 78 00 	lds	r24, 0x0078
 856:	88 23       	and	r24, r24
 858:	49 f4       	brne	.+18     	; 0x86c <__stack+0xd>
 85a:	80 91 86 00 	lds	r24, 0x0086
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	29 f4       	brne	.+10     	; 0x86c <__stack+0xd>
	{
		GetBall=1;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 78 00 	sts	0x0078, r24
		kick=0;
 868:	10 92 86 00 	sts	0x0086, r1
	}
}
 86c:	cf 91       	pop	r28
 86e:	df 91       	pop	r29
 870:	08 95       	ret

00000872 <main>:
void main(void)
{
 872:	df 93       	push	r29
 874:	cf 93       	push	r28
 876:	00 d0       	rcall	.+0      	; 0x878 <main+0x6>
 878:	0f 92       	push	r0
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 87e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_26,DIO_u8_HIGH); //pull up resistor on Ext 0 pin
 882:	8a e1       	ldi	r24, 0x1A	; 26
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_27,DIO_u8_HIGH); //pull up resistor on Ext 0 pin
 88a:	8b e1       	ldi	r24, 0x1B	; 27
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_29,DIO_u8_LOW);
 892:	8d e1       	ldi	r24, 0x1D	; 29
 894:	61 e0       	ldi	r22, 0x01	; 1
 896:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	EXTI_voidInit();
 89a:	0e 94 84 02 	call	0x508	; 0x508 <EXTI_voidInit>
	EXTI_voidSetCallback_EXT0(int0);
 89e:	8b ef       	ldi	r24, 0xFB	; 251
 8a0:	93 e0       	ldi	r25, 0x03	; 3
 8a2:	0e 94 c3 02 	call	0x586	; 0x586 <EXTI_voidSetCallback_EXT0>
	EXTI_voidSetCallback_EXT1(int1);
 8a6:	85 e2       	ldi	r24, 0x25	; 37
 8a8:	94 e0       	ldi	r25, 0x04	; 4
 8aa:	0e 94 d5 02 	call	0x5aa	; 0x5aa <EXTI_voidSetCallback_EXT1>
	EXTI_voidEnable_EXT0();
 8ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <EXTI_voidEnable_EXT0>
	EXTI_voidEnable_EXT1();
 8b2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EXTI_voidEnable_EXT1>
	GIE_EnableGlobalInterrupt();
 8b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GIE_EnableGlobalInterrupt>
	while(1)
	{
		if((!kick) && GetBall)
 8ba:	80 91 86 00 	lds	r24, 0x0086
 8be:	88 23       	and	r24, r24
 8c0:	e9 f4       	brne	.+58     	; 0x8fc <main+0x8a>
 8c2:	80 91 78 00 	lds	r24, 0x0078
 8c6:	88 23       	and	r24, r24
 8c8:	c9 f0       	breq	.+50     	; 0x8fc <main+0x8a>
		{
			for(u8 i=0;i<7;i++)
 8ca:	1b 82       	std	Y+3, r1	; 0x03
 8cc:	07 c0       	rjmp	.+14     	; 0x8dc <main+0x6a>
				LED_MATRIX_voidLedMatrixOutputImage(GaffarBall);
 8ce:	80 e7       	ldi	r24, 0x70	; 112
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 a0 03 	call	0x740	; 0x740 <LED_MATRIX_voidLedMatrixOutputImage>
	GIE_EnableGlobalInterrupt();
	while(1)
	{
		if((!kick) && GetBall)
		{
			for(u8 i=0;i<7;i++)
 8d6:	8b 81       	ldd	r24, Y+3	; 0x03
 8d8:	8f 5f       	subi	r24, 0xFF	; 255
 8da:	8b 83       	std	Y+3, r24	; 0x03
 8dc:	8b 81       	ldd	r24, Y+3	; 0x03
 8de:	87 30       	cpi	r24, 0x07	; 7
 8e0:	b0 f3       	brcs	.-20     	; 0x8ce <main+0x5c>
				LED_MATRIX_voidLedMatrixOutputImage(GaffarBall);
			for(u8 i=0;i<7;i++)
 8e2:	1a 82       	std	Y+2, r1	; 0x02
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <main+0x82>
				LED_MATRIX_voidLedMatrixOutputImage(GaffarGetBall);
 8e6:	88 e6       	ldi	r24, 0x68	; 104
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 a0 03 	call	0x740	; 0x740 <LED_MATRIX_voidLedMatrixOutputImage>
	{
		if((!kick) && GetBall)
		{
			for(u8 i=0;i<7;i++)
				LED_MATRIX_voidLedMatrixOutputImage(GaffarBall);
			for(u8 i=0;i<7;i++)
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	8f 5f       	subi	r24, 0xFF	; 255
 8f2:	8a 83       	std	Y+2, r24	; 0x02
 8f4:	8a 81       	ldd	r24, Y+2	; 0x02
 8f6:	87 30       	cpi	r24, 0x07	; 7
 8f8:	b0 f3       	brcs	.-20     	; 0x8e6 <main+0x74>
 8fa:	df cf       	rjmp	.-66     	; 0x8ba <main+0x48>
				LED_MATRIX_voidLedMatrixOutputImage(GaffarGetBall);
		}
		else if(kick==1 && GetBall==0)
 8fc:	80 91 86 00 	lds	r24, 0x0086
 900:	81 30       	cpi	r24, 0x01	; 1
 902:	d9 f6       	brne	.-74     	; 0x8ba <main+0x48>
 904:	80 91 78 00 	lds	r24, 0x0078
 908:	88 23       	and	r24, r24
 90a:	b9 f6       	brne	.-82     	; 0x8ba <main+0x48>
		{
			for(u8 i=0;i<7;i++)
 90c:	19 82       	std	Y+1, r1	; 0x01
 90e:	07 c0       	rjmp	.+14     	; 0x91e <main+0xac>
				LED_MATRIX_voidLedMatrixOutputImage(Gaffar);
 910:	80 e6       	ldi	r24, 0x60	; 96
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 a0 03 	call	0x740	; 0x740 <LED_MATRIX_voidLedMatrixOutputImage>
			for(u8 i=0;i<7;i++)
				LED_MATRIX_voidLedMatrixOutputImage(GaffarGetBall);
		}
		else if(kick==1 && GetBall==0)
		{
			for(u8 i=0;i<7;i++)
 918:	89 81       	ldd	r24, Y+1	; 0x01
 91a:	8f 5f       	subi	r24, 0xFF	; 255
 91c:	89 83       	std	Y+1, r24	; 0x01
 91e:	89 81       	ldd	r24, Y+1	; 0x01
 920:	87 30       	cpi	r24, 0x07	; 7
 922:	b0 f3       	brcs	.-20     	; 0x910 <main+0x9e>
 924:	ca cf       	rjmp	.-108    	; 0x8ba <main+0x48>

00000926 <__mulsi3>:
 926:	62 9f       	mul	r22, r18
 928:	d0 01       	movw	r26, r0
 92a:	73 9f       	mul	r23, r19
 92c:	f0 01       	movw	r30, r0
 92e:	82 9f       	mul	r24, r18
 930:	e0 0d       	add	r30, r0
 932:	f1 1d       	adc	r31, r1
 934:	64 9f       	mul	r22, r20
 936:	e0 0d       	add	r30, r0
 938:	f1 1d       	adc	r31, r1
 93a:	92 9f       	mul	r25, r18
 93c:	f0 0d       	add	r31, r0
 93e:	83 9f       	mul	r24, r19
 940:	f0 0d       	add	r31, r0
 942:	74 9f       	mul	r23, r20
 944:	f0 0d       	add	r31, r0
 946:	65 9f       	mul	r22, r21
 948:	f0 0d       	add	r31, r0
 94a:	99 27       	eor	r25, r25
 94c:	72 9f       	mul	r23, r18
 94e:	b0 0d       	add	r27, r0
 950:	e1 1d       	adc	r30, r1
 952:	f9 1f       	adc	r31, r25
 954:	63 9f       	mul	r22, r19
 956:	b0 0d       	add	r27, r0
 958:	e1 1d       	adc	r30, r1
 95a:	f9 1f       	adc	r31, r25
 95c:	bd 01       	movw	r22, r26
 95e:	cf 01       	movw	r24, r30
 960:	11 24       	eor	r1, r1
 962:	08 95       	ret

00000964 <__udivmodsi4>:
 964:	a1 e2       	ldi	r26, 0x21	; 33
 966:	1a 2e       	mov	r1, r26
 968:	aa 1b       	sub	r26, r26
 96a:	bb 1b       	sub	r27, r27
 96c:	fd 01       	movw	r30, r26
 96e:	0d c0       	rjmp	.+26     	; 0x98a <__udivmodsi4_ep>

00000970 <__udivmodsi4_loop>:
 970:	aa 1f       	adc	r26, r26
 972:	bb 1f       	adc	r27, r27
 974:	ee 1f       	adc	r30, r30
 976:	ff 1f       	adc	r31, r31
 978:	a2 17       	cp	r26, r18
 97a:	b3 07       	cpc	r27, r19
 97c:	e4 07       	cpc	r30, r20
 97e:	f5 07       	cpc	r31, r21
 980:	20 f0       	brcs	.+8      	; 0x98a <__udivmodsi4_ep>
 982:	a2 1b       	sub	r26, r18
 984:	b3 0b       	sbc	r27, r19
 986:	e4 0b       	sbc	r30, r20
 988:	f5 0b       	sbc	r31, r21

0000098a <__udivmodsi4_ep>:
 98a:	66 1f       	adc	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	1a 94       	dec	r1
 994:	69 f7       	brne	.-38     	; 0x970 <__udivmodsi4_loop>
 996:	60 95       	com	r22
 998:	70 95       	com	r23
 99a:	80 95       	com	r24
 99c:	90 95       	com	r25
 99e:	9b 01       	movw	r18, r22
 9a0:	ac 01       	movw	r20, r24
 9a2:	bd 01       	movw	r22, r26
 9a4:	cf 01       	movw	r24, r30
 9a6:	08 95       	ret

000009a8 <_exit>:
 9a8:	f8 94       	cli

000009aa <__stop_program>:
 9aa:	ff cf       	rjmp	.-2      	; 0x9aa <__stop_program>
