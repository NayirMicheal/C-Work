
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000da0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000da0  00000e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800084  00800084  00000e58  2**0
                  ALLOC
  3 .stab         00001224  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000075b  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 04 	call	0x958	; 0x958 <main>
  8a:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 98 06 	call	0xd30	; 0xd30 <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 ef       	ldi	r24, 0xF0	; 240
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	10 82       	st	Z, r1
	DDRD = DIO_u8_PORTD_DIRECTION;
 1e8:	e1 e3       	ldi	r30, 0x31	; 49
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	80 83       	st	Z, r24
}
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

000001f6 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <DIO_voidSetPinValue+0x6>
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	60 f5       	brcc	.+88     	; 0x262 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	88 23       	and	r24, r24
 20e:	a1 f4       	brne	.+40     	; 0x238 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 210:	ab e3       	ldi	r26, 0x3B	; 59
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	eb e3       	ldi	r30, 0x3B	; 59
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinValue+0x38>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinValue+0x34>
 232:	84 2b       	or	r24, r20
 234:	8c 93       	st	X, r24
 236:	b3 c0       	rjmp	.+358    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 238:	ab e3       	ldi	r26, 0x3B	; 59
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	eb e3       	ldi	r30, 0x3B	; 59
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_voidSetPinValue+0x60>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_voidSetPinValue+0x5c>
 25a:	80 95       	com	r24
 25c:	84 23       	and	r24, r20
 25e:	8c 93       	st	X, r24
 260:	9e c0       	rjmp	.+316    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	90 f1       	brcs	.+100    	; 0x2cc <DIO_voidSetPinValue+0xd6>
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	80 31       	cpi	r24, 0x10	; 16
 26c:	78 f5       	brcc	.+94     	; 0x2cc <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	88 50       	subi	r24, 0x08	; 8
 272:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	88 23       	and	r24, r24
 278:	a1 f4       	brne	.+40     	; 0x2a2 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27a:	a8 e3       	ldi	r26, 0x38	; 56
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e8 e3       	ldi	r30, 0x38	; 56
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	48 2f       	mov	r20, r24
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPinValue+0xa2>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPinValue+0x9e>
 29c:	84 2b       	or	r24, r20
 29e:	8c 93       	st	X, r24
 2a0:	7e c0       	rjmp	.+252    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a2:	a8 e3       	ldi	r26, 0x38	; 56
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e8 e3       	ldi	r30, 0x38	; 56
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	48 2f       	mov	r20, r24
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 2e       	mov	r0, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_voidSetPinValue+0xca>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_voidSetPinValue+0xc6>
 2c4:	80 95       	com	r24
 2c6:	84 23       	and	r24, r20
 2c8:	8c 93       	st	X, r24
 2ca:	69 c0       	rjmp	.+210    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	80 31       	cpi	r24, 0x10	; 16
 2d0:	90 f1       	brcs	.+100    	; 0x336 <DIO_voidSetPinValue+0x140>
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	88 31       	cpi	r24, 0x18	; 24
 2d6:	78 f5       	brcc	.+94     	; 0x336 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	80 51       	subi	r24, 0x10	; 16
 2dc:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	88 23       	and	r24, r24
 2e2:	a1 f4       	brne	.+40     	; 0x30c <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e3       	ldi	r30, 0x35	; 53
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_voidSetPinValue+0x10c>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_voidSetPinValue+0x108>
 306:	84 2b       	or	r24, r20
 308:	8c 93       	st	X, r24
 30a:	49 c0       	rjmp	.+146    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30c:	a5 e3       	ldi	r26, 0x35	; 53
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e5 e3       	ldi	r30, 0x35	; 53
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	48 2f       	mov	r20, r24
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 2e       	mov	r0, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_voidSetPinValue+0x134>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_voidSetPinValue+0x130>
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	8c 93       	st	X, r24
 334:	34 c0       	rjmp	.+104    	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	88 31       	cpi	r24, 0x18	; 24
 33a:	88 f1       	brcs	.+98     	; 0x39e <DIO_voidSetPinValue+0x1a8>
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	80 32       	cpi	r24, 0x20	; 32
 340:	70 f5       	brcc	.+92     	; 0x39e <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	88 51       	subi	r24, 0x18	; 24
 346:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	88 23       	and	r24, r24
 34c:	a1 f4       	brne	.+40     	; 0x376 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 34e:	a2 e3       	ldi	r26, 0x32	; 50
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e2 e3       	ldi	r30, 0x32	; 50
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_voidSetPinValue+0x176>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_voidSetPinValue+0x172>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	14 c0       	rjmp	.+40     	; 0x39e <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 376:	a2 e3       	ldi	r26, 0x32	; 50
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e2 e3       	ldi	r30, 0x32	; 50
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_voidSetPinValue+0x19e>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_voidSetPinValue+0x19a>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
		}			
	}
}
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3a8:	df 93       	push	r29
 3aa:	cf 93       	push	r28
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <DIO_u8GetPinValue+0x6>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x8>
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
 3b4:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	88 30       	cpi	r24, 0x08	; 8
 3ba:	00 f5       	brcc	.+64     	; 0x3fc <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3bc:	8c 81       	ldd	r24, Y+4	; 0x04
 3be:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c0:	e9 e3       	ldi	r30, 0x39	; 57
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	48 2f       	mov	r20, r24
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_u8GetPinValue+0x32>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	2a 95       	dec	r18
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_u8GetPinValue+0x2e>
 3de:	9a 01       	movw	r18, r20
 3e0:	28 23       	and	r18, r24
 3e2:	39 23       	and	r19, r25
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	a9 01       	movw	r20, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_u8GetPinValue+0x4a>
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_u8GetPinValue+0x46>
 3f6:	ca 01       	movw	r24, r20
 3f8:	8a 83       	std	Y+2, r24	; 0x02
 3fa:	74 c0       	rjmp	.+232    	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	80 31       	cpi	r24, 0x10	; 16
 400:	20 f1       	brcs	.+72     	; 0x44a <DIO_u8GetPinValue+0xa2>
 402:	8c 81       	ldd	r24, Y+4	; 0x04
 404:	88 31       	cpi	r24, 0x18	; 24
 406:	08 f5       	brcc	.+66     	; 0x44a <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 408:	8c 81       	ldd	r24, Y+4	; 0x04
 40a:	88 50       	subi	r24, 0x08	; 8
 40c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 40e:	e6 e3       	ldi	r30, 0x36	; 54
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	48 2f       	mov	r20, r24
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_u8GetPinValue+0x80>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	2a 95       	dec	r18
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_u8GetPinValue+0x7c>
 42c:	9a 01       	movw	r18, r20
 42e:	28 23       	and	r18, r24
 430:	39 23       	and	r19, r25
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	a9 01       	movw	r20, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8GetPinValue+0x98>
 43c:	55 95       	asr	r21
 43e:	47 95       	ror	r20
 440:	8a 95       	dec	r24
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_u8GetPinValue+0x94>
 444:	ca 01       	movw	r24, r20
 446:	8a 83       	std	Y+2, r24	; 0x02
 448:	4d c0       	rjmp	.+154    	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44a:	8c 81       	ldd	r24, Y+4	; 0x04
 44c:	80 31       	cpi	r24, 0x10	; 16
 44e:	20 f1       	brcs	.+72     	; 0x498 <DIO_u8GetPinValue+0xf0>
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	88 31       	cpi	r24, 0x18	; 24
 454:	08 f5       	brcc	.+66     	; 0x498 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	80 51       	subi	r24, 0x10	; 16
 45a:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45c:	e6 e3       	ldi	r30, 0x36	; 54
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	48 2f       	mov	r20, r24
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_u8GetPinValue+0xce>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	2a 95       	dec	r18
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_u8GetPinValue+0xca>
 47a:	9a 01       	movw	r18, r20
 47c:	28 23       	and	r18, r24
 47e:	39 23       	and	r19, r25
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	88 2f       	mov	r24, r24
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	a9 01       	movw	r20, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_u8GetPinValue+0xe6>
 48a:	55 95       	asr	r21
 48c:	47 95       	ror	r20
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_u8GetPinValue+0xe2>
 492:	ca 01       	movw	r24, r20
 494:	8a 83       	std	Y+2, r24	; 0x02
 496:	26 c0       	rjmp	.+76     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	88 31       	cpi	r24, 0x18	; 24
 49c:	18 f1       	brcs	.+70     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	80 32       	cpi	r24, 0x20	; 32
 4a2:	00 f5       	brcc	.+64     	; 0x4e4 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	88 51       	subi	r24, 0x18	; 24
 4a8:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4aa:	e0 e3       	ldi	r30, 0x30	; 48
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_u8GetPinValue+0x11c>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	2a 95       	dec	r18
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_u8GetPinValue+0x118>
 4c8:	9a 01       	movw	r18, r20
 4ca:	28 23       	and	r18, r24
 4cc:	39 23       	and	r19, r25
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	a9 01       	movw	r20, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8GetPinValue+0x134>
 4d8:	55 95       	asr	r21
 4da:	47 95       	ror	r20
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8GetPinValue+0x130>
 4e0:	ca 01       	movw	r24, r20
 4e2:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	88 23       	and	r24, r24
 4e8:	19 f4       	brne	.+6      	; 0x4f0 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	08 95       	ret

00000508 <KEYPAD_u16GetStatus>:
#include "KEYPAD_int.h"

static u16 u16ResultLoc=0;

u16 KEYPAD_u16GetStatus(void)
{
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
	/*Clear previous status*/
	u16ResultLoc=0;
 510:	10 92 85 00 	sts	0x0085, r1
 514:	10 92 84 00 	sts	0x0084, r1

	/*Phase 1*/
	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_LOW);
 518:	84 e0       	ldi	r24, 0x04	; 4
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 520:	85 e0       	ldi	r24, 0x05	; 5
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 530:	87 e0       	ldi	r24, 0x07	; 7
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	voidSetSwitchresult(0);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 df 02 	call	0x5be	; 0x5be <voidSetSwitchresult>

	/*Phase 2*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 53e:	84 e0       	ldi	r24, 0x04	; 4
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_LOW);
 546:	85 e0       	ldi	r24, 0x05	; 5
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 556:	87 e0       	ldi	r24, 0x07	; 7
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	voidSetSwitchresult(1);
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 df 02 	call	0x5be	; 0x5be <voidSetSwitchresult>

	/*Phase 3*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 564:	84 e0       	ldi	r24, 0x04	; 4
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 56c:	85 e0       	ldi	r24, 0x05	; 5
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_LOW);
 574:	86 e0       	ldi	r24, 0x06	; 6
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 57c:	87 e0       	ldi	r24, 0x07	; 7
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	voidSetSwitchresult(2);
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	0e 94 df 02 	call	0x5be	; 0x5be <voidSetSwitchresult>

	/*Phase 4*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 58a:	84 e0       	ldi	r24, 0x04	; 4
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 592:	85 e0       	ldi	r24, 0x05	; 5
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 59a:	86 e0       	ldi	r24, 0x06	; 6
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_LOW);
 5a2:	87 e0       	ldi	r24, 0x07	; 7
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	voidSetSwitchresult(3);
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	0e 94 df 02 	call	0x5be	; 0x5be <voidSetSwitchresult>

	return u16ResultLoc;
 5b0:	80 91 84 00 	lds	r24, 0x0084
 5b4:	90 91 85 00 	lds	r25, 0x0085
}
 5b8:	cf 91       	pop	r28
 5ba:	df 91       	pop	r29
 5bc:	08 95       	ret

000005be <voidSetSwitchresult>:

static void voidSetSwitchresult(u8 u8ColumnCpy)
{
 5be:	df 93       	push	r29
 5c0:	cf 93       	push	r28
 5c2:	0f 92       	push	r0
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_1) == DIO_u8_LOW)
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_u8GetPinValue>
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	a9 f4       	brne	.+42     	; 0x5fe <voidSetSwitchresult+0x40>
	{
		SET_BIT(u16ResultLoc,u8ColumnCpy);
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <voidSetSwitchresult+0x26>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	2a 95       	dec	r18
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <voidSetSwitchresult+0x22>
 5e8:	9c 01       	movw	r18, r24
 5ea:	80 91 84 00 	lds	r24, 0x0084
 5ee:	90 91 85 00 	lds	r25, 0x0085
 5f2:	82 2b       	or	r24, r18
 5f4:	93 2b       	or	r25, r19
 5f6:	90 93 85 00 	sts	0x0085, r25
 5fa:	80 93 84 00 	sts	0x0084, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_2) == DIO_u8_LOW)
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_u8GetPinValue>
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	c1 f4       	brne	.+48     	; 0x638 <voidSetSwitchresult+0x7a>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+4));
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	88 2f       	mov	r24, r24
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	9c 01       	movw	r18, r24
 610:	2c 5f       	subi	r18, 0xFC	; 252
 612:	3f 4f       	sbci	r19, 0xFF	; 255
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <voidSetSwitchresult+0x60>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	2a 95       	dec	r18
 620:	e2 f7       	brpl	.-8      	; 0x61a <voidSetSwitchresult+0x5c>
 622:	9c 01       	movw	r18, r24
 624:	80 91 84 00 	lds	r24, 0x0084
 628:	90 91 85 00 	lds	r25, 0x0085
 62c:	82 2b       	or	r24, r18
 62e:	93 2b       	or	r25, r19
 630:	90 93 85 00 	sts	0x0085, r25
 634:	80 93 84 00 	sts	0x0084, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_3) == DIO_u8_LOW)
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_u8GetPinValue>
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	c1 f4       	brne	.+48     	; 0x672 <voidSetSwitchresult+0xb4>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+8));
 642:	89 81       	ldd	r24, Y+1	; 0x01
 644:	88 2f       	mov	r24, r24
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	9c 01       	movw	r18, r24
 64a:	28 5f       	subi	r18, 0xF8	; 248
 64c:	3f 4f       	sbci	r19, 0xFF	; 255
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <voidSetSwitchresult+0x9a>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	2a 95       	dec	r18
 65a:	e2 f7       	brpl	.-8      	; 0x654 <voidSetSwitchresult+0x96>
 65c:	9c 01       	movw	r18, r24
 65e:	80 91 84 00 	lds	r24, 0x0084
 662:	90 91 85 00 	lds	r25, 0x0085
 666:	82 2b       	or	r24, r18
 668:	93 2b       	or	r25, r19
 66a:	90 93 85 00 	sts	0x0085, r25
 66e:	80 93 84 00 	sts	0x0084, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_4) == DIO_u8_LOW)
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_u8GetPinValue>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	c1 f4       	brne	.+48     	; 0x6ac <voidSetSwitchresult+0xee>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+12));
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	88 2f       	mov	r24, r24
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	9c 01       	movw	r18, r24
 684:	24 5f       	subi	r18, 0xF4	; 244
 686:	3f 4f       	sbci	r19, 0xFF	; 255
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <voidSetSwitchresult+0xd4>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	2a 95       	dec	r18
 694:	e2 f7       	brpl	.-8      	; 0x68e <voidSetSwitchresult+0xd0>
 696:	9c 01       	movw	r18, r24
 698:	80 91 84 00 	lds	r24, 0x0084
 69c:	90 91 85 00 	lds	r25, 0x0085
 6a0:	82 2b       	or	r24, r18
 6a2:	93 2b       	or	r25, r19
 6a4:	90 93 85 00 	sts	0x0085, r25
 6a8:	80 93 84 00 	sts	0x0084, r24
	}
}
 6ac:	0f 90       	pop	r0
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	08 95       	ret

000006b4 <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
 6b4:	df 93       	push	r29
 6b6:	cf 93       	push	r28
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
 6bc:	62 e3       	ldi	r22, 0x32	; 50
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*Write Function Set command*/
	voidWriteCmd(0b00110000 | (LCD_u8_FONT<<2) | (LCD_u8_NUM_OF_LINES<<3));
 6c8:	88 e3       	ldi	r24, 0x38	; 56
 6ca:	0e 94 93 03 	call	0x726	; 0x726 <voidWriteCmd>

	Delay_ms(1);
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write Display on command*/
	voidWriteCmd(0b00001000 | (LCD_u8_BLINK_ON_OFF<<0) | (LCD_u8_CURSOR_ON_OFF<<1) | (LCD_u8_DISPLAY_ON_OFF<<2));
 6da:	8c e0       	ldi	r24, 0x0C	; 12
 6dc:	0e 94 93 03 	call	0x726	; 0x726 <voidWriteCmd>

	Delay_ms(1);
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write command clear display*/
	voidWriteCmd(0b00000001);
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	0e 94 93 03 	call	0x726	; 0x726 <voidWriteCmd>

	Delay_ms(2);
 6f2:	62 e0       	ldi	r22, 0x02	; 2
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 6fe:	cf 91       	pop	r28
 700:	df 91       	pop	r29
 702:	08 95       	ret

00000704 <voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
static void voidWriteData(u8 u8DataCpy)
{
 704:	df 93       	push	r29
 706:	cf 93       	push	r28
 708:	0f 92       	push	r0
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
 710:	88 e0       	ldi	r24, 0x08	; 8
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
 718:	89 81       	ldd	r24, Y+1	; 0x01
 71a:	0e 94 a4 03 	call	0x748	; 0x748 <voidLcdExecute>
}
 71e:	0f 90       	pop	r0
 720:	cf 91       	pop	r28
 722:	df 91       	pop	r29
 724:	08 95       	ret

00000726 <voidWriteCmd>:
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
static void voidWriteCmd(u8 u8CommandCpy)
{
 726:	df 93       	push	r29
 728:	cf 93       	push	r28
 72a:	0f 92       	push	r0
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
 730:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
 732:	88 e0       	ldi	r24, 0x08	; 8
 734:	61 e0       	ldi	r22, 0x01	; 1
 736:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	0e 94 a4 03 	call	0x748	; 0x748 <voidLcdExecute>
}
 740:	0f 90       	pop	r0
 742:	cf 91       	pop	r28
 744:	df 91       	pop	r29
 746:	08 95       	ret

00000748 <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
 748:	df 93       	push	r29
 74a:	cf 93       	push	r28
 74c:	00 d0       	rcall	.+0      	; 0x74e <voidLcdExecute+0x6>
 74e:	cd b7       	in	r28, 0x3d	; 61
 750:	de b7       	in	r29, 0x3e	; 62
 752:	8a 83       	std	Y+2, r24	; 0x02
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
 754:	89 e0       	ldi	r24, 0x09	; 9
 756:	61 e0       	ldi	r22, 0x01	; 1
 758:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 75c:	19 82       	std	Y+1, r1	; 0x01
 75e:	34 c0       	rjmp	.+104    	; 0x7c8 <voidLcdExecute+0x80>
	{
		if(GET_BIT(u8ValueCpy,u8PinsCounterLocal))
 760:	8a 81       	ldd	r24, Y+2	; 0x02
 762:	48 2f       	mov	r20, r24
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	89 81       	ldd	r24, Y+1	; 0x01
 768:	28 2f       	mov	r18, r24
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <voidLcdExecute+0x2e>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	2a 95       	dec	r18
 778:	e2 f7       	brpl	.-8      	; 0x772 <voidLcdExecute+0x2a>
 77a:	9a 01       	movw	r18, r20
 77c:	28 23       	and	r18, r24
 77e:	39 23       	and	r19, r25
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	88 2f       	mov	r24, r24
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	a9 01       	movw	r20, r18
 788:	02 c0       	rjmp	.+4      	; 0x78e <voidLcdExecute+0x46>
 78a:	55 95       	asr	r21
 78c:	47 95       	ror	r20
 78e:	8a 95       	dec	r24
 790:	e2 f7       	brpl	.-8      	; 0x78a <voidLcdExecute+0x42>
 792:	ca 01       	movw	r24, r20
 794:	00 97       	sbiw	r24, 0x00	; 0
 796:	59 f0       	breq	.+22     	; 0x7ae <voidLcdExecute+0x66>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_HIGH);
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	88 2f       	mov	r24, r24
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	fc 01       	movw	r30, r24
 7a0:	e8 59       	subi	r30, 0x98	; 152
 7a2:	ff 4f       	sbci	r31, 0xFF	; 255
 7a4:	80 81       	ld	r24, Z
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
 7ac:	0a c0       	rjmp	.+20     	; 0x7c2 <voidLcdExecute+0x7a>
		}
			else
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
 7ae:	89 81       	ldd	r24, Y+1	; 0x01
 7b0:	88 2f       	mov	r24, r24
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	fc 01       	movw	r30, r24
 7b6:	e8 59       	subi	r30, 0x98	; 152
 7b8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ba:	80 81       	ld	r24, Z
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
static void voidLcdExecute(u8 u8ValueCpy)
{
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
 7c4:	8f 5f       	subi	r24, 0xFF	; 255
 7c6:	89 83       	std	Y+1, r24	; 0x01
 7c8:	89 81       	ldd	r24, Y+1	; 0x01
 7ca:	88 30       	cpi	r24, 0x08	; 8
 7cc:	48 f2       	brcs	.-110    	; 0x760 <voidLcdExecute+0x18>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
		}
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
 7ce:	8a e0       	ldi	r24, 0x0A	; 10
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_ms(1);
 7d6:	61 e0       	ldi	r22, 0x01	; 1
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
 7e2:	8a e0       	ldi	r24, 0x0A	; 10
 7e4:	61 e0       	ldi	r22, 0x01	; 1
 7e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_voidSetPinValue>
}
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	cf 91       	pop	r28
 7f0:	df 91       	pop	r29
 7f2:	08 95       	ret

000007f4 <LCD_voidWriteStringXY>:


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
 7f4:	df 93       	push	r29
 7f6:	cf 93       	push	r28
 7f8:	00 d0       	rcall	.+0      	; 0x7fa <LCD_voidWriteStringXY+0x6>
 7fa:	00 d0       	rcall	.+0      	; 0x7fc <LCD_voidWriteStringXY+0x8>
 7fc:	cd b7       	in	r28, 0x3d	; 61
 7fe:	de b7       	in	r29, 0x3e	; 62
 800:	9a 83       	std	Y+2, r25	; 0x02
 802:	89 83       	std	Y+1, r24	; 0x01
 804:	6b 83       	std	Y+3, r22	; 0x03
 806:	4c 83       	std	Y+4, r20	; 0x04
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
 808:	8c 81       	ldd	r24, Y+4	; 0x04
 80a:	88 2f       	mov	r24, r24
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	00 24       	eor	r0, r0
 810:	96 95       	lsr	r25
 812:	87 95       	ror	r24
 814:	07 94       	ror	r0
 816:	96 95       	lsr	r25
 818:	87 95       	ror	r24
 81a:	07 94       	ror	r0
 81c:	98 2f       	mov	r25, r24
 81e:	80 2d       	mov	r24, r0
 820:	98 2f       	mov	r25, r24
 822:	90 68       	ori	r25, 0x80	; 128
 824:	8b 81       	ldd	r24, Y+3	; 0x03
 826:	89 2b       	or	r24, r25
 828:	0e 94 93 03 	call	0x726	; 0x726 <voidWriteCmd>
 82c:	0a c0       	rjmp	.+20     	; 0x842 <LCD_voidWriteStringXY+0x4e>
	while(*u8PtrCpy)
	{
		voidWriteData(*u8PtrCpy);
 82e:	e9 81       	ldd	r30, Y+1	; 0x01
 830:	fa 81       	ldd	r31, Y+2	; 0x02
 832:	80 81       	ld	r24, Z
 834:	0e 94 82 03 	call	0x704	; 0x704 <voidWriteData>
		u8PtrCpy++;
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	9a 81       	ldd	r25, Y+2	; 0x02
 83c:	01 96       	adiw	r24, 0x01	; 1
 83e:	9a 83       	std	Y+2, r25	; 0x02
 840:	89 83       	std	Y+1, r24	; 0x01


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
	while(*u8PtrCpy)
 842:	e9 81       	ldd	r30, Y+1	; 0x01
 844:	fa 81       	ldd	r31, Y+2	; 0x02
 846:	80 81       	ld	r24, Z
 848:	88 23       	and	r24, r24
 84a:	89 f7       	brne	.-30     	; 0x82e <LCD_voidWriteStringXY+0x3a>
	{
		voidWriteData(*u8PtrCpy);
		u8PtrCpy++;
	}
}
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	cf 91       	pop	r28
 856:	df 91       	pop	r29
 858:	08 95       	ret

0000085a <LCD_voidWriteStringCurrentPosition>:
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
 85a:	df 93       	push	r29
 85c:	cf 93       	push	r28
 85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	9a 83       	std	Y+2, r25	; 0x02
 866:	89 83       	std	Y+1, r24	; 0x01
 868:	0a c0       	rjmp	.+20     	; 0x87e <__stack+0x1f>
	while(*u8PtrCpy)
		{
			voidWriteData(*u8PtrCpy);
 86a:	e9 81       	ldd	r30, Y+1	; 0x01
 86c:	fa 81       	ldd	r31, Y+2	; 0x02
 86e:	80 81       	ld	r24, Z
 870:	0e 94 82 03 	call	0x704	; 0x704 <voidWriteData>
			u8PtrCpy++;
 874:	89 81       	ldd	r24, Y+1	; 0x01
 876:	9a 81       	ldd	r25, Y+2	; 0x02
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	9a 83       	std	Y+2, r25	; 0x02
 87c:	89 83       	std	Y+1, r24	; 0x01
		u8PtrCpy++;
	}
}
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
	while(*u8PtrCpy)
 87e:	e9 81       	ldd	r30, Y+1	; 0x01
 880:	fa 81       	ldd	r31, Y+2	; 0x02
 882:	80 81       	ld	r24, Z
 884:	88 23       	and	r24, r24
 886:	89 f7       	brne	.-30     	; 0x86a <__stack+0xb>
		{
			voidWriteData(*u8PtrCpy);
			u8PtrCpy++;
		}
}
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	cf 91       	pop	r28
 88e:	df 91       	pop	r29
 890:	08 95       	ret

00000892 <LCD_voidClearDisplay>:
extern void LCD_voidClearDisplay(void)
{
 892:	df 93       	push	r29
 894:	cf 93       	push	r28
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
	voidWriteCmd(0b00000001);
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 93 03 	call	0x726	; 0x726 <voidWriteCmd>
	Delay_ms(2);
 8a0:	62 e0       	ldi	r22, 0x02	; 2
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 8ac:	cf 91       	pop	r28
 8ae:	df 91       	pop	r29
 8b0:	08 95       	ret

000008b2 <LCD_voidDrawCustomChar>:

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
 8b2:	df 93       	push	r29
 8b4:	cf 93       	push	r28
 8b6:	00 d0       	rcall	.+0      	; 0x8b8 <LCD_voidDrawCustomChar+0x6>
 8b8:	00 d0       	rcall	.+0      	; 0x8ba <LCD_voidDrawCustomChar+0x8>
 8ba:	cd b7       	in	r28, 0x3d	; 61
 8bc:	de b7       	in	r29, 0x3e	; 62
 8be:	9b 83       	std	Y+3, r25	; 0x03
 8c0:	8a 83       	std	Y+2, r24	; 0x02
 8c2:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
 8c4:	8c 81       	ldd	r24, Y+4	; 0x04
 8c6:	88 2f       	mov	r24, r24
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	80 64       	ori	r24, 0x40	; 64
 8d8:	0e 94 93 03 	call	0x726	; 0x726 <voidWriteCmd>
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 8dc:	19 82       	std	Y+1, r1	; 0x01
 8de:	0e c0       	rjmp	.+28     	; 0x8fc <LCD_voidDrawCustomChar+0x4a>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
 8e0:	89 81       	ldd	r24, Y+1	; 0x01
 8e2:	28 2f       	mov	r18, r24
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	8a 81       	ldd	r24, Y+2	; 0x02
 8e8:	9b 81       	ldd	r25, Y+3	; 0x03
 8ea:	fc 01       	movw	r30, r24
 8ec:	e2 0f       	add	r30, r18
 8ee:	f3 1f       	adc	r31, r19
 8f0:	80 81       	ld	r24, Z
 8f2:	0e 94 82 03 	call	0x704	; 0x704 <voidWriteData>
}

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	8f 5f       	subi	r24, 0xFF	; 255
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	89 81       	ldd	r24, Y+1	; 0x01
 8fe:	88 30       	cpi	r24, 0x08	; 8
 900:	78 f3       	brcs	.-34     	; 0x8e0 <LCD_voidDrawCustomChar+0x2e>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
	}
}
 902:	0f 90       	pop	r0
 904:	0f 90       	pop	r0
 906:	0f 90       	pop	r0
 908:	0f 90       	pop	r0
 90a:	cf 91       	pop	r28
 90c:	df 91       	pop	r29
 90e:	08 95       	ret

00000910 <LCD_voidWriteCustomChar>:

extern void LCD_voidWriteCustomChar(u8 u8IndexCpy ,u8 u8XPositionCpy,u8 u8YPositionCpy)
{
 910:	df 93       	push	r29
 912:	cf 93       	push	r28
 914:	00 d0       	rcall	.+0      	; 0x916 <LCD_voidWriteCustomChar+0x6>
 916:	0f 92       	push	r0
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
 91c:	89 83       	std	Y+1, r24	; 0x01
 91e:	6a 83       	std	Y+2, r22	; 0x02
 920:	4b 83       	std	Y+3, r20	; 0x03
	voidWriteCmd((0x80 | (u8YPositionCpy<<6) | u8XPositionCpy));
 922:	8b 81       	ldd	r24, Y+3	; 0x03
 924:	88 2f       	mov	r24, r24
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	00 24       	eor	r0, r0
 92a:	96 95       	lsr	r25
 92c:	87 95       	ror	r24
 92e:	07 94       	ror	r0
 930:	96 95       	lsr	r25
 932:	87 95       	ror	r24
 934:	07 94       	ror	r0
 936:	98 2f       	mov	r25, r24
 938:	80 2d       	mov	r24, r0
 93a:	98 2f       	mov	r25, r24
 93c:	90 68       	ori	r25, 0x80	; 128
 93e:	8a 81       	ldd	r24, Y+2	; 0x02
 940:	89 2b       	or	r24, r25
 942:	0e 94 93 03 	call	0x726	; 0x726 <voidWriteCmd>
	voidWriteData(u8IndexCpy);
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	0e 94 82 03 	call	0x704	; 0x704 <voidWriteData>
}
 94c:	0f 90       	pop	r0
 94e:	0f 90       	pop	r0
 950:	0f 90       	pop	r0
 952:	cf 91       	pop	r28
 954:	df 91       	pop	r29
 956:	08 95       	ret

00000958 <main>:
#include "BIT_MATH.h"
#include "DIO_int.h"
#include "LCD_int.h"
#include "KEYPAD_int.h"
void main (void)
{
 958:	df 93       	push	r29
 95a:	cf 93       	push	r28
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	a6 97       	sbiw	r28, 0x26	; 38
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	f8 94       	cli
 966:	de bf       	out	0x3e, r29	; 62
 968:	0f be       	out	0x3f, r0	; 63
 96a:	cd bf       	out	0x3d, r28	; 61
	u16 StatusKeys;
	u8 numbers[][1]={"1","\0","2","\0","3","\0","4","\0","5","\0","6","\0","7","\0","8","\0","9","\0","0","\0"};
 96c:	9e 01       	movw	r18, r28
 96e:	24 5f       	subi	r18, 0xF4	; 244
 970:	3f 4f       	sbci	r19, 0xFF	; 255
 972:	3b a3       	std	Y+35, r19	; 0x23
 974:	2a a3       	std	Y+34, r18	; 0x22
 976:	40 e7       	ldi	r20, 0x70	; 112
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	5d a3       	std	Y+37, r21	; 0x25
 97c:	4c a3       	std	Y+36, r20	; 0x24
 97e:	54 e1       	ldi	r21, 0x14	; 20
 980:	5e a3       	std	Y+38, r21	; 0x26
 982:	ec a1       	ldd	r30, Y+36	; 0x24
 984:	fd a1       	ldd	r31, Y+37	; 0x25
 986:	00 80       	ld	r0, Z
 988:	2c a1       	ldd	r18, Y+36	; 0x24
 98a:	3d a1       	ldd	r19, Y+37	; 0x25
 98c:	2f 5f       	subi	r18, 0xFF	; 255
 98e:	3f 4f       	sbci	r19, 0xFF	; 255
 990:	3d a3       	std	Y+37, r19	; 0x25
 992:	2c a3       	std	Y+36, r18	; 0x24
 994:	ea a1       	ldd	r30, Y+34	; 0x22
 996:	fb a1       	ldd	r31, Y+35	; 0x23
 998:	00 82       	st	Z, r0
 99a:	2a a1       	ldd	r18, Y+34	; 0x22
 99c:	3b a1       	ldd	r19, Y+35	; 0x23
 99e:	2f 5f       	subi	r18, 0xFF	; 255
 9a0:	3f 4f       	sbci	r19, 0xFF	; 255
 9a2:	3b a3       	std	Y+35, r19	; 0x23
 9a4:	2a a3       	std	Y+34, r18	; 0x22
 9a6:	3e a1       	ldd	r19, Y+38	; 0x26
 9a8:	31 50       	subi	r19, 0x01	; 1
 9aa:	3e a3       	std	Y+38, r19	; 0x26
 9ac:	4e a1       	ldd	r20, Y+38	; 0x26
 9ae:	44 23       	and	r20, r20
 9b0:	41 f7       	brne	.-48     	; 0x982 <main+0x2a>
	s8 num1=-1,num2=-1;
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
 9b4:	89 87       	std	Y+9, r24	; 0x09
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	88 87       	std	Y+8, r24	; 0x08
	u8 operation,firstNum=0;
 9ba:	1e 82       	std	Y+6, r1	; 0x06
	u8 result;
	u8 digit;
	DIO_voidInitialize();
 9bc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	LCD_voidInitialize();
 9c0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LCD_voidInitialize>
	while(1)
	{
		StatusKeys=KEYPAD_u16GetStatus();
 9c4:	0e 94 84 02 	call	0x508	; 0x508 <KEYPAD_u16GetStatus>
 9c8:	9b 87       	std	Y+11, r25	; 0x0b
 9ca:	8a 87       	std	Y+10, r24	; 0x0a

		for(u8 i=0;i<10;i++)
 9cc:	1b 82       	std	Y+3, r1	; 0x03
 9ce:	61 c0       	rjmp	.+194    	; 0xa92 <main+0x13a>
		{
			if(GET_BIT(StatusKeys,i))
 9d0:	8b 81       	ldd	r24, Y+3	; 0x03
 9d2:	28 2f       	mov	r18, r24
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <main+0x88>
 9dc:	88 0f       	add	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	2a 95       	dec	r18
 9e2:	e2 f7       	brpl	.-8      	; 0x9dc <main+0x84>
 9e4:	9c 01       	movw	r18, r24
 9e6:	8a 85       	ldd	r24, Y+10	; 0x0a
 9e8:	9b 85       	ldd	r25, Y+11	; 0x0b
 9ea:	28 23       	and	r18, r24
 9ec:	39 23       	and	r19, r25
 9ee:	8b 81       	ldd	r24, Y+3	; 0x03
 9f0:	88 2f       	mov	r24, r24
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	f9 01       	movw	r30, r18
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <main+0xa4>
 9f8:	f6 95       	lsr	r31
 9fa:	e7 95       	ror	r30
 9fc:	8a 95       	dec	r24
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <main+0xa0>
 a00:	cf 01       	movw	r24, r30
 a02:	00 97       	sbiw	r24, 0x00	; 0
 a04:	09 f4       	brne	.+2      	; 0xa08 <main+0xb0>
 a06:	42 c0       	rjmp	.+132    	; 0xa8c <main+0x134>
			{
				if(firstNum==0)
 a08:	8e 81       	ldd	r24, Y+6	; 0x06
 a0a:	88 23       	and	r24, r24
 a0c:	f9 f4       	brne	.+62     	; 0xa4c <main+0xf4>
				{
					num1=(i+1)%10;
 a0e:	8b 81       	ldd	r24, Y+3	; 0x03
 a10:	88 2f       	mov	r24, r24
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	01 96       	adiw	r24, 0x01	; 1
 a16:	2a e0       	ldi	r18, 0x0A	; 10
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	b9 01       	movw	r22, r18
 a1c:	0e 94 85 06 	call	0xd0a	; 0xd0a <__divmodhi4>
 a20:	89 87       	std	Y+9, r24	; 0x09
					LCD_voidWriteStringCurrentPosition(numbers[(i*2)]);
 a22:	9e 01       	movw	r18, r28
 a24:	24 5f       	subi	r18, 0xF4	; 244
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	8b 81       	ldd	r24, Y+3	; 0x03
 a2a:	88 2f       	mov	r24, r24
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	82 0f       	add	r24, r18
 a34:	93 1f       	adc	r25, r19
 a36:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_voidWriteStringCurrentPosition>
					Delay_ms(200);
 a3a:	68 ec       	ldi	r22, 0xC8	; 200
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
					firstNum=1;
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	8e 83       	std	Y+6, r24	; 0x06
 a4a:	27 c0       	rjmp	.+78     	; 0xa9a <main+0x142>
				}
				else if(firstNum==1)
 a4c:	8e 81       	ldd	r24, Y+6	; 0x06
 a4e:	81 30       	cpi	r24, 0x01	; 1
 a50:	21 f5       	brne	.+72     	; 0xa9a <main+0x142>
				{
					num2=(i+1)%10;
 a52:	8b 81       	ldd	r24, Y+3	; 0x03
 a54:	88 2f       	mov	r24, r24
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	2a e0       	ldi	r18, 0x0A	; 10
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	b9 01       	movw	r22, r18
 a60:	0e 94 85 06 	call	0xd0a	; 0xd0a <__divmodhi4>
 a64:	88 87       	std	Y+8, r24	; 0x08
					LCD_voidWriteStringCurrentPosition(numbers[(i*2)]);
 a66:	9e 01       	movw	r18, r28
 a68:	24 5f       	subi	r18, 0xF4	; 244
 a6a:	3f 4f       	sbci	r19, 0xFF	; 255
 a6c:	8b 81       	ldd	r24, Y+3	; 0x03
 a6e:	88 2f       	mov	r24, r24
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	88 0f       	add	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	82 0f       	add	r24, r18
 a78:	93 1f       	adc	r25, r19
 a7a:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_voidWriteStringCurrentPosition>
					Delay_ms(200);
 a7e:	68 ec       	ldi	r22, 0xC8	; 200
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
 a8a:	07 c0       	rjmp	.+14     	; 0xa9a <main+0x142>
	LCD_voidInitialize();
	while(1)
	{
		StatusKeys=KEYPAD_u16GetStatus();

		for(u8 i=0;i<10;i++)
 a8c:	8b 81       	ldd	r24, Y+3	; 0x03
 a8e:	8f 5f       	subi	r24, 0xFF	; 255
 a90:	8b 83       	std	Y+3, r24	; 0x03
 a92:	8b 81       	ldd	r24, Y+3	; 0x03
 a94:	8a 30       	cpi	r24, 0x0A	; 10
 a96:	08 f4       	brcc	.+2      	; 0xa9a <main+0x142>
 a98:	9b cf       	rjmp	.-202    	; 0x9d0 <main+0x78>
					Delay_ms(200);
				}
				break;
			}
		}
		if(GET_BIT(StatusKeys,10))
 a9a:	8a 85       	ldd	r24, Y+10	; 0x0a
 a9c:	9b 85       	ldd	r25, Y+11	; 0x0b
 a9e:	80 70       	andi	r24, 0x00	; 0
 aa0:	94 70       	andi	r25, 0x04	; 4
 aa2:	89 2f       	mov	r24, r25
 aa4:	99 27       	eor	r25, r25
 aa6:	86 95       	lsr	r24
 aa8:	86 95       	lsr	r24
 aaa:	00 97       	sbiw	r24, 0x00	; 0
 aac:	09 f4       	brne	.+2      	; 0xab0 <main+0x158>
 aae:	93 c0       	rjmp	.+294    	; 0xbd6 <main+0x27e>
		{
			u8 TempResult;
			u8 numOfDigits=0;
 ab0:	19 82       	std	Y+1, r1	; 0x01
			if(num1>=0 && num2>=0 && operation>0)
 ab2:	89 85       	ldd	r24, Y+9	; 0x09
 ab4:	88 23       	and	r24, r24
 ab6:	0c f4       	brge	.+2      	; 0xaba <main+0x162>
 ab8:	88 c0       	rjmp	.+272    	; 0xbca <main+0x272>
 aba:	88 85       	ldd	r24, Y+8	; 0x08
 abc:	88 23       	and	r24, r24
 abe:	0c f4       	brge	.+2      	; 0xac2 <main+0x16a>
 ac0:	84 c0       	rjmp	.+264    	; 0xbca <main+0x272>
 ac2:	8f 81       	ldd	r24, Y+7	; 0x07
 ac4:	88 23       	and	r24, r24
 ac6:	09 f4       	brne	.+2      	; 0xaca <main+0x172>
 ac8:	80 c0       	rjmp	.+256    	; 0xbca <main+0x272>
			{

				switch(operation)
 aca:	8f 81       	ldd	r24, Y+7	; 0x07
 acc:	28 2f       	mov	r18, r24
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	39 a3       	std	Y+33, r19	; 0x21
 ad2:	28 a3       	std	Y+32, r18	; 0x20
 ad4:	48 a1       	ldd	r20, Y+32	; 0x20
 ad6:	59 a1       	ldd	r21, Y+33	; 0x21
 ad8:	42 30       	cpi	r20, 0x02	; 2
 ada:	51 05       	cpc	r21, r1
 adc:	d9 f0       	breq	.+54     	; 0xb14 <main+0x1bc>
 ade:	88 a1       	ldd	r24, Y+32	; 0x20
 ae0:	99 a1       	ldd	r25, Y+33	; 0x21
 ae2:	83 30       	cpi	r24, 0x03	; 3
 ae4:	91 05       	cpc	r25, r1
 ae6:	34 f4       	brge	.+12     	; 0xaf4 <main+0x19c>
 ae8:	e8 a1       	ldd	r30, Y+32	; 0x20
 aea:	f9 a1       	ldd	r31, Y+33	; 0x21
 aec:	e1 30       	cpi	r30, 0x01	; 1
 aee:	f1 05       	cpc	r31, r1
 af0:	61 f0       	breq	.+24     	; 0xb0a <main+0x1b2>
 af2:	2c c0       	rjmp	.+88     	; 0xb4c <main+0x1f4>
 af4:	28 a1       	ldd	r18, Y+32	; 0x20
 af6:	39 a1       	ldd	r19, Y+33	; 0x21
 af8:	23 30       	cpi	r18, 0x03	; 3
 afa:	31 05       	cpc	r19, r1
 afc:	81 f0       	breq	.+32     	; 0xb1e <main+0x1c6>
 afe:	48 a1       	ldd	r20, Y+32	; 0x20
 b00:	59 a1       	ldd	r21, Y+33	; 0x21
 b02:	44 30       	cpi	r20, 0x04	; 4
 b04:	51 05       	cpc	r21, r1
 b06:	91 f0       	breq	.+36     	; 0xb2c <main+0x1d4>
 b08:	21 c0       	rjmp	.+66     	; 0xb4c <main+0x1f4>
				{
				case 1:
					result=num1+num2;
 b0a:	89 85       	ldd	r24, Y+9	; 0x09
 b0c:	98 85       	ldd	r25, Y+8	; 0x08
 b0e:	89 0f       	add	r24, r25
 b10:	8d 83       	std	Y+5, r24	; 0x05
 b12:	1c c0       	rjmp	.+56     	; 0xb4c <main+0x1f4>
					break;
				case 2:
					result=num1-num2;
 b14:	89 85       	ldd	r24, Y+9	; 0x09
 b16:	98 85       	ldd	r25, Y+8	; 0x08
 b18:	89 1b       	sub	r24, r25
 b1a:	8d 83       	std	Y+5, r24	; 0x05
 b1c:	17 c0       	rjmp	.+46     	; 0xb4c <main+0x1f4>
					break;
				case 3:
					result=num1*num2;
 b1e:	89 85       	ldd	r24, Y+9	; 0x09
 b20:	98 85       	ldd	r25, Y+8	; 0x08
 b22:	89 9f       	mul	r24, r25
 b24:	80 2d       	mov	r24, r0
 b26:	11 24       	eor	r1, r1
 b28:	8d 83       	std	Y+5, r24	; 0x05
 b2a:	10 c0       	rjmp	.+32     	; 0xb4c <main+0x1f4>
					break;
				case 4:
					result=num1/num2;
 b2c:	89 85       	ldd	r24, Y+9	; 0x09
 b2e:	48 2f       	mov	r20, r24
 b30:	55 27       	eor	r21, r21
 b32:	47 fd       	sbrc	r20, 7
 b34:	50 95       	com	r21
 b36:	88 85       	ldd	r24, Y+8	; 0x08
 b38:	28 2f       	mov	r18, r24
 b3a:	33 27       	eor	r19, r19
 b3c:	27 fd       	sbrc	r18, 7
 b3e:	30 95       	com	r19
 b40:	ca 01       	movw	r24, r20
 b42:	b9 01       	movw	r22, r18
 b44:	0e 94 85 06 	call	0xd0a	; 0xd0a <__divmodhi4>
 b48:	cb 01       	movw	r24, r22
 b4a:	8d 83       	std	Y+5, r24	; 0x05
					break;
				}
				TempResult=result;
 b4c:	8d 81       	ldd	r24, Y+5	; 0x05
 b4e:	8a 83       	std	Y+2, r24	; 0x02
				LCD_voidClearDisplay();
 b50:	0e 94 49 04 	call	0x892	; 0x892 <LCD_voidClearDisplay>
				if(result==0)
 b54:	8d 81       	ldd	r24, Y+5	; 0x05
 b56:	88 23       	and	r24, r24
 b58:	89 f4       	brne	.+34     	; 0xb7c <main+0x224>
				{
					LCD_voidWriteStringXY(numbers[18],0,0);
 b5a:	ce 01       	movw	r24, r28
 b5c:	0c 96       	adiw	r24, 0x0c	; 12
 b5e:	42 96       	adiw	r24, 0x12	; 18
 b60:	60 e0       	ldi	r22, 0x00	; 0
 b62:	40 e0       	ldi	r20, 0x00	; 0
 b64:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_voidWriteStringXY>
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <main+0x224>
				}
				while(TempResult!=0)
				{
					TempResult/=10;
 b6a:	8a 81       	ldd	r24, Y+2	; 0x02
 b6c:	9a e0       	ldi	r25, 0x0A	; 10
 b6e:	69 2f       	mov	r22, r25
 b70:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 b74:	8a 83       	std	Y+2, r24	; 0x02
					numOfDigits++;
 b76:	89 81       	ldd	r24, Y+1	; 0x01
 b78:	8f 5f       	subi	r24, 0xFF	; 255
 b7a:	89 83       	std	Y+1, r24	; 0x01
				LCD_voidClearDisplay();
				if(result==0)
				{
					LCD_voidWriteStringXY(numbers[18],0,0);
				}
				while(TempResult!=0)
 b7c:	8a 81       	ldd	r24, Y+2	; 0x02
 b7e:	88 23       	and	r24, r24
 b80:	a1 f7       	brne	.-24     	; 0xb6a <main+0x212>
 b82:	20 c0       	rjmp	.+64     	; 0xbc4 <main+0x26c>
					TempResult/=10;
					numOfDigits++;
				}
				while(numOfDigits!=0)
				{
					digit=result%10;
 b84:	8d 81       	ldd	r24, Y+5	; 0x05
 b86:	9a e0       	ldi	r25, 0x0A	; 10
 b88:	69 2f       	mov	r22, r25
 b8a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 b8e:	89 2f       	mov	r24, r25
 b90:	8c 83       	std	Y+4, r24	; 0x04
					result/=10;
 b92:	8d 81       	ldd	r24, Y+5	; 0x05
 b94:	9a e0       	ldi	r25, 0x0A	; 10
 b96:	69 2f       	mov	r22, r25
 b98:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodqi4>
 b9c:	8d 83       	std	Y+5, r24	; 0x05
					numOfDigits--;
 b9e:	89 81       	ldd	r24, Y+1	; 0x01
 ba0:	81 50       	subi	r24, 0x01	; 1
 ba2:	89 83       	std	Y+1, r24	; 0x01
					LCD_voidWriteStringXY(numbers[((digit-1)*2)],numOfDigits,0);
 ba4:	9e 01       	movw	r18, r28
 ba6:	24 5f       	subi	r18, 0xF4	; 244
 ba8:	3f 4f       	sbci	r19, 0xFF	; 255
 baa:	8c 81       	ldd	r24, Y+4	; 0x04
 bac:	88 2f       	mov	r24, r24
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	01 97       	sbiw	r24, 0x01	; 1
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	82 0f       	add	r24, r18
 bb8:	93 1f       	adc	r25, r19
 bba:	69 81       	ldd	r22, Y+1	; 0x01
 bbc:	40 e0       	ldi	r20, 0x00	; 0
 bbe:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_voidWriteStringXY>
					firstNum=0;
 bc2:	1e 82       	std	Y+6, r1	; 0x06
				while(TempResult!=0)
				{
					TempResult/=10;
					numOfDigits++;
				}
				while(numOfDigits!=0)
 bc4:	89 81       	ldd	r24, Y+1	; 0x01
 bc6:	88 23       	and	r24, r24
 bc8:	e9 f6       	brne	.-70     	; 0xb84 <main+0x22c>
					numOfDigits--;
					LCD_voidWriteStringXY(numbers[((digit-1)*2)],numOfDigits,0);
					firstNum=0;
				}
			}
			Delay_ms(200);
 bca:	68 ec       	ldi	r22, 0xC8	; 200
 bcc:	70 e0       	ldi	r23, 0x00	; 0
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		}
		if(GET_BIT(StatusKeys,11))
 bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
 bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
 bda:	80 70       	andi	r24, 0x00	; 0
 bdc:	98 70       	andi	r25, 0x08	; 8
 bde:	89 2f       	mov	r24, r25
 be0:	99 27       	eor	r25, r25
 be2:	86 95       	lsr	r24
 be4:	86 95       	lsr	r24
 be6:	86 95       	lsr	r24
 be8:	00 97       	sbiw	r24, 0x00	; 0
 bea:	71 f0       	breq	.+28     	; 0xc08 <main+0x2b0>
		{
			num1=-1;
 bec:	8f ef       	ldi	r24, 0xFF	; 255
 bee:	89 87       	std	Y+9, r24	; 0x09
			num2=-1;
 bf0:	8f ef       	ldi	r24, 0xFF	; 255
 bf2:	88 87       	std	Y+8, r24	; 0x08
			operation=0;
 bf4:	1f 82       	std	Y+7, r1	; 0x07
			firstNum=0;
 bf6:	1e 82       	std	Y+6, r1	; 0x06
			LCD_voidClearDisplay();
 bf8:	0e 94 49 04 	call	0x892	; 0x892 <LCD_voidClearDisplay>
			Delay_ms(200);
 bfc:	68 ec       	ldi	r22, 0xC8	; 200
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	80 e0       	ldi	r24, 0x00	; 0
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		}
		if(GET_BIT(StatusKeys,12))
 c08:	8a 85       	ldd	r24, Y+10	; 0x0a
 c0a:	9b 85       	ldd	r25, Y+11	; 0x0b
 c0c:	80 70       	andi	r24, 0x00	; 0
 c0e:	90 71       	andi	r25, 0x10	; 16
 c10:	89 2f       	mov	r24, r25
 c12:	99 27       	eor	r25, r25
 c14:	82 95       	swap	r24
 c16:	8f 70       	andi	r24, 0x0F	; 15
 c18:	00 97       	sbiw	r24, 0x00	; 0
 c1a:	61 f0       	breq	.+24     	; 0xc34 <main+0x2dc>
		{
			operation=1;
 c1c:	81 e0       	ldi	r24, 0x01	; 1
 c1e:	8f 83       	std	Y+7, r24	; 0x07
			LCD_voidWriteStringCurrentPosition("+");
 c20:	80 e6       	ldi	r24, 0x60	; 96
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_voidWriteStringCurrentPosition>
			Delay_ms(200);
 c28:	68 ec       	ldi	r22, 0xC8	; 200
 c2a:	70 e0       	ldi	r23, 0x00	; 0
 c2c:	80 e0       	ldi	r24, 0x00	; 0
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		}
		if(GET_BIT(StatusKeys,13))
 c34:	8a 85       	ldd	r24, Y+10	; 0x0a
 c36:	9b 85       	ldd	r25, Y+11	; 0x0b
 c38:	80 70       	andi	r24, 0x00	; 0
 c3a:	90 72       	andi	r25, 0x20	; 32
 c3c:	89 2f       	mov	r24, r25
 c3e:	99 27       	eor	r25, r25
 c40:	82 95       	swap	r24
 c42:	86 95       	lsr	r24
 c44:	87 70       	andi	r24, 0x07	; 7
 c46:	00 97       	sbiw	r24, 0x00	; 0
 c48:	61 f0       	breq	.+24     	; 0xc62 <main+0x30a>
		{
			operation=2;
 c4a:	82 e0       	ldi	r24, 0x02	; 2
 c4c:	8f 83       	std	Y+7, r24	; 0x07
			LCD_voidWriteStringCurrentPosition("-");
 c4e:	82 e6       	ldi	r24, 0x62	; 98
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_voidWriteStringCurrentPosition>
			Delay_ms(200);
 c56:	68 ec       	ldi	r22, 0xC8	; 200
 c58:	70 e0       	ldi	r23, 0x00	; 0
 c5a:	80 e0       	ldi	r24, 0x00	; 0
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		}
		if(GET_BIT(StatusKeys,14))
 c62:	8a 85       	ldd	r24, Y+10	; 0x0a
 c64:	9b 85       	ldd	r25, Y+11	; 0x0b
 c66:	80 70       	andi	r24, 0x00	; 0
 c68:	90 74       	andi	r25, 0x40	; 64
 c6a:	84 e0       	ldi	r24, 0x04	; 4
 c6c:	98 9f       	mul	r25, r24
 c6e:	81 2d       	mov	r24, r1
 c70:	99 27       	eor	r25, r25
 c72:	11 24       	eor	r1, r1
 c74:	00 97       	sbiw	r24, 0x00	; 0
 c76:	61 f0       	breq	.+24     	; 0xc90 <main+0x338>
		{
			operation=3;
 c78:	83 e0       	ldi	r24, 0x03	; 3
 c7a:	8f 83       	std	Y+7, r24	; 0x07
			LCD_voidWriteStringCurrentPosition("*");
 c7c:	84 e6       	ldi	r24, 0x64	; 100
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_voidWriteStringCurrentPosition>
			Delay_ms(200);
 c84:	68 ec       	ldi	r22, 0xC8	; 200
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		}
		if(GET_BIT(StatusKeys,15))
 c90:	8a 85       	ldd	r24, Y+10	; 0x0a
 c92:	9b 85       	ldd	r25, Y+11	; 0x0b
 c94:	99 23       	and	r25, r25
 c96:	0c f0       	brlt	.+2      	; 0xc9a <main+0x342>
 c98:	95 ce       	rjmp	.-726    	; 0x9c4 <main+0x6c>
		{
			operation=4;
 c9a:	84 e0       	ldi	r24, 0x04	; 4
 c9c:	8f 83       	std	Y+7, r24	; 0x07
			LCD_voidWriteStringCurrentPosition("/");
 c9e:	86 e6       	ldi	r24, 0x66	; 102
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_voidWriteStringCurrentPosition>
			Delay_ms(200);
 ca6:	68 ec       	ldi	r22, 0xC8	; 200
 ca8:	70 e0       	ldi	r23, 0x00	; 0
 caa:	80 e0       	ldi	r24, 0x00	; 0
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
 cb2:	88 ce       	rjmp	.-752    	; 0x9c4 <main+0x6c>

00000cb4 <__mulsi3>:
 cb4:	62 9f       	mul	r22, r18
 cb6:	d0 01       	movw	r26, r0
 cb8:	73 9f       	mul	r23, r19
 cba:	f0 01       	movw	r30, r0
 cbc:	82 9f       	mul	r24, r18
 cbe:	e0 0d       	add	r30, r0
 cc0:	f1 1d       	adc	r31, r1
 cc2:	64 9f       	mul	r22, r20
 cc4:	e0 0d       	add	r30, r0
 cc6:	f1 1d       	adc	r31, r1
 cc8:	92 9f       	mul	r25, r18
 cca:	f0 0d       	add	r31, r0
 ccc:	83 9f       	mul	r24, r19
 cce:	f0 0d       	add	r31, r0
 cd0:	74 9f       	mul	r23, r20
 cd2:	f0 0d       	add	r31, r0
 cd4:	65 9f       	mul	r22, r21
 cd6:	f0 0d       	add	r31, r0
 cd8:	99 27       	eor	r25, r25
 cda:	72 9f       	mul	r23, r18
 cdc:	b0 0d       	add	r27, r0
 cde:	e1 1d       	adc	r30, r1
 ce0:	f9 1f       	adc	r31, r25
 ce2:	63 9f       	mul	r22, r19
 ce4:	b0 0d       	add	r27, r0
 ce6:	e1 1d       	adc	r30, r1
 ce8:	f9 1f       	adc	r31, r25
 cea:	bd 01       	movw	r22, r26
 cec:	cf 01       	movw	r24, r30
 cee:	11 24       	eor	r1, r1
 cf0:	08 95       	ret

00000cf2 <__udivmodqi4>:
 cf2:	99 1b       	sub	r25, r25
 cf4:	79 e0       	ldi	r23, 0x09	; 9
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__udivmodqi4_ep>

00000cf8 <__udivmodqi4_loop>:
 cf8:	99 1f       	adc	r25, r25
 cfa:	96 17       	cp	r25, r22
 cfc:	08 f0       	brcs	.+2      	; 0xd00 <__udivmodqi4_ep>
 cfe:	96 1b       	sub	r25, r22

00000d00 <__udivmodqi4_ep>:
 d00:	88 1f       	adc	r24, r24
 d02:	7a 95       	dec	r23
 d04:	c9 f7       	brne	.-14     	; 0xcf8 <__udivmodqi4_loop>
 d06:	80 95       	com	r24
 d08:	08 95       	ret

00000d0a <__divmodhi4>:
 d0a:	97 fb       	bst	r25, 7
 d0c:	09 2e       	mov	r0, r25
 d0e:	07 26       	eor	r0, r23
 d10:	0a d0       	rcall	.+20     	; 0xd26 <__divmodhi4_neg1>
 d12:	77 fd       	sbrc	r23, 7
 d14:	04 d0       	rcall	.+8      	; 0xd1e <__divmodhi4_neg2>
 d16:	2e d0       	rcall	.+92     	; 0xd74 <__udivmodhi4>
 d18:	06 d0       	rcall	.+12     	; 0xd26 <__divmodhi4_neg1>
 d1a:	00 20       	and	r0, r0
 d1c:	1a f4       	brpl	.+6      	; 0xd24 <__divmodhi4_exit>

00000d1e <__divmodhi4_neg2>:
 d1e:	70 95       	com	r23
 d20:	61 95       	neg	r22
 d22:	7f 4f       	sbci	r23, 0xFF	; 255

00000d24 <__divmodhi4_exit>:
 d24:	08 95       	ret

00000d26 <__divmodhi4_neg1>:
 d26:	f6 f7       	brtc	.-4      	; 0xd24 <__divmodhi4_exit>
 d28:	90 95       	com	r25
 d2a:	81 95       	neg	r24
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	08 95       	ret

00000d30 <__udivmodsi4>:
 d30:	a1 e2       	ldi	r26, 0x21	; 33
 d32:	1a 2e       	mov	r1, r26
 d34:	aa 1b       	sub	r26, r26
 d36:	bb 1b       	sub	r27, r27
 d38:	fd 01       	movw	r30, r26
 d3a:	0d c0       	rjmp	.+26     	; 0xd56 <__udivmodsi4_ep>

00000d3c <__udivmodsi4_loop>:
 d3c:	aa 1f       	adc	r26, r26
 d3e:	bb 1f       	adc	r27, r27
 d40:	ee 1f       	adc	r30, r30
 d42:	ff 1f       	adc	r31, r31
 d44:	a2 17       	cp	r26, r18
 d46:	b3 07       	cpc	r27, r19
 d48:	e4 07       	cpc	r30, r20
 d4a:	f5 07       	cpc	r31, r21
 d4c:	20 f0       	brcs	.+8      	; 0xd56 <__udivmodsi4_ep>
 d4e:	a2 1b       	sub	r26, r18
 d50:	b3 0b       	sbc	r27, r19
 d52:	e4 0b       	sbc	r30, r20
 d54:	f5 0b       	sbc	r31, r21

00000d56 <__udivmodsi4_ep>:
 d56:	66 1f       	adc	r22, r22
 d58:	77 1f       	adc	r23, r23
 d5a:	88 1f       	adc	r24, r24
 d5c:	99 1f       	adc	r25, r25
 d5e:	1a 94       	dec	r1
 d60:	69 f7       	brne	.-38     	; 0xd3c <__udivmodsi4_loop>
 d62:	60 95       	com	r22
 d64:	70 95       	com	r23
 d66:	80 95       	com	r24
 d68:	90 95       	com	r25
 d6a:	9b 01       	movw	r18, r22
 d6c:	ac 01       	movw	r20, r24
 d6e:	bd 01       	movw	r22, r26
 d70:	cf 01       	movw	r24, r30
 d72:	08 95       	ret

00000d74 <__udivmodhi4>:
 d74:	aa 1b       	sub	r26, r26
 d76:	bb 1b       	sub	r27, r27
 d78:	51 e1       	ldi	r21, 0x11	; 17
 d7a:	07 c0       	rjmp	.+14     	; 0xd8a <__udivmodhi4_ep>

00000d7c <__udivmodhi4_loop>:
 d7c:	aa 1f       	adc	r26, r26
 d7e:	bb 1f       	adc	r27, r27
 d80:	a6 17       	cp	r26, r22
 d82:	b7 07       	cpc	r27, r23
 d84:	10 f0       	brcs	.+4      	; 0xd8a <__udivmodhi4_ep>
 d86:	a6 1b       	sub	r26, r22
 d88:	b7 0b       	sbc	r27, r23

00000d8a <__udivmodhi4_ep>:
 d8a:	88 1f       	adc	r24, r24
 d8c:	99 1f       	adc	r25, r25
 d8e:	5a 95       	dec	r21
 d90:	a9 f7       	brne	.-22     	; 0xd7c <__udivmodhi4_loop>
 d92:	80 95       	com	r24
 d94:	90 95       	com	r25
 d96:	bc 01       	movw	r22, r24
 d98:	cd 01       	movw	r24, r26
 d9a:	08 95       	ret

00000d9c <_exit>:
 d9c:	f8 94       	cli

00000d9e <__stop_program>:
 d9e:	ff cf       	rjmp	.-2      	; 0xd9e <__stop_program>
