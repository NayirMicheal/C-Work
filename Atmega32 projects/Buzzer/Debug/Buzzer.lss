
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000060c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000038e  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
  64:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2c 97       	sbiw	r28, 0x0c	; 12
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	69 87       	std	Y+9, r22	; 0x09
  82:	7a 87       	std	Y+10, r23	; 0x0a
  84:	8b 87       	std	Y+11, r24	; 0x0b
  86:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  88:	89 85       	ldd	r24, Y+9	; 0x09
  8a:	9a 85       	ldd	r25, Y+10	; 0x0a
  8c:	ab 85       	ldd	r26, Y+11	; 0x0b
  8e:	bc 85       	ldd	r27, Y+12	; 0x0c
  90:	22 e7       	ldi	r18, 0x72	; 114
  92:	31 e0       	ldi	r19, 0x01	; 1
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	bc 01       	movw	r22, r24
  9a:	cd 01       	movw	r24, r26
  9c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__mulsi3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	89 83       	std	Y+1, r24	; 0x01
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	ab 83       	std	Y+3, r26	; 0x03
  aa:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  ac:	1d 82       	std	Y+5, r1	; 0x05
  ae:	1e 82       	std	Y+6, r1	; 0x06
  b0:	1f 82       	std	Y+7, r1	; 0x07
  b2:	18 86       	std	Y+8, r1	; 0x08
  b4:	0c c0       	rjmp	.+24     	; 0xce <Delay_ms+0x62>
	{
		asm("nop");
  b6:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  b8:	8d 81       	ldd	r24, Y+5	; 0x05
  ba:	9e 81       	ldd	r25, Y+6	; 0x06
  bc:	af 81       	ldd	r26, Y+7	; 0x07
  be:	b8 85       	ldd	r27, Y+8	; 0x08
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	8d 83       	std	Y+5, r24	; 0x05
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	af 83       	std	Y+7, r26	; 0x07
  cc:	b8 87       	std	Y+8, r27	; 0x08
  ce:	2d 81       	ldd	r18, Y+5	; 0x05
  d0:	3e 81       	ldd	r19, Y+6	; 0x06
  d2:	4f 81       	ldd	r20, Y+7	; 0x07
  d4:	58 85       	ldd	r21, Y+8	; 0x08
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	ab 81       	ldd	r26, Y+3	; 0x03
  dc:	bc 81       	ldd	r27, Y+4	; 0x04
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	4a 07       	cpc	r20, r26
  e4:	5b 07       	cpc	r21, r27
  e6:	38 f3       	brcs	.-50     	; 0xb6 <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  e8:	2c 96       	adiw	r28, 0x0c	; 12
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <Delay_us>:
void Delay_us(u32 DelayValue)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2c 97       	sbiw	r28, 0x0c	; 12
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	69 87       	std	Y+9, r22	; 0x09
 110:	7a 87       	std	Y+10, r23	; 0x0a
 112:	8b 87       	std	Y+11, r24	; 0x0b
 114:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	ab 85       	ldd	r26, Y+11	; 0x0b
 11c:	bc 85       	ldd	r27, Y+12	; 0x0c
 11e:	27 e7       	ldi	r18, 0x77	; 119
 120:	31 e0       	ldi	r19, 0x01	; 1
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	bc 01       	movw	r22, r24
 128:	cd 01       	movw	r24, r26
 12a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__mulsi3>
 12e:	dc 01       	movw	r26, r24
 130:	cb 01       	movw	r24, r22
 132:	89 5d       	subi	r24, 0xD9	; 217
 134:	94 44       	sbci	r25, 0x44	; 68
 136:	a0 40       	sbci	r26, 0x00	; 0
 138:	b0 40       	sbci	r27, 0x00	; 0
 13a:	28 ee       	ldi	r18, 0xE8	; 232
 13c:	33 e0       	ldi	r19, 0x03	; 3
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__udivmodsi4>
 14a:	da 01       	movw	r26, r20
 14c:	c9 01       	movw	r24, r18
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	ab 83       	std	Y+3, r26	; 0x03
 154:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 156:	1d 82       	std	Y+5, r1	; 0x05
 158:	1e 82       	std	Y+6, r1	; 0x06
 15a:	1f 82       	std	Y+7, r1	; 0x07
 15c:	18 86       	std	Y+8, r1	; 0x08
 15e:	0c c0       	rjmp	.+24     	; 0x178 <Delay_us+0x7e>
	{
		asm("nop");
 160:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 162:	8d 81       	ldd	r24, Y+5	; 0x05
 164:	9e 81       	ldd	r25, Y+6	; 0x06
 166:	af 81       	ldd	r26, Y+7	; 0x07
 168:	b8 85       	ldd	r27, Y+8	; 0x08
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	a1 1d       	adc	r26, r1
 16e:	b1 1d       	adc	r27, r1
 170:	8d 83       	std	Y+5, r24	; 0x05
 172:	9e 83       	std	Y+6, r25	; 0x06
 174:	af 83       	std	Y+7, r26	; 0x07
 176:	b8 87       	std	Y+8, r27	; 0x08
 178:	2d 81       	ldd	r18, Y+5	; 0x05
 17a:	3e 81       	ldd	r19, Y+6	; 0x06
 17c:	4f 81       	ldd	r20, Y+7	; 0x07
 17e:	58 85       	ldd	r21, Y+8	; 0x08
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	ab 81       	ldd	r26, Y+3	; 0x03
 186:	bc 81       	ldd	r27, Y+4	; 0x04
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	4a 07       	cpc	r20, r26
 18e:	5b 07       	cpc	r21, r27
 190:	38 f3       	brcs	.-50     	; 0x160 <Delay_us+0x66>
	{
		asm("nop");
	}
 192:	2c 96       	adiw	r28, 0x0c	; 12
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <DIO_voidInitialize>:
#include "DIO_config.h"
#include "DIO_priv.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1ac:	ea e3       	ldi	r30, 0x3A	; 58
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	10 82       	st	Z, r1
	DDRB = DIO_u8_PORTB_DIRECTION;
 1b2:	e7 e3       	ldi	r30, 0x37	; 55
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1ba:	e4 e3       	ldi	r30, 0x34	; 52
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	10 82       	st	Z, r1
	DDRD = DIO_u8_PORTD_DIRECTION;
 1c0:	e1 e3       	ldi	r30, 0x31	; 49
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	10 82       	st	Z, r1
}
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	08 95       	ret

000001cc <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1cc:	df 93       	push	r29
 1ce:	cf 93       	push	r28
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <DIO_voidSetPinValue+0x6>
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	88 30       	cpi	r24, 0x08	; 8
 1de:	60 f5       	brcc	.+88     	; 0x238 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	88 23       	and	r24, r24
 1e4:	a1 f4       	brne	.+40     	; 0x20e <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 1e6:	ab e3       	ldi	r26, 0x3B	; 59
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	eb e3       	ldi	r30, 0x3B	; 59
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 2e       	mov	r0, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_voidSetPinValue+0x38>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_voidSetPinValue+0x34>
 208:	84 2b       	or	r24, r20
 20a:	8c 93       	st	X, r24
 20c:	b3 c0       	rjmp	.+358    	; 0x374 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 20e:	ab e3       	ldi	r26, 0x3B	; 59
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	eb e3       	ldi	r30, 0x3B	; 59
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	48 2f       	mov	r20, r24
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_voidSetPinValue+0x60>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_voidSetPinValue+0x5c>
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	8c 93       	st	X, r24
 236:	9e c0       	rjmp	.+316    	; 0x374 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	88 30       	cpi	r24, 0x08	; 8
 23c:	90 f1       	brcs	.+100    	; 0x2a2 <DIO_voidSetPinValue+0xd6>
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	80 31       	cpi	r24, 0x10	; 16
 242:	78 f5       	brcc	.+94     	; 0x2a2 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	88 50       	subi	r24, 0x08	; 8
 248:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	88 23       	and	r24, r24
 24e:	a1 f4       	brne	.+40     	; 0x278 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 250:	a8 e3       	ldi	r26, 0x38	; 56
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e8 e3       	ldi	r30, 0x38	; 56
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	48 2f       	mov	r20, r24
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_voidSetPinValue+0xa2>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_voidSetPinValue+0x9e>
 272:	84 2b       	or	r24, r20
 274:	8c 93       	st	X, r24
 276:	7e c0       	rjmp	.+252    	; 0x374 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 278:	a8 e3       	ldi	r26, 0x38	; 56
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e8 e3       	ldi	r30, 0x38	; 56
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	48 2f       	mov	r20, r24
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_voidSetPinValue+0xca>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_voidSetPinValue+0xc6>
 29a:	80 95       	com	r24
 29c:	84 23       	and	r24, r20
 29e:	8c 93       	st	X, r24
 2a0:	69 c0       	rjmp	.+210    	; 0x374 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	80 31       	cpi	r24, 0x10	; 16
 2a6:	90 f1       	brcs	.+100    	; 0x30c <DIO_voidSetPinValue+0x140>
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	88 31       	cpi	r24, 0x18	; 24
 2ac:	78 f5       	brcc	.+94     	; 0x30c <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	80 51       	subi	r24, 0x10	; 16
 2b2:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	88 23       	and	r24, r24
 2b8:	a1 f4       	brne	.+40     	; 0x2e2 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2ba:	a5 e3       	ldi	r26, 0x35	; 53
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	e5 e3       	ldi	r30, 0x35	; 53
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_voidSetPinValue+0x10c>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_voidSetPinValue+0x108>
 2dc:	84 2b       	or	r24, r20
 2de:	8c 93       	st	X, r24
 2e0:	49 c0       	rjmp	.+146    	; 0x374 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2e2:	a5 e3       	ldi	r26, 0x35	; 53
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	e5 e3       	ldi	r30, 0x35	; 53
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_voidSetPinValue+0x134>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_voidSetPinValue+0x130>
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	8c 93       	st	X, r24
 30a:	34 c0       	rjmp	.+104    	; 0x374 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	88 31       	cpi	r24, 0x18	; 24
 310:	88 f1       	brcs	.+98     	; 0x374 <DIO_voidSetPinValue+0x1a8>
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	80 32       	cpi	r24, 0x20	; 32
 316:	70 f5       	brcc	.+92     	; 0x374 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	88 51       	subi	r24, 0x18	; 24
 31c:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	88 23       	and	r24, r24
 322:	a1 f4       	brne	.+40     	; 0x34c <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 324:	a2 e3       	ldi	r26, 0x32	; 50
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e2 e3       	ldi	r30, 0x32	; 50
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	48 2f       	mov	r20, r24
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_voidSetPinValue+0x176>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_voidSetPinValue+0x172>
 346:	84 2b       	or	r24, r20
 348:	8c 93       	st	X, r24
 34a:	14 c0       	rjmp	.+40     	; 0x374 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 34c:	a2 e3       	ldi	r26, 0x32	; 50
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e2 e3       	ldi	r30, 0x32	; 50
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	48 2f       	mov	r20, r24
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 2e       	mov	r0, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_voidSetPinValue+0x19e>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_voidSetPinValue+0x19a>
 36e:	80 95       	com	r24
 370:	84 23       	and	r24, r20
 372:	8c 93       	st	X, r24
		}			
	}
}
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <main>:
#include"STD_TYPES.h"
#include"DIO_int.h"
#include "DELAY.h"
#include "DIO_register.h"
int main (void)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 386:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_voidInitialize>

	while(1)
	{
		DIO_voidSetPinValue(DIO_u8_PIN_8,DIO_u8_HIGH);
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPinValue>
		Delay_ms(20);
 392:	64 e1       	ldi	r22, 0x14	; 20
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
		DIO_voidSetPinValue(DIO_u8_PIN_8,DIO_u8_LOW);
 39e:	88 e0       	ldi	r24, 0x08	; 8
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPinValue>
		Delay_ms(15);
 3a6:	6f e0       	ldi	r22, 0x0F	; 15
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
 3b2:	eb cf       	rjmp	.-42     	; 0x38a <main+0xc>

000003b4 <__mulsi3>:
 3b4:	62 9f       	mul	r22, r18
 3b6:	d0 01       	movw	r26, r0
 3b8:	73 9f       	mul	r23, r19
 3ba:	f0 01       	movw	r30, r0
 3bc:	82 9f       	mul	r24, r18
 3be:	e0 0d       	add	r30, r0
 3c0:	f1 1d       	adc	r31, r1
 3c2:	64 9f       	mul	r22, r20
 3c4:	e0 0d       	add	r30, r0
 3c6:	f1 1d       	adc	r31, r1
 3c8:	92 9f       	mul	r25, r18
 3ca:	f0 0d       	add	r31, r0
 3cc:	83 9f       	mul	r24, r19
 3ce:	f0 0d       	add	r31, r0
 3d0:	74 9f       	mul	r23, r20
 3d2:	f0 0d       	add	r31, r0
 3d4:	65 9f       	mul	r22, r21
 3d6:	f0 0d       	add	r31, r0
 3d8:	99 27       	eor	r25, r25
 3da:	72 9f       	mul	r23, r18
 3dc:	b0 0d       	add	r27, r0
 3de:	e1 1d       	adc	r30, r1
 3e0:	f9 1f       	adc	r31, r25
 3e2:	63 9f       	mul	r22, r19
 3e4:	b0 0d       	add	r27, r0
 3e6:	e1 1d       	adc	r30, r1
 3e8:	f9 1f       	adc	r31, r25
 3ea:	bd 01       	movw	r22, r26
 3ec:	cf 01       	movw	r24, r30
 3ee:	11 24       	eor	r1, r1
 3f0:	08 95       	ret

000003f2 <__udivmodsi4>:
 3f2:	a1 e2       	ldi	r26, 0x21	; 33
 3f4:	1a 2e       	mov	r1, r26
 3f6:	aa 1b       	sub	r26, r26
 3f8:	bb 1b       	sub	r27, r27
 3fa:	fd 01       	movw	r30, r26
 3fc:	0d c0       	rjmp	.+26     	; 0x418 <__udivmodsi4_ep>

000003fe <__udivmodsi4_loop>:
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	ee 1f       	adc	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	a2 17       	cp	r26, r18
 408:	b3 07       	cpc	r27, r19
 40a:	e4 07       	cpc	r30, r20
 40c:	f5 07       	cpc	r31, r21
 40e:	20 f0       	brcs	.+8      	; 0x418 <__udivmodsi4_ep>
 410:	a2 1b       	sub	r26, r18
 412:	b3 0b       	sbc	r27, r19
 414:	e4 0b       	sbc	r30, r20
 416:	f5 0b       	sbc	r31, r21

00000418 <__udivmodsi4_ep>:
 418:	66 1f       	adc	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	1a 94       	dec	r1
 422:	69 f7       	brne	.-38     	; 0x3fe <__udivmodsi4_loop>
 424:	60 95       	com	r22
 426:	70 95       	com	r23
 428:	80 95       	com	r24
 42a:	90 95       	com	r25
 42c:	9b 01       	movw	r18, r22
 42e:	ac 01       	movw	r20, r24
 430:	bd 01       	movw	r22, r26
 432:	cf 01       	movw	r24, r30
 434:	08 95       	ret

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
