
Temperature_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000088c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000900  2**0
                  ALLOC
  2 .stab         00000c9c  00000000  00000000  00000900  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005eb  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <main>
  74:	0c 94 44 04 	jmp	0x888	; 0x888 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:
static u16 LastADCValue;
#elif ADC_RESOLUTION_MODE == ADC_8_BIT_MODE
static u8 LastADCValue;
#endif
void ADC_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/*Choose voltage reference*/
#if ADC_REF_VOLT ==ADC_External_VREF
	CLR_BIT(ADMUX,7);
	CLR_BIT(ADMUX,6);
#elif ADC_REF_VOLT ==ADC_VCC_VREF
	CLR_BIT(ADMUX,7);
  84:	a7 e2       	ldi	r26, 0x27	; 39
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
  92:	a7 e2       	ldi	r26, 0x27	; 39
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
	SET_BIT(ADMUX,6);
#endif

	/*choose the prescaler*/
	ADCSRA|=ADC_PRECALER_DIV;
  a0:	a6 e2       	ldi	r26, 0x26	; 38
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e6 e2       	ldi	r30, 0x26	; 38
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	86 60       	ori	r24, 0x06	; 6
  ac:	8c 93       	st	X, r24

#if ADC_RESOLUTION_MODE == ADC_8_BIT_MODE
	SET_BIT(ADMUX,5);
#elif ADC_RESOLUTION_MODE == ADC_10_BIT_MODE
	CLR_BIT(ADMUX,5);
  ae:	a7 e2       	ldi	r26, 0x27	; 39
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e7 e2       	ldi	r30, 0x27	; 39
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	8c 93       	st	X, r24
#endif

#if ADC_TRIGGERING_MODE == NOT_USED
	CLR_BIT(ADCSRA,5);
  bc:	a6 e2       	ldi	r26, 0x26	; 38
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e6 e2       	ldi	r30, 0x26	; 38
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	8c 93       	st	X, r24
	SFIOR=(u8)(ADC_TRIGGERING_MODE<<5);
#endif


	/*Enable ADC*/
	SET_BIT(ADCSRA,7);
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e6 e2       	ldi	r30, 0x26	; 38
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8c 93       	st	X, r24

}
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <ADC_voidStartConversion>:
#if ADC_RESOLUTION_MODE ==ADC_10_BIT_MODE
Status_t ADC_voidStartConversion(u8 channelIdCpy,u16 * ReadValuePtrCpy)
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	00 d0       	rcall	.+0      	; 0xe4 <ADC_voidStartConversion+0x6>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <ADC_voidStartConversion+0x8>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	7b 83       	std	Y+3, r23	; 0x03
  ee:	6a 83       	std	Y+2, r22	; 0x02
	/*choose desired channel ADMUX*/
	ADMUX |=channelIdCpy;
  f0:	a7 e2       	ldi	r26, 0x27	; 39
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e7 e2       	ldi	r30, 0x27	; 39
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	89 2b       	or	r24, r25
  fe:	8c 93       	st	X, r24
	/*start converion by writing on ADSC=1*/
	SET_BIT(ADCSRA,6);
 100:	a6 e2       	ldi	r26, 0x26	; 38
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e6 e2       	ldi	r30, 0x26	; 38
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	8c 93       	st	X, r24
	/*if interrupt is enabled */
	if(GET_BIT(ADCSRA,3)==1)
 10e:	e6 e2       	ldi	r30, 0x26	; 38
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	88 70       	andi	r24, 0x08	; 8
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	95 95       	asr	r25
 122:	87 95       	ror	r24
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	91 05       	cpc	r25, r1
 12c:	11 f4       	brne	.+4      	; 0x132 <ADC_voidStartConversion+0x54>
	{
		return NOK;
 12e:	1c 82       	std	Y+4, r1	; 0x04
 130:	2a c0       	rjmp	.+84     	; 0x186 <ADC_voidStartConversion+0xa8>
	}
	/*else not enable*/
	else
	{
		/*while ADIF==0 check for interrupt flag set*/
		while(!GET_BIT(ADCSRA,4));
 132:	e6 e2       	ldi	r30, 0x26	; 38
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 2f       	mov	r24, r24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	80 71       	andi	r24, 0x10	; 16
 13e:	90 70       	andi	r25, 0x00	; 0
 140:	95 95       	asr	r25
 142:	87 95       	ror	r24
 144:	95 95       	asr	r25
 146:	87 95       	ror	r24
 148:	95 95       	asr	r25
 14a:	87 95       	ror	r24
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	79 f3       	breq	.-34     	; 0x132 <ADC_voidStartConversion+0x54>
		/*clear ADIF by writing 1*/
		SET_BIT(ADCSRA,4);
 154:	a6 e2       	ldi	r26, 0x26	; 38
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e6 e2       	ldi	r30, 0x26	; 38
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 61       	ori	r24, 0x10	; 16
 160:	8c 93       	st	X, r24
		/*update readValuePtr*/
		*ReadValuePtrCpy=ADCHL;
 162:	e4 e2       	ldi	r30, 0x24	; 36
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	91 81       	ldd	r25, Z+1	; 0x01
 16a:	ea 81       	ldd	r30, Y+2	; 0x02
 16c:	fb 81       	ldd	r31, Y+3	; 0x03
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	80 83       	st	Z, r24
		/*update last value will return from getLastResult function*/
		LastADCValue=*ReadValuePtrCpy;
 172:	ea 81       	ldd	r30, Y+2	; 0x02
 174:	fb 81       	ldd	r31, Y+3	; 0x03
 176:	80 81       	ld	r24, Z
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	90 93 63 00 	sts	0x0063, r25
 17e:	80 93 62 00 	sts	0x0062, r24
		/*return ok*/
		return OK;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	8c 83       	std	Y+4, r24	; 0x04
 186:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <ADC_u16GetLastValue>:
}
#endif

#if ADC_RESOLUTION_MODE == ADC_10_BIT_MODE
u16 ADC_u16GetLastValue(void)
{
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	return LastADCValue;
 19e:	80 91 62 00 	lds	r24, 0x0062
 1a2:	90 91 63 00 	lds	r25, 0x0063
}
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

000001ac <ADC_voidEnableInterrupt>:
{
	return LastADCValue;
}
#endif
void ADC_voidEnableInterrupt(void)
{
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
	/*Enable ADC Interrupt*/
	SET_BIT(ADCSRA,3);
 1b4:	a6 e2       	ldi	r26, 0x26	; 38
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	e6 e2       	ldi	r30, 0x26	; 38
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	8c 93       	st	X, r24

}
 1c2:	cf 91       	pop	r28
 1c4:	df 91       	pop	r29
 1c6:	08 95       	ret

000001c8 <ADC_voidDisableInterrupt>:
void ADC_voidDisableInterrupt(void)
{
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
	/*Disable ADC Interrupt*/
	CLR_BIT(ADCSRA,3);
 1d0:	a6 e2       	ldi	r26, 0x26	; 38
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	e6 e2       	ldi	r30, 0x26	; 38
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	87 7f       	andi	r24, 0xF7	; 247
 1dc:	8c 93       	st	X, r24

}
 1de:	cf 91       	pop	r28
 1e0:	df 91       	pop	r29
 1e2:	08 95       	ret

000001e4 <ADC_voidSetCallback>:
void ADC_voidSetCallback(void (* funcptr)(void))
{
 1e4:	df 93       	push	r29
 1e6:	cf 93       	push	r28
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <ADC_voidSetCallback+0x6>
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
	ADCIntCallBack=funcptr;
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	90 93 61 00 	sts	0x0061, r25
 1fa:	80 93 60 00 	sts	0x0060, r24
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <__vector_16>:
void __vector_16 (void)__attribute__((signal,used));
void __vector_16 (void)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
#if ADC_RESOLUTION_MODE == ADC_10_BIT_MODE
	LastADCValue=ADCHL;
 222:	e4 e2       	ldi	r30, 0x24	; 36
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	91 81       	ldd	r25, Z+1	; 0x01
 22a:	90 93 63 00 	sts	0x0063, r25
 22e:	80 93 62 00 	sts	0x0062, r24
#elif ADC_RESOLUTION_MODE == ADC_8_BIT_MODE
	LastADCValue=ADCH;
#endif
}
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
 248:	df 93       	push	r29
 24a:	cf 93       	push	r28
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	2c 97       	sbiw	r28, 0x0c	; 12
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	69 87       	std	Y+9, r22	; 0x09
 25e:	7a 87       	std	Y+10, r23	; 0x0a
 260:	8b 87       	std	Y+11, r24	; 0x0b
 262:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
 264:	89 85       	ldd	r24, Y+9	; 0x09
 266:	9a 85       	ldd	r25, Y+10	; 0x0a
 268:	ab 85       	ldd	r26, Y+11	; 0x0b
 26a:	bc 85       	ldd	r27, Y+12	; 0x0c
 26c:	22 e7       	ldi	r18, 0x72	; 114
 26e:	31 e0       	ldi	r19, 0x01	; 1
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	bc 01       	movw	r22, r24
 276:	cd 01       	movw	r24, r26
 278:	0e 94 03 04 	call	0x806	; 0x806 <__mulsi3>
 27c:	dc 01       	movw	r26, r24
 27e:	cb 01       	movw	r24, r22
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	ab 83       	std	Y+3, r26	; 0x03
 286:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 288:	1d 82       	std	Y+5, r1	; 0x05
 28a:	1e 82       	std	Y+6, r1	; 0x06
 28c:	1f 82       	std	Y+7, r1	; 0x07
 28e:	18 86       	std	Y+8, r1	; 0x08
 290:	0c c0       	rjmp	.+24     	; 0x2aa <Delay_ms+0x62>
	{
		asm("nop");
 292:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
 294:	8d 81       	ldd	r24, Y+5	; 0x05
 296:	9e 81       	ldd	r25, Y+6	; 0x06
 298:	af 81       	ldd	r26, Y+7	; 0x07
 29a:	b8 85       	ldd	r27, Y+8	; 0x08
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	a1 1d       	adc	r26, r1
 2a0:	b1 1d       	adc	r27, r1
 2a2:	8d 83       	std	Y+5, r24	; 0x05
 2a4:	9e 83       	std	Y+6, r25	; 0x06
 2a6:	af 83       	std	Y+7, r26	; 0x07
 2a8:	b8 87       	std	Y+8, r27	; 0x08
 2aa:	2d 81       	ldd	r18, Y+5	; 0x05
 2ac:	3e 81       	ldd	r19, Y+6	; 0x06
 2ae:	4f 81       	ldd	r20, Y+7	; 0x07
 2b0:	58 85       	ldd	r21, Y+8	; 0x08
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	9a 81       	ldd	r25, Y+2	; 0x02
 2b6:	ab 81       	ldd	r26, Y+3	; 0x03
 2b8:	bc 81       	ldd	r27, Y+4	; 0x04
 2ba:	28 17       	cp	r18, r24
 2bc:	39 07       	cpc	r19, r25
 2be:	4a 07       	cpc	r20, r26
 2c0:	5b 07       	cpc	r21, r27
 2c2:	38 f3       	brcs	.-50     	; 0x292 <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 2c4:	2c 96       	adiw	r28, 0x0c	; 12
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	cf 91       	pop	r28
 2d2:	df 91       	pop	r29
 2d4:	08 95       	ret

000002d6 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 2d6:	df 93       	push	r29
 2d8:	cf 93       	push	r28
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	2c 97       	sbiw	r28, 0x0c	; 12
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	69 87       	std	Y+9, r22	; 0x09
 2ec:	7a 87       	std	Y+10, r23	; 0x0a
 2ee:	8b 87       	std	Y+11, r24	; 0x0b
 2f0:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 2f2:	89 85       	ldd	r24, Y+9	; 0x09
 2f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f6:	ab 85       	ldd	r26, Y+11	; 0x0b
 2f8:	bc 85       	ldd	r27, Y+12	; 0x0c
 2fa:	27 e7       	ldi	r18, 0x77	; 119
 2fc:	31 e0       	ldi	r19, 0x01	; 1
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	bc 01       	movw	r22, r24
 304:	cd 01       	movw	r24, r26
 306:	0e 94 03 04 	call	0x806	; 0x806 <__mulsi3>
 30a:	dc 01       	movw	r26, r24
 30c:	cb 01       	movw	r24, r22
 30e:	89 5d       	subi	r24, 0xD9	; 217
 310:	94 44       	sbci	r25, 0x44	; 68
 312:	a0 40       	sbci	r26, 0x00	; 0
 314:	b0 40       	sbci	r27, 0x00	; 0
 316:	28 ee       	ldi	r18, 0xE8	; 232
 318:	33 e0       	ldi	r19, 0x03	; 3
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	bc 01       	movw	r22, r24
 320:	cd 01       	movw	r24, r26
 322:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodsi4>
 326:	da 01       	movw	r26, r20
 328:	c9 01       	movw	r24, r18
 32a:	89 83       	std	Y+1, r24	; 0x01
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	ab 83       	std	Y+3, r26	; 0x03
 330:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 332:	1d 82       	std	Y+5, r1	; 0x05
 334:	1e 82       	std	Y+6, r1	; 0x06
 336:	1f 82       	std	Y+7, r1	; 0x07
 338:	18 86       	std	Y+8, r1	; 0x08
 33a:	0c c0       	rjmp	.+24     	; 0x354 <Delay_us+0x7e>
	{
		asm("nop");
 33c:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 33e:	8d 81       	ldd	r24, Y+5	; 0x05
 340:	9e 81       	ldd	r25, Y+6	; 0x06
 342:	af 81       	ldd	r26, Y+7	; 0x07
 344:	b8 85       	ldd	r27, Y+8	; 0x08
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	8d 83       	std	Y+5, r24	; 0x05
 34e:	9e 83       	std	Y+6, r25	; 0x06
 350:	af 83       	std	Y+7, r26	; 0x07
 352:	b8 87       	std	Y+8, r27	; 0x08
 354:	2d 81       	ldd	r18, Y+5	; 0x05
 356:	3e 81       	ldd	r19, Y+6	; 0x06
 358:	4f 81       	ldd	r20, Y+7	; 0x07
 35a:	58 85       	ldd	r21, Y+8	; 0x08
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	9a 81       	ldd	r25, Y+2	; 0x02
 360:	ab 81       	ldd	r26, Y+3	; 0x03
 362:	bc 81       	ldd	r27, Y+4	; 0x04
 364:	28 17       	cp	r18, r24
 366:	39 07       	cpc	r19, r25
 368:	4a 07       	cpc	r20, r26
 36a:	5b 07       	cpc	r21, r27
 36c:	38 f3       	brcs	.-50     	; 0x33c <Delay_us+0x66>
	{
		asm("nop");
	}
 36e:	2c 96       	adiw	r28, 0x0c	; 12
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 388:	ea e3       	ldi	r30, 0x3A	; 58
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 390:	e7 e3       	ldi	r30, 0x37	; 55
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 398:	e4 e3       	ldi	r30, 0x34	; 52
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 3a0:	e1 e3       	ldi	r30, 0x31	; 49
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	8f eb       	ldi	r24, 0xBF	; 191
 3a6:	80 83       	st	Z, r24
}
 3a8:	cf 91       	pop	r28
 3aa:	df 91       	pop	r29
 3ac:	08 95       	ret

000003ae <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 3ae:	df 93       	push	r29
 3b0:	cf 93       	push	r28
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <DIO_voidSetPinValue+0x6>
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	88 30       	cpi	r24, 0x08	; 8
 3c0:	60 f5       	brcc	.+88     	; 0x41a <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	88 23       	and	r24, r24
 3c6:	a1 f4       	brne	.+40     	; 0x3f0 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 3c8:	ab e3       	ldi	r26, 0x3B	; 59
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	eb e3       	ldi	r30, 0x3B	; 59
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	48 2f       	mov	r20, r24
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	28 2f       	mov	r18, r24
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 2e       	mov	r0, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_voidSetPinValue+0x38>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_voidSetPinValue+0x34>
 3ea:	84 2b       	or	r24, r20
 3ec:	8c 93       	st	X, r24
 3ee:	b3 c0       	rjmp	.+358    	; 0x556 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 3f0:	ab e3       	ldi	r26, 0x3B	; 59
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	eb e3       	ldi	r30, 0x3B	; 59
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 2e       	mov	r0, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_voidSetPinValue+0x60>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_voidSetPinValue+0x5c>
 412:	80 95       	com	r24
 414:	84 23       	and	r24, r20
 416:	8c 93       	st	X, r24
 418:	9e c0       	rjmp	.+316    	; 0x556 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	88 30       	cpi	r24, 0x08	; 8
 41e:	90 f1       	brcs	.+100    	; 0x484 <DIO_voidSetPinValue+0xd6>
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	80 31       	cpi	r24, 0x10	; 16
 424:	78 f5       	brcc	.+94     	; 0x484 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	88 50       	subi	r24, 0x08	; 8
 42a:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 42c:	8a 81       	ldd	r24, Y+2	; 0x02
 42e:	88 23       	and	r24, r24
 430:	a1 f4       	brne	.+40     	; 0x45a <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 432:	a8 e3       	ldi	r26, 0x38	; 56
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e8 e3       	ldi	r30, 0x38	; 56
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_voidSetPinValue+0xa2>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_voidSetPinValue+0x9e>
 454:	84 2b       	or	r24, r20
 456:	8c 93       	st	X, r24
 458:	7e c0       	rjmp	.+252    	; 0x556 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 45a:	a8 e3       	ldi	r26, 0x38	; 56
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	e8 e3       	ldi	r30, 0x38	; 56
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 2e       	mov	r0, r18
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_voidSetPinValue+0xca>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_voidSetPinValue+0xc6>
 47c:	80 95       	com	r24
 47e:	84 23       	and	r24, r20
 480:	8c 93       	st	X, r24
 482:	69 c0       	rjmp	.+210    	; 0x556 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	80 31       	cpi	r24, 0x10	; 16
 488:	90 f1       	brcs	.+100    	; 0x4ee <DIO_voidSetPinValue+0x140>
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	88 31       	cpi	r24, 0x18	; 24
 48e:	78 f5       	brcc	.+94     	; 0x4ee <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	80 51       	subi	r24, 0x10	; 16
 494:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	88 23       	and	r24, r24
 49a:	a1 f4       	brne	.+40     	; 0x4c4 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 49c:	a5 e3       	ldi	r26, 0x35	; 53
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	e5 e3       	ldi	r30, 0x35	; 53
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	48 2f       	mov	r20, r24
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	28 2f       	mov	r18, r24
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 2e       	mov	r0, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_voidSetPinValue+0x10c>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_voidSetPinValue+0x108>
 4be:	84 2b       	or	r24, r20
 4c0:	8c 93       	st	X, r24
 4c2:	49 c0       	rjmp	.+146    	; 0x556 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 4c4:	a5 e3       	ldi	r26, 0x35	; 53
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	e5 e3       	ldi	r30, 0x35	; 53
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	48 2f       	mov	r20, r24
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 2e       	mov	r0, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_voidSetPinValue+0x134>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_voidSetPinValue+0x130>
 4e6:	80 95       	com	r24
 4e8:	84 23       	and	r24, r20
 4ea:	8c 93       	st	X, r24
 4ec:	34 c0       	rjmp	.+104    	; 0x556 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	88 31       	cpi	r24, 0x18	; 24
 4f2:	88 f1       	brcs	.+98     	; 0x556 <DIO_voidSetPinValue+0x1a8>
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	80 32       	cpi	r24, 0x20	; 32
 4f8:	70 f5       	brcc	.+92     	; 0x556 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	88 51       	subi	r24, 0x18	; 24
 4fe:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	88 23       	and	r24, r24
 504:	a1 f4       	brne	.+40     	; 0x52e <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 506:	a2 e3       	ldi	r26, 0x32	; 50
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e2 e3       	ldi	r30, 0x32	; 50
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	48 2f       	mov	r20, r24
 512:	89 81       	ldd	r24, Y+1	; 0x01
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 2e       	mov	r0, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_voidSetPinValue+0x176>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_voidSetPinValue+0x172>
 528:	84 2b       	or	r24, r20
 52a:	8c 93       	st	X, r24
 52c:	14 c0       	rjmp	.+40     	; 0x556 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 52e:	a2 e3       	ldi	r26, 0x32	; 50
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	e2 e3       	ldi	r30, 0x32	; 50
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	48 2f       	mov	r20, r24
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	28 2f       	mov	r18, r24
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 2e       	mov	r0, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_voidSetPinValue+0x19e>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	0a 94       	dec	r0
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_voidSetPinValue+0x19a>
 550:	80 95       	com	r24
 552:	84 23       	and	r24, r20
 554:	8c 93       	st	X, r24
		}			
	}
}
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	08 95       	ret

00000560 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	00 d0       	rcall	.+0      	; 0x566 <DIO_u8GetPinValue+0x6>
 566:	00 d0       	rcall	.+0      	; 0x568 <DIO_u8GetPinValue+0x8>
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 56e:	8c 81       	ldd	r24, Y+4	; 0x04
 570:	88 30       	cpi	r24, 0x08	; 8
 572:	00 f5       	brcc	.+64     	; 0x5b4 <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 578:	e9 e3       	ldi	r30, 0x39	; 57
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	48 2f       	mov	r20, r24
 580:	50 e0       	ldi	r21, 0x00	; 0
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_u8GetPinValue+0x32>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	2a 95       	dec	r18
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_u8GetPinValue+0x2e>
 596:	9a 01       	movw	r18, r20
 598:	28 23       	and	r18, r24
 59a:	39 23       	and	r19, r25
 59c:	8b 81       	ldd	r24, Y+3	; 0x03
 59e:	88 2f       	mov	r24, r24
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	a9 01       	movw	r20, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_u8GetPinValue+0x4a>
 5a6:	55 95       	asr	r21
 5a8:	47 95       	ror	r20
 5aa:	8a 95       	dec	r24
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_u8GetPinValue+0x46>
 5ae:	ca 01       	movw	r24, r20
 5b0:	8a 83       	std	Y+2, r24	; 0x02
 5b2:	74 c0       	rjmp	.+232    	; 0x69c <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 5b4:	8c 81       	ldd	r24, Y+4	; 0x04
 5b6:	88 30       	cpi	r24, 0x08	; 8
 5b8:	20 f1       	brcs	.+72     	; 0x602 <DIO_u8GetPinValue+0xa2>
 5ba:	8c 81       	ldd	r24, Y+4	; 0x04
 5bc:	80 31       	cpi	r24, 0x10	; 16
 5be:	08 f5       	brcc	.+66     	; 0x602 <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 5c0:	8c 81       	ldd	r24, Y+4	; 0x04
 5c2:	88 50       	subi	r24, 0x08	; 8
 5c4:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 5c6:	e6 e3       	ldi	r30, 0x36	; 54
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	48 2f       	mov	r20, r24
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_u8GetPinValue+0x80>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	2a 95       	dec	r18
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_u8GetPinValue+0x7c>
 5e4:	9a 01       	movw	r18, r20
 5e6:	28 23       	and	r18, r24
 5e8:	39 23       	and	r19, r25
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	88 2f       	mov	r24, r24
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	a9 01       	movw	r20, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_u8GetPinValue+0x98>
 5f4:	55 95       	asr	r21
 5f6:	47 95       	ror	r20
 5f8:	8a 95       	dec	r24
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_u8GetPinValue+0x94>
 5fc:	ca 01       	movw	r24, r20
 5fe:	8a 83       	std	Y+2, r24	; 0x02
 600:	4d c0       	rjmp	.+154    	; 0x69c <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 602:	8c 81       	ldd	r24, Y+4	; 0x04
 604:	80 31       	cpi	r24, 0x10	; 16
 606:	20 f1       	brcs	.+72     	; 0x650 <DIO_u8GetPinValue+0xf0>
 608:	8c 81       	ldd	r24, Y+4	; 0x04
 60a:	88 31       	cpi	r24, 0x18	; 24
 60c:	08 f5       	brcc	.+66     	; 0x650 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 60e:	8c 81       	ldd	r24, Y+4	; 0x04
 610:	80 51       	subi	r24, 0x10	; 16
 612:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 614:	e6 e3       	ldi	r30, 0x36	; 54
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	48 2f       	mov	r20, r24
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_u8GetPinValue+0xce>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	2a 95       	dec	r18
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_u8GetPinValue+0xca>
 632:	9a 01       	movw	r18, r20
 634:	28 23       	and	r18, r24
 636:	39 23       	and	r19, r25
 638:	8b 81       	ldd	r24, Y+3	; 0x03
 63a:	88 2f       	mov	r24, r24
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	a9 01       	movw	r20, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_u8GetPinValue+0xe6>
 642:	55 95       	asr	r21
 644:	47 95       	ror	r20
 646:	8a 95       	dec	r24
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_u8GetPinValue+0xe2>
 64a:	ca 01       	movw	r24, r20
 64c:	8a 83       	std	Y+2, r24	; 0x02
 64e:	26 c0       	rjmp	.+76     	; 0x69c <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 650:	8c 81       	ldd	r24, Y+4	; 0x04
 652:	88 31       	cpi	r24, 0x18	; 24
 654:	18 f1       	brcs	.+70     	; 0x69c <DIO_u8GetPinValue+0x13c>
 656:	8c 81       	ldd	r24, Y+4	; 0x04
 658:	80 32       	cpi	r24, 0x20	; 32
 65a:	00 f5       	brcc	.+64     	; 0x69c <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 65c:	8c 81       	ldd	r24, Y+4	; 0x04
 65e:	88 51       	subi	r24, 0x18	; 24
 660:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 662:	e0 e3       	ldi	r30, 0x30	; 48
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	48 2f       	mov	r20, r24
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_u8GetPinValue+0x11c>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	2a 95       	dec	r18
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_u8GetPinValue+0x118>
 680:	9a 01       	movw	r18, r20
 682:	28 23       	and	r18, r24
 684:	39 23       	and	r19, r25
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	88 2f       	mov	r24, r24
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	a9 01       	movw	r20, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_u8GetPinValue+0x134>
 690:	55 95       	asr	r21
 692:	47 95       	ror	r20
 694:	8a 95       	dec	r24
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_u8GetPinValue+0x130>
 698:	ca 01       	movw	r24, r20
 69a:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	88 23       	and	r24, r24
 6a0:	19 f4       	brne	.+6      	; 0x6a8 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	89 83       	std	Y+1, r24	; 0x01
 6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 6a8:	8a 81       	ldd	r24, Y+2	; 0x02
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 6ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	cf 91       	pop	r28
 6bc:	df 91       	pop	r29
 6be:	08 95       	ret

000006c0 <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 6c0:	df 93       	push	r29
 6c2:	cf 93       	push	r28
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 6c8:	af e5       	ldi	r26, 0x5F	; 95
 6ca:	b0 e0       	ldi	r27, 0x00	; 0
 6cc:	ef e5       	ldi	r30, 0x5F	; 95
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	80 68       	ori	r24, 0x80	; 128
 6d4:	8c 93       	st	X, r24
}
 6d6:	cf 91       	pop	r28
 6d8:	df 91       	pop	r29
 6da:	08 95       	ret

000006dc <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 6dc:	df 93       	push	r29
 6de:	cf 93       	push	r28
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 6e4:	af e5       	ldi	r26, 0x5F	; 95
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	ef e5       	ldi	r30, 0x5F	; 95
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	8f 77       	andi	r24, 0x7F	; 127
 6f0:	8c 93       	st	X, r24
}
 6f2:	cf 91       	pop	r28
 6f4:	df 91       	pop	r29
 6f6:	08 95       	ret

000006f8 <main>:
#include "DELAY.h"
#include "DIO_int.h"
#include "ADC_int.h"
#include "GIE_int.h"
void main (void)
{
 6f8:	df 93       	push	r29
 6fa:	cf 93       	push	r28
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	2a 97       	sbiw	r28, 0x0a	; 10
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
	u16 Data;
	u32 Temperature;
	u32 BigData;
	DIO_voidInitialize();
 70c:	0e 94 c0 01 	call	0x380	; 0x380 <DIO_voidInitialize>
	ADC_voidInit();
 710:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_voidInit>
	GIE_EnableGlobalInterrupt();
 714:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GIE_EnableGlobalInterrupt>
	while(1)
	{
		ADC_voidStartConversion(ADC0,&Data);
 718:	9e 01       	movw	r18, r28
 71a:	27 5f       	subi	r18, 0xF7	; 247
 71c:	3f 4f       	sbci	r19, 0xFF	; 255
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	b9 01       	movw	r22, r18
 722:	0e 94 6f 00 	call	0xde	; 0xde <ADC_voidStartConversion>
		BigData =(u32) Data;
 726:	89 85       	ldd	r24, Y+9	; 0x09
 728:	9a 85       	ldd	r25, Y+10	; 0x0a
 72a:	cc 01       	movw	r24, r24
 72c:	a0 e0       	ldi	r26, 0x00	; 0
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	89 83       	std	Y+1, r24	; 0x01
 732:	9a 83       	std	Y+2, r25	; 0x02
 734:	ab 83       	std	Y+3, r26	; 0x03
 736:	bc 83       	std	Y+4, r27	; 0x04
		Temperature = (u32)(((u32)(u32)BigData * (u16)500) /(u16)1024);
 738:	89 81       	ldd	r24, Y+1	; 0x01
 73a:	9a 81       	ldd	r25, Y+2	; 0x02
 73c:	ab 81       	ldd	r26, Y+3	; 0x03
 73e:	bc 81       	ldd	r27, Y+4	; 0x04
 740:	24 ef       	ldi	r18, 0xF4	; 244
 742:	31 e0       	ldi	r19, 0x01	; 1
 744:	40 e0       	ldi	r20, 0x00	; 0
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	bc 01       	movw	r22, r24
 74a:	cd 01       	movw	r24, r26
 74c:	0e 94 03 04 	call	0x806	; 0x806 <__mulsi3>
 750:	dc 01       	movw	r26, r24
 752:	cb 01       	movw	r24, r22
 754:	07 2e       	mov	r0, r23
 756:	7a e0       	ldi	r23, 0x0A	; 10
 758:	b6 95       	lsr	r27
 75a:	a7 95       	ror	r26
 75c:	97 95       	ror	r25
 75e:	87 95       	ror	r24
 760:	7a 95       	dec	r23
 762:	d1 f7       	brne	.-12     	; 0x758 <main+0x60>
 764:	70 2d       	mov	r23, r0
 766:	8d 83       	std	Y+5, r24	; 0x05
 768:	9e 83       	std	Y+6, r25	; 0x06
 76a:	af 83       	std	Y+7, r26	; 0x07
 76c:	b8 87       	std	Y+8, r27	; 0x08

		if(Temperature==16)
 76e:	8d 81       	ldd	r24, Y+5	; 0x05
 770:	9e 81       	ldd	r25, Y+6	; 0x06
 772:	af 81       	ldd	r26, Y+7	; 0x07
 774:	b8 85       	ldd	r27, Y+8	; 0x08
 776:	80 31       	cpi	r24, 0x10	; 16
 778:	91 05       	cpc	r25, r1
 77a:	a1 05       	cpc	r26, r1
 77c:	b1 05       	cpc	r27, r1
 77e:	69 f4       	brne	.+26     	; 0x79a <main+0xa2>
		{
			DIO_voidSetPinValue(DIO_u8_PIN_8,DIO_u8_HIGH);
 780:	88 e0       	ldi	r24, 0x08	; 8
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_9,DIO_u8_LOW);
 788:	89 e0       	ldi	r24, 0x09	; 9
 78a:	61 e0       	ldi	r22, 0x01	; 1
 78c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_10,DIO_u8_LOW);
 790:	8a e0       	ldi	r24, 0x0A	; 10
 792:	61 e0       	ldi	r22, 0x01	; 1
 794:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
 798:	bf cf       	rjmp	.-130    	; 0x718 <main+0x20>
		}
		else if (Temperature >= 20 &&  Temperature <30)
 79a:	8d 81       	ldd	r24, Y+5	; 0x05
 79c:	9e 81       	ldd	r25, Y+6	; 0x06
 79e:	af 81       	ldd	r26, Y+7	; 0x07
 7a0:	b8 85       	ldd	r27, Y+8	; 0x08
 7a2:	84 31       	cpi	r24, 0x14	; 20
 7a4:	91 05       	cpc	r25, r1
 7a6:	a1 05       	cpc	r26, r1
 7a8:	b1 05       	cpc	r27, r1
 7aa:	b0 f0       	brcs	.+44     	; 0x7d8 <main+0xe0>
 7ac:	8d 81       	ldd	r24, Y+5	; 0x05
 7ae:	9e 81       	ldd	r25, Y+6	; 0x06
 7b0:	af 81       	ldd	r26, Y+7	; 0x07
 7b2:	b8 85       	ldd	r27, Y+8	; 0x08
 7b4:	8e 31       	cpi	r24, 0x1E	; 30
 7b6:	91 05       	cpc	r25, r1
 7b8:	a1 05       	cpc	r26, r1
 7ba:	b1 05       	cpc	r27, r1
 7bc:	68 f4       	brcc	.+26     	; 0x7d8 <main+0xe0>
		{

			DIO_voidSetPinValue(DIO_u8_PIN_8,DIO_u8_LOW);
 7be:	88 e0       	ldi	r24, 0x08	; 8
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_9,DIO_u8_HIGH);
 7c6:	89 e0       	ldi	r24, 0x09	; 9
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_10,DIO_u8_LOW);
 7ce:	8a e0       	ldi	r24, 0x0A	; 10
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
 7d6:	a0 cf       	rjmp	.-192    	; 0x718 <main+0x20>
		}
		else if (Temperature >30)
 7d8:	8d 81       	ldd	r24, Y+5	; 0x05
 7da:	9e 81       	ldd	r25, Y+6	; 0x06
 7dc:	af 81       	ldd	r26, Y+7	; 0x07
 7de:	b8 85       	ldd	r27, Y+8	; 0x08
 7e0:	8f 31       	cpi	r24, 0x1F	; 31
 7e2:	91 05       	cpc	r25, r1
 7e4:	a1 05       	cpc	r26, r1
 7e6:	b1 05       	cpc	r27, r1
 7e8:	08 f4       	brcc	.+2      	; 0x7ec <main+0xf4>
 7ea:	96 cf       	rjmp	.-212    	; 0x718 <main+0x20>
		{

			DIO_voidSetPinValue(DIO_u8_PIN_8,DIO_u8_LOW);
 7ec:	88 e0       	ldi	r24, 0x08	; 8
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_9,DIO_u8_LOW);
 7f4:	89 e0       	ldi	r24, 0x09	; 9
 7f6:	61 e0       	ldi	r22, 0x01	; 1
 7f8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_u8_PIN_10,DIO_u8_HIGH);
 7fc:	8a e0       	ldi	r24, 0x0A	; 10
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_voidSetPinValue>
 804:	89 cf       	rjmp	.-238    	; 0x718 <main+0x20>

00000806 <__mulsi3>:
 806:	62 9f       	mul	r22, r18
 808:	d0 01       	movw	r26, r0
 80a:	73 9f       	mul	r23, r19
 80c:	f0 01       	movw	r30, r0
 80e:	82 9f       	mul	r24, r18
 810:	e0 0d       	add	r30, r0
 812:	f1 1d       	adc	r31, r1
 814:	64 9f       	mul	r22, r20
 816:	e0 0d       	add	r30, r0
 818:	f1 1d       	adc	r31, r1
 81a:	92 9f       	mul	r25, r18
 81c:	f0 0d       	add	r31, r0
 81e:	83 9f       	mul	r24, r19
 820:	f0 0d       	add	r31, r0
 822:	74 9f       	mul	r23, r20
 824:	f0 0d       	add	r31, r0
 826:	65 9f       	mul	r22, r21
 828:	f0 0d       	add	r31, r0
 82a:	99 27       	eor	r25, r25
 82c:	72 9f       	mul	r23, r18
 82e:	b0 0d       	add	r27, r0
 830:	e1 1d       	adc	r30, r1
 832:	f9 1f       	adc	r31, r25
 834:	63 9f       	mul	r22, r19
 836:	b0 0d       	add	r27, r0
 838:	e1 1d       	adc	r30, r1
 83a:	f9 1f       	adc	r31, r25
 83c:	bd 01       	movw	r22, r26
 83e:	cf 01       	movw	r24, r30
 840:	11 24       	eor	r1, r1
 842:	08 95       	ret

00000844 <__udivmodsi4>:
 844:	a1 e2       	ldi	r26, 0x21	; 33
 846:	1a 2e       	mov	r1, r26
 848:	aa 1b       	sub	r26, r26
 84a:	bb 1b       	sub	r27, r27
 84c:	fd 01       	movw	r30, r26
 84e:	0d c0       	rjmp	.+26     	; 0x86a <__udivmodsi4_ep>

00000850 <__udivmodsi4_loop>:
 850:	aa 1f       	adc	r26, r26
 852:	bb 1f       	adc	r27, r27
 854:	ee 1f       	adc	r30, r30
 856:	ff 1f       	adc	r31, r31
 858:	a2 17       	cp	r26, r18
 85a:	b3 07       	cpc	r27, r19
 85c:	e4 07       	cpc	r30, r20
 85e:	f5 07       	cpc	r31, r21
 860:	20 f0       	brcs	.+8      	; 0x86a <__udivmodsi4_ep>
 862:	a2 1b       	sub	r26, r18
 864:	b3 0b       	sbc	r27, r19
 866:	e4 0b       	sbc	r30, r20
 868:	f5 0b       	sbc	r31, r21

0000086a <__udivmodsi4_ep>:
 86a:	66 1f       	adc	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	1a 94       	dec	r1
 874:	69 f7       	brne	.-38     	; 0x850 <__udivmodsi4_loop>
 876:	60 95       	com	r22
 878:	70 95       	com	r23
 87a:	80 95       	com	r24
 87c:	90 95       	com	r25
 87e:	9b 01       	movw	r18, r22
 880:	ac 01       	movw	r20, r24
 882:	bd 01       	movw	r22, r26
 884:	cf 01       	movw	r24, r30
 886:	08 95       	ret

00000888 <_exit>:
 888:	f8 94       	cli

0000088a <__stop_program>:
 88a:	ff cf       	rjmp	.-2      	; 0x88a <__stop_program>
