
steper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000628  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000804  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003e3  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 72 02 	call	0x4e4	; 0x4e4 <main>
  64:	0c 94 12 03 	jmp	0x624	; 0x624 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2c 97       	sbiw	r28, 0x0c	; 12
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	69 87       	std	Y+9, r22	; 0x09
  82:	7a 87       	std	Y+10, r23	; 0x0a
  84:	8b 87       	std	Y+11, r24	; 0x0b
  86:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  88:	89 85       	ldd	r24, Y+9	; 0x09
  8a:	9a 85       	ldd	r25, Y+10	; 0x0a
  8c:	ab 85       	ldd	r26, Y+11	; 0x0b
  8e:	bc 85       	ldd	r27, Y+12	; 0x0c
  90:	22 e7       	ldi	r18, 0x72	; 114
  92:	31 e0       	ldi	r19, 0x01	; 1
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	bc 01       	movw	r22, r24
  9a:	cd 01       	movw	r24, r26
  9c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__mulsi3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	89 83       	std	Y+1, r24	; 0x01
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	ab 83       	std	Y+3, r26	; 0x03
  aa:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  ac:	1d 82       	std	Y+5, r1	; 0x05
  ae:	1e 82       	std	Y+6, r1	; 0x06
  b0:	1f 82       	std	Y+7, r1	; 0x07
  b2:	18 86       	std	Y+8, r1	; 0x08
  b4:	0c c0       	rjmp	.+24     	; 0xce <Delay_ms+0x62>
	{
		asm("nop");
  b6:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  b8:	8d 81       	ldd	r24, Y+5	; 0x05
  ba:	9e 81       	ldd	r25, Y+6	; 0x06
  bc:	af 81       	ldd	r26, Y+7	; 0x07
  be:	b8 85       	ldd	r27, Y+8	; 0x08
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	8d 83       	std	Y+5, r24	; 0x05
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	af 83       	std	Y+7, r26	; 0x07
  cc:	b8 87       	std	Y+8, r27	; 0x08
  ce:	2d 81       	ldd	r18, Y+5	; 0x05
  d0:	3e 81       	ldd	r19, Y+6	; 0x06
  d2:	4f 81       	ldd	r20, Y+7	; 0x07
  d4:	58 85       	ldd	r21, Y+8	; 0x08
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	ab 81       	ldd	r26, Y+3	; 0x03
  dc:	bc 81       	ldd	r27, Y+4	; 0x04
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	4a 07       	cpc	r20, r26
  e4:	5b 07       	cpc	r21, r27
  e6:	38 f3       	brcs	.-50     	; 0xb6 <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  e8:	2c 96       	adiw	r28, 0x0c	; 12
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <Delay_us>:
void Delay_us(u32 DelayValue)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2c 97       	sbiw	r28, 0x0c	; 12
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	69 87       	std	Y+9, r22	; 0x09
 110:	7a 87       	std	Y+10, r23	; 0x0a
 112:	8b 87       	std	Y+11, r24	; 0x0b
 114:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	ab 85       	ldd	r26, Y+11	; 0x0b
 11c:	bc 85       	ldd	r27, Y+12	; 0x0c
 11e:	27 e7       	ldi	r18, 0x77	; 119
 120:	31 e0       	ldi	r19, 0x01	; 1
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	bc 01       	movw	r22, r24
 128:	cd 01       	movw	r24, r26
 12a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__mulsi3>
 12e:	dc 01       	movw	r26, r24
 130:	cb 01       	movw	r24, r22
 132:	89 5d       	subi	r24, 0xD9	; 217
 134:	94 44       	sbci	r25, 0x44	; 68
 136:	a0 40       	sbci	r26, 0x00	; 0
 138:	b0 40       	sbci	r27, 0x00	; 0
 13a:	28 ee       	ldi	r18, 0xE8	; 232
 13c:	33 e0       	ldi	r19, 0x03	; 3
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__udivmodsi4>
 14a:	da 01       	movw	r26, r20
 14c:	c9 01       	movw	r24, r18
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	ab 83       	std	Y+3, r26	; 0x03
 154:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 156:	1d 82       	std	Y+5, r1	; 0x05
 158:	1e 82       	std	Y+6, r1	; 0x06
 15a:	1f 82       	std	Y+7, r1	; 0x07
 15c:	18 86       	std	Y+8, r1	; 0x08
 15e:	0c c0       	rjmp	.+24     	; 0x178 <Delay_us+0x7e>
	{
		asm("nop");
 160:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 162:	8d 81       	ldd	r24, Y+5	; 0x05
 164:	9e 81       	ldd	r25, Y+6	; 0x06
 166:	af 81       	ldd	r26, Y+7	; 0x07
 168:	b8 85       	ldd	r27, Y+8	; 0x08
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	a1 1d       	adc	r26, r1
 16e:	b1 1d       	adc	r27, r1
 170:	8d 83       	std	Y+5, r24	; 0x05
 172:	9e 83       	std	Y+6, r25	; 0x06
 174:	af 83       	std	Y+7, r26	; 0x07
 176:	b8 87       	std	Y+8, r27	; 0x08
 178:	2d 81       	ldd	r18, Y+5	; 0x05
 17a:	3e 81       	ldd	r19, Y+6	; 0x06
 17c:	4f 81       	ldd	r20, Y+7	; 0x07
 17e:	58 85       	ldd	r21, Y+8	; 0x08
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	ab 81       	ldd	r26, Y+3	; 0x03
 186:	bc 81       	ldd	r27, Y+4	; 0x04
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	4a 07       	cpc	r20, r26
 18e:	5b 07       	cpc	r21, r27
 190:	38 f3       	brcs	.-50     	; 0x160 <Delay_us+0x66>
	{
		asm("nop");
	}
 192:	2c 96       	adiw	r28, 0x0c	; 12
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1ac:	ea e3       	ldi	r30, 0x3A	; 58
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1b4:	e7 e3       	ldi	r30, 0x37	; 55
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1bc:	e4 e3       	ldi	r30, 0x34	; 52
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1c4:	e1 e3       	ldi	r30, 0x31	; 49
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	8e ef       	ldi	r24, 0xFE	; 254
 1ca:	80 83       	st	Z, r24
}
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <DIO_voidSetPinValue+0x6>
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	60 f5       	brcc	.+88     	; 0x23e <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1e6:	8a 81       	ldd	r24, Y+2	; 0x02
 1e8:	88 23       	and	r24, r24
 1ea:	a1 f4       	brne	.+40     	; 0x214 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 1ec:	ab e3       	ldi	r26, 0x3B	; 59
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	eb e3       	ldi	r30, 0x3B	; 59
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	48 2f       	mov	r20, r24
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 2e       	mov	r0, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_voidSetPinValue+0x38>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_voidSetPinValue+0x34>
 20e:	84 2b       	or	r24, r20
 210:	8c 93       	st	X, r24
 212:	b3 c0       	rjmp	.+358    	; 0x37a <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 214:	ab e3       	ldi	r26, 0x3B	; 59
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	eb e3       	ldi	r30, 0x3B	; 59
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	48 2f       	mov	r20, r24
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 2e       	mov	r0, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_voidSetPinValue+0x60>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_voidSetPinValue+0x5c>
 236:	80 95       	com	r24
 238:	84 23       	and	r24, r20
 23a:	8c 93       	st	X, r24
 23c:	9e c0       	rjmp	.+316    	; 0x37a <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	88 30       	cpi	r24, 0x08	; 8
 242:	90 f1       	brcs	.+100    	; 0x2a8 <DIO_voidSetPinValue+0xd6>
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	80 31       	cpi	r24, 0x10	; 16
 248:	78 f5       	brcc	.+94     	; 0x2a8 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	88 50       	subi	r24, 0x08	; 8
 24e:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	88 23       	and	r24, r24
 254:	a1 f4       	brne	.+40     	; 0x27e <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 256:	a8 e3       	ldi	r26, 0x38	; 56
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e8 e3       	ldi	r30, 0x38	; 56
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 2e       	mov	r0, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_voidSetPinValue+0xa2>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_voidSetPinValue+0x9e>
 278:	84 2b       	or	r24, r20
 27a:	8c 93       	st	X, r24
 27c:	7e c0       	rjmp	.+252    	; 0x37a <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 27e:	a8 e3       	ldi	r26, 0x38	; 56
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	e8 e3       	ldi	r30, 0x38	; 56
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	48 2f       	mov	r20, r24
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	28 2f       	mov	r18, r24
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 2e       	mov	r0, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_voidSetPinValue+0xca>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_voidSetPinValue+0xc6>
 2a0:	80 95       	com	r24
 2a2:	84 23       	and	r24, r20
 2a4:	8c 93       	st	X, r24
 2a6:	69 c0       	rjmp	.+210    	; 0x37a <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	80 31       	cpi	r24, 0x10	; 16
 2ac:	90 f1       	brcs	.+100    	; 0x312 <DIO_voidSetPinValue+0x140>
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	88 31       	cpi	r24, 0x18	; 24
 2b2:	78 f5       	brcc	.+94     	; 0x312 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	80 51       	subi	r24, 0x10	; 16
 2b8:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	88 23       	and	r24, r24
 2be:	a1 f4       	brne	.+40     	; 0x2e8 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2c0:	a5 e3       	ldi	r26, 0x35	; 53
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	e5 e3       	ldi	r30, 0x35	; 53
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	48 2f       	mov	r20, r24
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 2e       	mov	r0, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_voidSetPinValue+0x10c>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_voidSetPinValue+0x108>
 2e2:	84 2b       	or	r24, r20
 2e4:	8c 93       	st	X, r24
 2e6:	49 c0       	rjmp	.+146    	; 0x37a <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2e8:	a5 e3       	ldi	r26, 0x35	; 53
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e5 e3       	ldi	r30, 0x35	; 53
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 2e       	mov	r0, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_voidSetPinValue+0x134>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_voidSetPinValue+0x130>
 30a:	80 95       	com	r24
 30c:	84 23       	and	r24, r20
 30e:	8c 93       	st	X, r24
 310:	34 c0       	rjmp	.+104    	; 0x37a <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	88 31       	cpi	r24, 0x18	; 24
 316:	88 f1       	brcs	.+98     	; 0x37a <DIO_voidSetPinValue+0x1a8>
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	80 32       	cpi	r24, 0x20	; 32
 31c:	70 f5       	brcc	.+92     	; 0x37a <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	88 51       	subi	r24, 0x18	; 24
 322:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	88 23       	and	r24, r24
 328:	a1 f4       	brne	.+40     	; 0x352 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 32a:	a2 e3       	ldi	r26, 0x32	; 50
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	e2 e3       	ldi	r30, 0x32	; 50
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	48 2f       	mov	r20, r24
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 2e       	mov	r0, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_voidSetPinValue+0x176>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_voidSetPinValue+0x172>
 34c:	84 2b       	or	r24, r20
 34e:	8c 93       	st	X, r24
 350:	14 c0       	rjmp	.+40     	; 0x37a <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 352:	a2 e3       	ldi	r26, 0x32	; 50
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	e2 e3       	ldi	r30, 0x32	; 50
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	48 2f       	mov	r20, r24
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 2e       	mov	r0, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_voidSetPinValue+0x19e>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_voidSetPinValue+0x19a>
 374:	80 95       	com	r24
 376:	84 23       	and	r24, r20
 378:	8c 93       	st	X, r24
		}			
	}
}
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	08 95       	ret

00000384 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 384:	df 93       	push	r29
 386:	cf 93       	push	r28
 388:	00 d0       	rcall	.+0      	; 0x38a <DIO_u8GetPinValue+0x6>
 38a:	00 d0       	rcall	.+0      	; 0x38c <DIO_u8GetPinValue+0x8>
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 392:	8c 81       	ldd	r24, Y+4	; 0x04
 394:	88 30       	cpi	r24, 0x08	; 8
 396:	00 f5       	brcc	.+64     	; 0x3d8 <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 398:	8c 81       	ldd	r24, Y+4	; 0x04
 39a:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 39c:	e9 e3       	ldi	r30, 0x39	; 57
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	50 e0       	ldi	r21, 0x00	; 0
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_u8GetPinValue+0x32>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	2a 95       	dec	r18
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_u8GetPinValue+0x2e>
 3ba:	9a 01       	movw	r18, r20
 3bc:	28 23       	and	r18, r24
 3be:	39 23       	and	r19, r25
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	88 2f       	mov	r24, r24
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	a9 01       	movw	r20, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_u8GetPinValue+0x4a>
 3ca:	55 95       	asr	r21
 3cc:	47 95       	ror	r20
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_u8GetPinValue+0x46>
 3d2:	ca 01       	movw	r24, r20
 3d4:	8a 83       	std	Y+2, r24	; 0x02
 3d6:	74 c0       	rjmp	.+232    	; 0x4c0 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 3d8:	8c 81       	ldd	r24, Y+4	; 0x04
 3da:	88 30       	cpi	r24, 0x08	; 8
 3dc:	20 f1       	brcs	.+72     	; 0x426 <DIO_u8GetPinValue+0xa2>
 3de:	8c 81       	ldd	r24, Y+4	; 0x04
 3e0:	80 31       	cpi	r24, 0x10	; 16
 3e2:	08 f5       	brcc	.+66     	; 0x426 <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 3e4:	8c 81       	ldd	r24, Y+4	; 0x04
 3e6:	88 50       	subi	r24, 0x08	; 8
 3e8:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 3ea:	e6 e3       	ldi	r30, 0x36	; 54
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	48 2f       	mov	r20, r24
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_u8GetPinValue+0x80>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	2a 95       	dec	r18
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_u8GetPinValue+0x7c>
 408:	9a 01       	movw	r18, r20
 40a:	28 23       	and	r18, r24
 40c:	39 23       	and	r19, r25
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	88 2f       	mov	r24, r24
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	a9 01       	movw	r20, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_u8GetPinValue+0x98>
 418:	55 95       	asr	r21
 41a:	47 95       	ror	r20
 41c:	8a 95       	dec	r24
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_u8GetPinValue+0x94>
 420:	ca 01       	movw	r24, r20
 422:	8a 83       	std	Y+2, r24	; 0x02
 424:	4d c0       	rjmp	.+154    	; 0x4c0 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 426:	8c 81       	ldd	r24, Y+4	; 0x04
 428:	80 31       	cpi	r24, 0x10	; 16
 42a:	20 f1       	brcs	.+72     	; 0x474 <DIO_u8GetPinValue+0xf0>
 42c:	8c 81       	ldd	r24, Y+4	; 0x04
 42e:	88 31       	cpi	r24, 0x18	; 24
 430:	08 f5       	brcc	.+66     	; 0x474 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	80 51       	subi	r24, 0x10	; 16
 436:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 438:	e6 e3       	ldi	r30, 0x36	; 54
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	48 2f       	mov	r20, r24
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_u8GetPinValue+0xce>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	2a 95       	dec	r18
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_u8GetPinValue+0xca>
 456:	9a 01       	movw	r18, r20
 458:	28 23       	and	r18, r24
 45a:	39 23       	and	r19, r25
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	88 2f       	mov	r24, r24
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	a9 01       	movw	r20, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_u8GetPinValue+0xe6>
 466:	55 95       	asr	r21
 468:	47 95       	ror	r20
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_u8GetPinValue+0xe2>
 46e:	ca 01       	movw	r24, r20
 470:	8a 83       	std	Y+2, r24	; 0x02
 472:	26 c0       	rjmp	.+76     	; 0x4c0 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 474:	8c 81       	ldd	r24, Y+4	; 0x04
 476:	88 31       	cpi	r24, 0x18	; 24
 478:	18 f1       	brcs	.+70     	; 0x4c0 <DIO_u8GetPinValue+0x13c>
 47a:	8c 81       	ldd	r24, Y+4	; 0x04
 47c:	80 32       	cpi	r24, 0x20	; 32
 47e:	00 f5       	brcc	.+64     	; 0x4c0 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 480:	8c 81       	ldd	r24, Y+4	; 0x04
 482:	88 51       	subi	r24, 0x18	; 24
 484:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 486:	e0 e3       	ldi	r30, 0x30	; 48
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	8b 81       	ldd	r24, Y+3	; 0x03
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8GetPinValue+0x11c>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	2a 95       	dec	r18
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_u8GetPinValue+0x118>
 4a4:	9a 01       	movw	r18, r20
 4a6:	28 23       	and	r18, r24
 4a8:	39 23       	and	r19, r25
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	88 2f       	mov	r24, r24
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	a9 01       	movw	r20, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_u8GetPinValue+0x134>
 4b4:	55 95       	asr	r21
 4b6:	47 95       	ror	r20
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_u8GetPinValue+0x130>
 4bc:	ca 01       	movw	r24, r20
 4be:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4c0:	8a 81       	ldd	r24, Y+2	; 0x02
 4c2:	88 23       	and	r24, r24
 4c4:	19 f4       	brne	.+6      	; 0x4cc <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	89 83       	std	Y+1, r24	; 0x01
 4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4d2:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	cf 91       	pop	r28
 4e0:	df 91       	pop	r29
 4e2:	08 95       	ret

000004e4 <main>:
 */
#include "STD_TYPES.h"
#include "DELAY.h"
#include "DIO_int.h"
void main(void)
{
 4e4:	df 93       	push	r29
 4e6:	cf 93       	push	r28
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 4ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_voidInitialize>

	while(1)
	{
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		Delay_ms(2);
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_HIGH);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		Delay_ms(2);
 53c:	62 e0       	ldi	r22, 0x02	; 2
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_HIGH);
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 560:	83 e0       	ldi	r24, 0x03	; 3
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		Delay_ms(2);
 568:	62 e0       	ldi	r22, 0x02	; 2
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_HIGH);
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_voidSetPinValue>
		Delay_ms(2);
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
 5a0:	a7 cf       	rjmp	.-178    	; 0x4f0 <main+0xc>

000005a2 <__mulsi3>:
 5a2:	62 9f       	mul	r22, r18
 5a4:	d0 01       	movw	r26, r0
 5a6:	73 9f       	mul	r23, r19
 5a8:	f0 01       	movw	r30, r0
 5aa:	82 9f       	mul	r24, r18
 5ac:	e0 0d       	add	r30, r0
 5ae:	f1 1d       	adc	r31, r1
 5b0:	64 9f       	mul	r22, r20
 5b2:	e0 0d       	add	r30, r0
 5b4:	f1 1d       	adc	r31, r1
 5b6:	92 9f       	mul	r25, r18
 5b8:	f0 0d       	add	r31, r0
 5ba:	83 9f       	mul	r24, r19
 5bc:	f0 0d       	add	r31, r0
 5be:	74 9f       	mul	r23, r20
 5c0:	f0 0d       	add	r31, r0
 5c2:	65 9f       	mul	r22, r21
 5c4:	f0 0d       	add	r31, r0
 5c6:	99 27       	eor	r25, r25
 5c8:	72 9f       	mul	r23, r18
 5ca:	b0 0d       	add	r27, r0
 5cc:	e1 1d       	adc	r30, r1
 5ce:	f9 1f       	adc	r31, r25
 5d0:	63 9f       	mul	r22, r19
 5d2:	b0 0d       	add	r27, r0
 5d4:	e1 1d       	adc	r30, r1
 5d6:	f9 1f       	adc	r31, r25
 5d8:	bd 01       	movw	r22, r26
 5da:	cf 01       	movw	r24, r30
 5dc:	11 24       	eor	r1, r1
 5de:	08 95       	ret

000005e0 <__udivmodsi4>:
 5e0:	a1 e2       	ldi	r26, 0x21	; 33
 5e2:	1a 2e       	mov	r1, r26
 5e4:	aa 1b       	sub	r26, r26
 5e6:	bb 1b       	sub	r27, r27
 5e8:	fd 01       	movw	r30, r26
 5ea:	0d c0       	rjmp	.+26     	; 0x606 <__udivmodsi4_ep>

000005ec <__udivmodsi4_loop>:
 5ec:	aa 1f       	adc	r26, r26
 5ee:	bb 1f       	adc	r27, r27
 5f0:	ee 1f       	adc	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	a2 17       	cp	r26, r18
 5f6:	b3 07       	cpc	r27, r19
 5f8:	e4 07       	cpc	r30, r20
 5fa:	f5 07       	cpc	r31, r21
 5fc:	20 f0       	brcs	.+8      	; 0x606 <__udivmodsi4_ep>
 5fe:	a2 1b       	sub	r26, r18
 600:	b3 0b       	sbc	r27, r19
 602:	e4 0b       	sbc	r30, r20
 604:	f5 0b       	sbc	r31, r21

00000606 <__udivmodsi4_ep>:
 606:	66 1f       	adc	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	1a 94       	dec	r1
 610:	69 f7       	brne	.-38     	; 0x5ec <__udivmodsi4_loop>
 612:	60 95       	com	r22
 614:	70 95       	com	r23
 616:	80 95       	com	r24
 618:	90 95       	com	r25
 61a:	9b 01       	movw	r18, r22
 61c:	ac 01       	movw	r20, r24
 61e:	bd 01       	movw	r22, r26
 620:	cf 01       	movw	r24, r30
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
