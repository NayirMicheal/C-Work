
digitalPiano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000b56  00000bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a0  008000a0  00000c2a  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005c3  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 03 	call	0x782	; 0x782 <main>
  8a:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 87 05 	call	0xb0e	; 0xb0e <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 ef       	ldi	r24, 0xF0	; 240
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1ea:	e1 e3       	ldi	r30, 0x31	; 49
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	80 83       	st	Z, r24
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_voidSetPinValue+0x6>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 30       	cpi	r24, 0x08	; 8
 20a:	60 f5       	brcc	.+88     	; 0x264 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	88 23       	and	r24, r24
 210:	a1 f4       	brne	.+40     	; 0x23a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 212:	ab e3       	ldi	r26, 0x3B	; 59
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x38>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x34>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	b3 c0       	rjmp	.+358    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 23a:	ab e3       	ldi	r26, 0x3B	; 59
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	eb e3       	ldi	r30, 0x3B	; 59
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0x60>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0x5c>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	9e c0       	rjmp	.+316    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	90 f1       	brcs	.+100    	; 0x2ce <DIO_voidSetPinValue+0xd6>
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	80 31       	cpi	r24, 0x10	; 16
 26e:	78 f5       	brcc	.+94     	; 0x2ce <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 50       	subi	r24, 0x08	; 8
 274:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	88 23       	and	r24, r24
 27a:	a1 f4       	brne	.+40     	; 0x2a4 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27c:	a8 e3       	ldi	r26, 0x38	; 56
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e8 e3       	ldi	r30, 0x38	; 56
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xa2>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0x9e>
 29e:	84 2b       	or	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a4:	a8 e3       	ldi	r26, 0x38	; 56
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinValue+0xca>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinValue+0xc6>
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 31       	cpi	r24, 0x10	; 16
 2d2:	90 f1       	brcs	.+100    	; 0x338 <DIO_voidSetPinValue+0x140>
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 31       	cpi	r24, 0x18	; 24
 2d8:	78 f5       	brcc	.+94     	; 0x338 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	80 51       	subi	r24, 0x10	; 16
 2de:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	88 23       	and	r24, r24
 2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e6:	a5 e3       	ldi	r26, 0x35	; 53
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e5 e3       	ldi	r30, 0x35	; 53
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x10c>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x108>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	49 c0       	rjmp	.+146    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30e:	a5 e3       	ldi	r26, 0x35	; 53
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e5 e3       	ldi	r30, 0x35	; 53
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x134>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x130>
 330:	80 95       	com	r24
 332:	84 23       	and	r24, r20
 334:	8c 93       	st	X, r24
 336:	34 c0       	rjmp	.+104    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	70 f5       	brcc	.+92     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 51       	subi	r24, 0x18	; 24
 348:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 23       	and	r24, r24
 34e:	a1 f4       	brne	.+40     	; 0x378 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 350:	a2 e3       	ldi	r26, 0x32	; 50
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e2 e3       	ldi	r30, 0x32	; 50
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x176>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x172>
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 378:	a2 e3       	ldi	r26, 0x32	; 50
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e2 e3       	ldi	r30, 0x32	; 50
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x19e>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x19a>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	8c 93       	st	X, r24
		}			
	}
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8GetPinValue+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	00 f5       	brcc	.+64     	; 0x3fe <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c2:	e9 e3       	ldi	r30, 0x39	; 57
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8GetPinValue+0x32>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	2a 95       	dec	r18
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8GetPinValue+0x2e>
 3e0:	9a 01       	movw	r18, r20
 3e2:	28 23       	and	r18, r24
 3e4:	39 23       	and	r19, r25
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPinValue+0x4a>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPinValue+0x46>
 3f8:	ca 01       	movw	r24, r20
 3fa:	8a 83       	std	Y+2, r24	; 0x02
 3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 3fe:	8c 81       	ldd	r24, Y+4	; 0x04
 400:	80 31       	cpi	r24, 0x10	; 16
 402:	20 f1       	brcs	.+72     	; 0x44c <DIO_u8GetPinValue+0xa2>
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	88 31       	cpi	r24, 0x18	; 24
 408:	08 f5       	brcc	.+66     	; 0x44c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	88 50       	subi	r24, 0x08	; 8
 40e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 410:	e6 e3       	ldi	r30, 0x36	; 54
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8GetPinValue+0x80>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	2a 95       	dec	r18
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8GetPinValue+0x7c>
 42e:	9a 01       	movw	r18, r20
 430:	28 23       	and	r18, r24
 432:	39 23       	and	r19, r25
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a9 01       	movw	r20, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0x98>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0x94>
 446:	ca 01       	movw	r24, r20
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	4d c0       	rjmp	.+154    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	80 31       	cpi	r24, 0x10	; 16
 450:	20 f1       	brcs	.+72     	; 0x49a <DIO_u8GetPinValue+0xf0>
 452:	8c 81       	ldd	r24, Y+4	; 0x04
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	08 f5       	brcc	.+66     	; 0x49a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	80 51       	subi	r24, 0x10	; 16
 45c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45e:	e6 e3       	ldi	r30, 0x36	; 54
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8GetPinValue+0xce>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8GetPinValue+0xca>
 47c:	9a 01       	movw	r18, r20
 47e:	28 23       	and	r18, r24
 480:	39 23       	and	r19, r25
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a9 01       	movw	r20, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8GetPinValue+0xe6>
 48c:	55 95       	asr	r21
 48e:	47 95       	ror	r20
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8GetPinValue+0xe2>
 494:	ca 01       	movw	r24, r20
 496:	8a 83       	std	Y+2, r24	; 0x02
 498:	26 c0       	rjmp	.+76     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	88 31       	cpi	r24, 0x18	; 24
 49e:	18 f1       	brcs	.+70     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	80 32       	cpi	r24, 0x20	; 32
 4a4:	00 f5       	brcc	.+64     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	88 51       	subi	r24, 0x18	; 24
 4aa:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4ac:	e0 e3       	ldi	r30, 0x30	; 48
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0x11c>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	2a 95       	dec	r18
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0x118>
 4ca:	9a 01       	movw	r18, r20
 4cc:	28 23       	and	r18, r24
 4ce:	39 23       	and	r19, r25
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a9 01       	movw	r20, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8GetPinValue+0x134>
 4da:	55 95       	asr	r21
 4dc:	47 95       	ror	r20
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8GetPinValue+0x130>
 4e2:	ca 01       	movw	r24, r20
 4e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	88 23       	and	r24, r24
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <KEYPAD_u16GetStatus>:
#include "KEYPAD_int.h"

static u16 u16ResultLoc=0;

u16 KEYPAD_u16GetStatus(void)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
	/*Clear previous status*/
	u16ResultLoc=0;
 512:	10 92 a1 00 	sts	0x00A1, r1
 516:	10 92 a0 00 	sts	0x00A0, r1

	/*Phase 1*/
	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_LOW);
 51a:	84 e0       	ldi	r24, 0x04	; 4
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 52a:	86 e0       	ldi	r24, 0x06	; 6
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 532:	87 e0       	ldi	r24, 0x07	; 7
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	voidSetSwitchresult(0);
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <voidSetSwitchresult>

	/*Phase 2*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 540:	84 e0       	ldi	r24, 0x04	; 4
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_LOW);
 548:	85 e0       	ldi	r24, 0x05	; 5
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 550:	86 e0       	ldi	r24, 0x06	; 6
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 558:	87 e0       	ldi	r24, 0x07	; 7
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	voidSetSwitchresult(1);
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <voidSetSwitchresult>

	/*Phase 3*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 566:	84 e0       	ldi	r24, 0x04	; 4
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_LOW);
 576:	86 e0       	ldi	r24, 0x06	; 6
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 57e:	87 e0       	ldi	r24, 0x07	; 7
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	voidSetSwitchresult(2);
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <voidSetSwitchresult>

	/*Phase 4*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 58c:	84 e0       	ldi	r24, 0x04	; 4
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 594:	85 e0       	ldi	r24, 0x05	; 5
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_LOW);
 5a4:	87 e0       	ldi	r24, 0x07	; 7
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	voidSetSwitchresult(3);
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <voidSetSwitchresult>

	return u16ResultLoc;
 5b2:	80 91 a0 00 	lds	r24, 0x00A0
 5b6:	90 91 a1 00 	lds	r25, 0x00A1
}
 5ba:	cf 91       	pop	r28
 5bc:	df 91       	pop	r29
 5be:	08 95       	ret

000005c0 <voidSetSwitchresult>:

static void voidSetSwitchresult(u8 u8ColumnCpy)
{
 5c0:	df 93       	push	r29
 5c2:	cf 93       	push	r28
 5c4:	0f 92       	push	r0
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_1) == DIO_u8_LOW)
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	a9 f4       	brne	.+42     	; 0x600 <voidSetSwitchresult+0x40>
	{
		SET_BIT(u16ResultLoc,u8ColumnCpy);
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	28 2f       	mov	r18, r24
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <voidSetSwitchresult+0x26>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	2a 95       	dec	r18
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <voidSetSwitchresult+0x22>
 5ea:	9c 01       	movw	r18, r24
 5ec:	80 91 a0 00 	lds	r24, 0x00A0
 5f0:	90 91 a1 00 	lds	r25, 0x00A1
 5f4:	82 2b       	or	r24, r18
 5f6:	93 2b       	or	r25, r19
 5f8:	90 93 a1 00 	sts	0x00A1, r25
 5fc:	80 93 a0 00 	sts	0x00A0, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_2) == DIO_u8_LOW)
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	c1 f4       	brne	.+48     	; 0x63a <voidSetSwitchresult+0x7a>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+4));
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	88 2f       	mov	r24, r24
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	9c 01       	movw	r18, r24
 612:	2c 5f       	subi	r18, 0xFC	; 252
 614:	3f 4f       	sbci	r19, 0xFF	; 255
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <voidSetSwitchresult+0x60>
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	2a 95       	dec	r18
 622:	e2 f7       	brpl	.-8      	; 0x61c <voidSetSwitchresult+0x5c>
 624:	9c 01       	movw	r18, r24
 626:	80 91 a0 00 	lds	r24, 0x00A0
 62a:	90 91 a1 00 	lds	r25, 0x00A1
 62e:	82 2b       	or	r24, r18
 630:	93 2b       	or	r25, r19
 632:	90 93 a1 00 	sts	0x00A1, r25
 636:	80 93 a0 00 	sts	0x00A0, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_3) == DIO_u8_LOW)
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	c1 f4       	brne	.+48     	; 0x674 <voidSetSwitchresult+0xb4>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+8));
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	88 2f       	mov	r24, r24
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	9c 01       	movw	r18, r24
 64c:	28 5f       	subi	r18, 0xF8	; 248
 64e:	3f 4f       	sbci	r19, 0xFF	; 255
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <voidSetSwitchresult+0x9a>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	2a 95       	dec	r18
 65c:	e2 f7       	brpl	.-8      	; 0x656 <voidSetSwitchresult+0x96>
 65e:	9c 01       	movw	r18, r24
 660:	80 91 a0 00 	lds	r24, 0x00A0
 664:	90 91 a1 00 	lds	r25, 0x00A1
 668:	82 2b       	or	r24, r18
 66a:	93 2b       	or	r25, r19
 66c:	90 93 a1 00 	sts	0x00A1, r25
 670:	80 93 a0 00 	sts	0x00A0, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_4) == DIO_u8_LOW)
 674:	83 e0       	ldi	r24, 0x03	; 3
 676:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	c1 f4       	brne	.+48     	; 0x6ae <voidSetSwitchresult+0xee>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+12));
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	88 2f       	mov	r24, r24
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	9c 01       	movw	r18, r24
 686:	24 5f       	subi	r18, 0xF4	; 244
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <voidSetSwitchresult+0xd4>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	2a 95       	dec	r18
 696:	e2 f7       	brpl	.-8      	; 0x690 <voidSetSwitchresult+0xd0>
 698:	9c 01       	movw	r18, r24
 69a:	80 91 a0 00 	lds	r24, 0x00A0
 69e:	90 91 a1 00 	lds	r25, 0x00A1
 6a2:	82 2b       	or	r24, r18
 6a4:	93 2b       	or	r25, r19
 6a6:	90 93 a1 00 	sts	0x00A1, r25
 6aa:	80 93 a0 00 	sts	0x00A0, r24
	}
}
 6ae:	0f 90       	pop	r0
 6b0:	cf 91       	pop	r28
 6b2:	df 91       	pop	r29
 6b4:	08 95       	ret

000006b6 <LED_MATRIX_voidCloseLedMatrix>:
#include"LED_MATRIX_priv.h"
#include "LED_MATRIX_int.h"
#include "LED_MATRIX_config.h"

void LED_MATRIX_voidCloseLedMatrix(void)
{
 6b6:	df 93       	push	r29
 6b8:	cf 93       	push	r28
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
#if u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTA
		PORTA=0xff;
#elif u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTB
		PORTB=0xff;
 6be:	e8 e3       	ldi	r30, 0x38	; 56
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	80 83       	st	Z, r24
		PORTC=0xff;
#elif u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTD
		PORTD=0xff;
#endif

}
 6c6:	cf 91       	pop	r28
 6c8:	df 91       	pop	r29
 6ca:	08 95       	ret

000006cc <LED_MATRIX_voidLedMatrixOutputImage>:
void LED_MATRIX_voidLedMatrixOutputImage(u8* u8ImageCopy)
{
 6cc:	df 93       	push	r29
 6ce:	cf 93       	push	r28
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	60 97       	sbiw	r28, 0x10	; 16
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	de bf       	out	0x3e, r29	; 62
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	cd bf       	out	0x3d, r28	; 61
 6e0:	9b 87       	std	Y+11, r25	; 0x0b
 6e2:	8a 87       	std	Y+10, r24	; 0x0a
	u8 u8ColsActivationLoc [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
 6e4:	ce 01       	movw	r24, r28
 6e6:	02 96       	adiw	r24, 0x02	; 2
 6e8:	9d 87       	std	Y+13, r25	; 0x0d
 6ea:	8c 87       	std	Y+12, r24	; 0x0c
 6ec:	e0 e6       	ldi	r30, 0x60	; 96
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	ff 87       	std	Y+15, r31	; 0x0f
 6f2:	ee 87       	std	Y+14, r30	; 0x0e
 6f4:	f8 e0       	ldi	r31, 0x08	; 8
 6f6:	f8 8b       	std	Y+16, r31	; 0x10
 6f8:	ee 85       	ldd	r30, Y+14	; 0x0e
 6fa:	ff 85       	ldd	r31, Y+15	; 0x0f
 6fc:	00 80       	ld	r0, Z
 6fe:	8e 85       	ldd	r24, Y+14	; 0x0e
 700:	9f 85       	ldd	r25, Y+15	; 0x0f
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	9f 87       	std	Y+15, r25	; 0x0f
 706:	8e 87       	std	Y+14, r24	; 0x0e
 708:	ec 85       	ldd	r30, Y+12	; 0x0c
 70a:	fd 85       	ldd	r31, Y+13	; 0x0d
 70c:	00 82       	st	Z, r0
 70e:	8c 85       	ldd	r24, Y+12	; 0x0c
 710:	9d 85       	ldd	r25, Y+13	; 0x0d
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	9d 87       	std	Y+13, r25	; 0x0d
 716:	8c 87       	std	Y+12, r24	; 0x0c
 718:	98 89       	ldd	r25, Y+16	; 0x10
 71a:	91 50       	subi	r25, 0x01	; 1
 71c:	98 8b       	std	Y+16, r25	; 0x10
 71e:	e8 89       	ldd	r30, Y+16	; 0x10
 720:	ee 23       	and	r30, r30
 722:	51 f7       	brne	.-44     	; 0x6f8 <LED_MATRIX_voidLedMatrixOutputImage+0x2c>
	for(u8 u8ColAndRowsLoc=0;u8ColAndRowsLoc<u8_LED_MATRIX_SIZE;u8ColAndRowsLoc++)
 724:	19 82       	std	Y+1, r1	; 0x01
 726:	21 c0       	rjmp	.+66     	; 0x76a <LED_MATRIX_voidLedMatrixOutputImage+0x9e>
	{
#if u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTA
		PORTA=u8ColsActivationLoc[u8ColAndRowsLoc];
#elif u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTB
		PORTB=u8ColsActivationLoc[u8ColAndRowsLoc];
 728:	a8 e3       	ldi	r26, 0x38	; 56
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	28 2f       	mov	r18, r24
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	ce 01       	movw	r24, r28
 734:	02 96       	adiw	r24, 0x02	; 2
 736:	fc 01       	movw	r30, r24
 738:	e2 0f       	add	r30, r18
 73a:	f3 1f       	adc	r31, r19
 73c:	80 81       	ld	r24, Z
 73e:	8c 93       	st	X, r24
#elif u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTB
		PORTB=u8ImageCopy[u8ColAndRowsLoc];
#elif u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTC
		PORTC=u8ImageCopy[u8ColAndRowsLoc];
#elif u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTD
		PORTD=u8ImageCopy[u8ColAndRowsLoc];
 740:	a2 e3       	ldi	r26, 0x32	; 50
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	89 81       	ldd	r24, Y+1	; 0x01
 746:	28 2f       	mov	r18, r24
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	8a 85       	ldd	r24, Y+10	; 0x0a
 74c:	9b 85       	ldd	r25, Y+11	; 0x0b
 74e:	fc 01       	movw	r30, r24
 750:	e2 0f       	add	r30, r18
 752:	f3 1f       	adc	r31, r19
 754:	80 81       	ld	r24, Z
 756:	8c 93       	st	X, r24
#endif
		Delay_us(u8_LED_MATRIX_POV_DELAY_US);
 758:	60 e2       	ldi	r22, 0x20	; 32
 75a:	73 e0       	ldi	r23, 0x03	; 3
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>

}
void LED_MATRIX_voidLedMatrixOutputImage(u8* u8ImageCopy)
{
	u8 u8ColsActivationLoc [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
	for(u8 u8ColAndRowsLoc=0;u8ColAndRowsLoc<u8_LED_MATRIX_SIZE;u8ColAndRowsLoc++)
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	8f 5f       	subi	r24, 0xFF	; 255
 768:	89 83       	std	Y+1, r24	; 0x01
 76a:	89 81       	ldd	r24, Y+1	; 0x01
 76c:	88 30       	cpi	r24, 0x08	; 8
 76e:	e0 f2       	brcs	.-72     	; 0x728 <LED_MATRIX_voidLedMatrixOutputImage+0x5c>
		PORTD=u8ImageCopy[u8ColAndRowsLoc];
#endif
		Delay_us(u8_LED_MATRIX_POV_DELAY_US);
	}

}
 770:	60 96       	adiw	r28, 0x10	; 16
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	cf 91       	pop	r28
 77e:	df 91       	pop	r29
 780:	08 95       	ret

00000782 <main>:
#include "BIT_MATH.h"
#include "DIO_int.h"
#include "LED_MATRIX_int.h"
#include "KEYPAD_int.h"
void main (void)
{
 782:	df 93       	push	r29
 784:	cf 93       	push	r28
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	c1 55       	subi	r28, 0x51	; 81
 78c:	d0 40       	sbci	r29, 0x00	; 0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
	u16 StatusKeys;
	u16 DelayValue[16]={55,150,250,450,550,650,700,775,875,950,1025,1100,1200,1300,1400,1500};
 798:	ae 01       	movw	r20, r28
 79a:	4a 5f       	subi	r20, 0xFA	; 250
 79c:	5f 4f       	sbci	r21, 0xFF	; 255
 79e:	5f af       	std	Y+63, r21	; 0x3f
 7a0:	4e af       	std	Y+62, r20	; 0x3e
 7a2:	80 e8       	ldi	r24, 0x80	; 128
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	22 96       	adiw	r28, 0x02	; 2
 7a8:	9f af       	std	Y+63, r25	; 0x3f
 7aa:	8e af       	std	Y+62, r24	; 0x3e
 7ac:	22 97       	sbiw	r28, 0x02	; 2
 7ae:	90 e2       	ldi	r25, 0x20	; 32
 7b0:	23 96       	adiw	r28, 0x03	; 3
 7b2:	9f af       	std	Y+63, r25	; 0x3f
 7b4:	23 97       	sbiw	r28, 0x03	; 3
 7b6:	22 96       	adiw	r28, 0x02	; 2
 7b8:	ee ad       	ldd	r30, Y+62	; 0x3e
 7ba:	ff ad       	ldd	r31, Y+63	; 0x3f
 7bc:	22 97       	sbiw	r28, 0x02	; 2
 7be:	00 80       	ld	r0, Z
 7c0:	22 96       	adiw	r28, 0x02	; 2
 7c2:	4e ad       	ldd	r20, Y+62	; 0x3e
 7c4:	5f ad       	ldd	r21, Y+63	; 0x3f
 7c6:	22 97       	sbiw	r28, 0x02	; 2
 7c8:	4f 5f       	subi	r20, 0xFF	; 255
 7ca:	5f 4f       	sbci	r21, 0xFF	; 255
 7cc:	22 96       	adiw	r28, 0x02	; 2
 7ce:	5f af       	std	Y+63, r21	; 0x3f
 7d0:	4e af       	std	Y+62, r20	; 0x3e
 7d2:	22 97       	sbiw	r28, 0x02	; 2
 7d4:	ee ad       	ldd	r30, Y+62	; 0x3e
 7d6:	ff ad       	ldd	r31, Y+63	; 0x3f
 7d8:	00 82       	st	Z, r0
 7da:	4e ad       	ldd	r20, Y+62	; 0x3e
 7dc:	5f ad       	ldd	r21, Y+63	; 0x3f
 7de:	4f 5f       	subi	r20, 0xFF	; 255
 7e0:	5f 4f       	sbci	r21, 0xFF	; 255
 7e2:	5f af       	std	Y+63, r21	; 0x3f
 7e4:	4e af       	std	Y+62, r20	; 0x3e
 7e6:	23 96       	adiw	r28, 0x03	; 3
 7e8:	5f ad       	ldd	r21, Y+63	; 0x3f
 7ea:	23 97       	sbiw	r28, 0x03	; 3
 7ec:	51 50       	subi	r21, 0x01	; 1
 7ee:	23 96       	adiw	r28, 0x03	; 3
 7f0:	5f af       	std	Y+63, r21	; 0x3f
 7f2:	23 97       	sbiw	r28, 0x03	; 3
 7f4:	23 96       	adiw	r28, 0x03	; 3
 7f6:	8f ad       	ldd	r24, Y+63	; 0x3f
 7f8:	23 97       	sbiw	r28, 0x03	; 3
 7fa:	88 23       	and	r24, r24
 7fc:	e1 f6       	brne	.-72     	; 0x7b6 <main+0x34>
	u8 gaffar[8]={0, 144, 146, 125, 146, 144, 0, 0};
 7fe:	fe 01       	movw	r30, r28
 800:	b6 96       	adiw	r30, 0x26	; 38
 802:	25 96       	adiw	r28, 0x05	; 5
 804:	ff af       	std	Y+63, r31	; 0x3f
 806:	ee af       	std	Y+62, r30	; 0x3e
 808:	25 97       	sbiw	r28, 0x05	; 5
 80a:	48 e7       	ldi	r20, 0x78	; 120
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	27 96       	adiw	r28, 0x07	; 7
 810:	5f af       	std	Y+63, r21	; 0x3f
 812:	4e af       	std	Y+62, r20	; 0x3e
 814:	27 97       	sbiw	r28, 0x07	; 7
 816:	58 e0       	ldi	r21, 0x08	; 8
 818:	28 96       	adiw	r28, 0x08	; 8
 81a:	5f af       	std	Y+63, r21	; 0x3f
 81c:	28 97       	sbiw	r28, 0x08	; 8
 81e:	27 96       	adiw	r28, 0x07	; 7
 820:	ee ad       	ldd	r30, Y+62	; 0x3e
 822:	ff ad       	ldd	r31, Y+63	; 0x3f
 824:	27 97       	sbiw	r28, 0x07	; 7
 826:	00 80       	ld	r0, Z
 828:	27 96       	adiw	r28, 0x07	; 7
 82a:	4e ad       	ldd	r20, Y+62	; 0x3e
 82c:	5f ad       	ldd	r21, Y+63	; 0x3f
 82e:	27 97       	sbiw	r28, 0x07	; 7
 830:	4f 5f       	subi	r20, 0xFF	; 255
 832:	5f 4f       	sbci	r21, 0xFF	; 255
 834:	27 96       	adiw	r28, 0x07	; 7
 836:	5f af       	std	Y+63, r21	; 0x3f
 838:	4e af       	std	Y+62, r20	; 0x3e
 83a:	27 97       	sbiw	r28, 0x07	; 7
 83c:	25 96       	adiw	r28, 0x05	; 5
 83e:	ee ad       	ldd	r30, Y+62	; 0x3e
 840:	ff ad       	ldd	r31, Y+63	; 0x3f
 842:	25 97       	sbiw	r28, 0x05	; 5
 844:	00 82       	st	Z, r0
 846:	25 96       	adiw	r28, 0x05	; 5
 848:	4e ad       	ldd	r20, Y+62	; 0x3e
 84a:	5f ad       	ldd	r21, Y+63	; 0x3f
 84c:	25 97       	sbiw	r28, 0x05	; 5
 84e:	4f 5f       	subi	r20, 0xFF	; 255
 850:	5f 4f       	sbci	r21, 0xFF	; 255
 852:	25 96       	adiw	r28, 0x05	; 5
 854:	5f af       	std	Y+63, r21	; 0x3f
 856:	4e af       	std	Y+62, r20	; 0x3e
 858:	25 97       	sbiw	r28, 0x05	; 5
 85a:	28 96       	adiw	r28, 0x08	; 8
 85c:	5f ad       	ldd	r21, Y+63	; 0x3f
 85e:	28 97       	sbiw	r28, 0x08	; 8
 860:	51 50       	subi	r21, 0x01	; 1
 862:	28 96       	adiw	r28, 0x08	; 8
 864:	5f af       	std	Y+63, r21	; 0x3f
 866:	28 97       	sbiw	r28, 0x08	; 8
 868:	28 96       	adiw	r28, 0x08	; 8
 86a:	8f ad       	ldd	r24, Y+63	; 0x3f
 86c:	28 97       	sbiw	r28, 0x08	; 8
 86e:	88 23       	and	r24, r24
 870:	b1 f6       	brne	.-84     	; 0x81e <main+0x9c>
	u8 gaffarDance[8]={0, 8, 146, 189, 82, 136, 128, 0};
 872:	fe 01       	movw	r30, r28
 874:	be 96       	adiw	r30, 0x2e	; 46
 876:	2a 96       	adiw	r28, 0x0a	; 10
 878:	ff af       	std	Y+63, r31	; 0x3f
 87a:	ee af       	std	Y+62, r30	; 0x3e
 87c:	2a 97       	sbiw	r28, 0x0a	; 10
 87e:	40 e7       	ldi	r20, 0x70	; 112
 880:	50 e0       	ldi	r21, 0x00	; 0
 882:	2c 96       	adiw	r28, 0x0c	; 12
 884:	5f af       	std	Y+63, r21	; 0x3f
 886:	4e af       	std	Y+62, r20	; 0x3e
 888:	2c 97       	sbiw	r28, 0x0c	; 12
 88a:	58 e0       	ldi	r21, 0x08	; 8
 88c:	2d 96       	adiw	r28, 0x0d	; 13
 88e:	5f af       	std	Y+63, r21	; 0x3f
 890:	2d 97       	sbiw	r28, 0x0d	; 13
 892:	2c 96       	adiw	r28, 0x0c	; 12
 894:	ee ad       	ldd	r30, Y+62	; 0x3e
 896:	ff ad       	ldd	r31, Y+63	; 0x3f
 898:	2c 97       	sbiw	r28, 0x0c	; 12
 89a:	00 80       	ld	r0, Z
 89c:	2c 96       	adiw	r28, 0x0c	; 12
 89e:	4e ad       	ldd	r20, Y+62	; 0x3e
 8a0:	5f ad       	ldd	r21, Y+63	; 0x3f
 8a2:	2c 97       	sbiw	r28, 0x0c	; 12
 8a4:	4f 5f       	subi	r20, 0xFF	; 255
 8a6:	5f 4f       	sbci	r21, 0xFF	; 255
 8a8:	2c 96       	adiw	r28, 0x0c	; 12
 8aa:	5f af       	std	Y+63, r21	; 0x3f
 8ac:	4e af       	std	Y+62, r20	; 0x3e
 8ae:	2c 97       	sbiw	r28, 0x0c	; 12
 8b0:	2a 96       	adiw	r28, 0x0a	; 10
 8b2:	ee ad       	ldd	r30, Y+62	; 0x3e
 8b4:	ff ad       	ldd	r31, Y+63	; 0x3f
 8b6:	2a 97       	sbiw	r28, 0x0a	; 10
 8b8:	00 82       	st	Z, r0
 8ba:	2a 96       	adiw	r28, 0x0a	; 10
 8bc:	4e ad       	ldd	r20, Y+62	; 0x3e
 8be:	5f ad       	ldd	r21, Y+63	; 0x3f
 8c0:	2a 97       	sbiw	r28, 0x0a	; 10
 8c2:	4f 5f       	subi	r20, 0xFF	; 255
 8c4:	5f 4f       	sbci	r21, 0xFF	; 255
 8c6:	2a 96       	adiw	r28, 0x0a	; 10
 8c8:	5f af       	std	Y+63, r21	; 0x3f
 8ca:	4e af       	std	Y+62, r20	; 0x3e
 8cc:	2a 97       	sbiw	r28, 0x0a	; 10
 8ce:	2d 96       	adiw	r28, 0x0d	; 13
 8d0:	5f ad       	ldd	r21, Y+63	; 0x3f
 8d2:	2d 97       	sbiw	r28, 0x0d	; 13
 8d4:	51 50       	subi	r21, 0x01	; 1
 8d6:	2d 96       	adiw	r28, 0x0d	; 13
 8d8:	5f af       	std	Y+63, r21	; 0x3f
 8da:	2d 97       	sbiw	r28, 0x0d	; 13
 8dc:	2d 96       	adiw	r28, 0x0d	; 13
 8de:	8f ad       	ldd	r24, Y+63	; 0x3f
 8e0:	2d 97       	sbiw	r28, 0x0d	; 13
 8e2:	88 23       	and	r24, r24
 8e4:	b1 f6       	brne	.-84     	; 0x892 <__stack+0x33>
	u8 gaffarDance2[8]={128, 136, 82, 189, 146, 8, 0, 0};
 8e6:	fe 01       	movw	r30, r28
 8e8:	f6 96       	adiw	r30, 0x36	; 54
 8ea:	2f 96       	adiw	r28, 0x0f	; 15
 8ec:	ff af       	std	Y+63, r31	; 0x3f
 8ee:	ee af       	std	Y+62, r30	; 0x3e
 8f0:	2f 97       	sbiw	r28, 0x0f	; 15
 8f2:	48 e6       	ldi	r20, 0x68	; 104
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	61 96       	adiw	r28, 0x11	; 17
 8f8:	5f af       	std	Y+63, r21	; 0x3f
 8fa:	4e af       	std	Y+62, r20	; 0x3e
 8fc:	61 97       	sbiw	r28, 0x11	; 17
 8fe:	58 e0       	ldi	r21, 0x08	; 8
 900:	62 96       	adiw	r28, 0x12	; 18
 902:	5f af       	std	Y+63, r21	; 0x3f
 904:	62 97       	sbiw	r28, 0x12	; 18
 906:	61 96       	adiw	r28, 0x11	; 17
 908:	ee ad       	ldd	r30, Y+62	; 0x3e
 90a:	ff ad       	ldd	r31, Y+63	; 0x3f
 90c:	61 97       	sbiw	r28, 0x11	; 17
 90e:	00 80       	ld	r0, Z
 910:	61 96       	adiw	r28, 0x11	; 17
 912:	4e ad       	ldd	r20, Y+62	; 0x3e
 914:	5f ad       	ldd	r21, Y+63	; 0x3f
 916:	61 97       	sbiw	r28, 0x11	; 17
 918:	4f 5f       	subi	r20, 0xFF	; 255
 91a:	5f 4f       	sbci	r21, 0xFF	; 255
 91c:	61 96       	adiw	r28, 0x11	; 17
 91e:	5f af       	std	Y+63, r21	; 0x3f
 920:	4e af       	std	Y+62, r20	; 0x3e
 922:	61 97       	sbiw	r28, 0x11	; 17
 924:	2f 96       	adiw	r28, 0x0f	; 15
 926:	ee ad       	ldd	r30, Y+62	; 0x3e
 928:	ff ad       	ldd	r31, Y+63	; 0x3f
 92a:	2f 97       	sbiw	r28, 0x0f	; 15
 92c:	00 82       	st	Z, r0
 92e:	2f 96       	adiw	r28, 0x0f	; 15
 930:	4e ad       	ldd	r20, Y+62	; 0x3e
 932:	5f ad       	ldd	r21, Y+63	; 0x3f
 934:	2f 97       	sbiw	r28, 0x0f	; 15
 936:	4f 5f       	subi	r20, 0xFF	; 255
 938:	5f 4f       	sbci	r21, 0xFF	; 255
 93a:	2f 96       	adiw	r28, 0x0f	; 15
 93c:	5f af       	std	Y+63, r21	; 0x3f
 93e:	4e af       	std	Y+62, r20	; 0x3e
 940:	2f 97       	sbiw	r28, 0x0f	; 15
 942:	62 96       	adiw	r28, 0x12	; 18
 944:	5f ad       	ldd	r21, Y+63	; 0x3f
 946:	62 97       	sbiw	r28, 0x12	; 18
 948:	51 50       	subi	r21, 0x01	; 1
 94a:	62 96       	adiw	r28, 0x12	; 18
 94c:	5f af       	std	Y+63, r21	; 0x3f
 94e:	62 97       	sbiw	r28, 0x12	; 18
 950:	62 96       	adiw	r28, 0x12	; 18
 952:	8f ad       	ldd	r24, Y+63	; 0x3f
 954:	62 97       	sbiw	r28, 0x12	; 18
 956:	88 23       	and	r24, r24
 958:	b1 f6       	brne	.-84     	; 0x906 <__stack+0xa7>
	DIO_voidInitialize();
 95a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	while(1)
	{
		StatusKeys=KEYPAD_u16GetStatus();
 95e:	0e 94 85 02 	call	0x50a	; 0x50a <KEYPAD_u16GetStatus>
 962:	9d 83       	std	Y+5, r25	; 0x05
 964:	8c 83       	std	Y+4, r24	; 0x04

		for(u8 i=0;i<16;i++)
 966:	1b 82       	std	Y+3, r1	; 0x03
 968:	ae c0       	rjmp	.+348    	; 0xac6 <__stack+0x267>
		{
			if(GET_BIT(StatusKeys,i))
 96a:	8b 81       	ldd	r24, Y+3	; 0x03
 96c:	28 2f       	mov	r18, r24
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x11b>
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	2a 95       	dec	r18
 97c:	e2 f7       	brpl	.-8      	; 0x976 <__stack+0x117>
 97e:	9c 01       	movw	r18, r24
 980:	8c 81       	ldd	r24, Y+4	; 0x04
 982:	9d 81       	ldd	r25, Y+5	; 0x05
 984:	28 23       	and	r18, r24
 986:	39 23       	and	r19, r25
 988:	8b 81       	ldd	r24, Y+3	; 0x03
 98a:	88 2f       	mov	r24, r24
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	f9 01       	movw	r30, r18
 990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x137>
 992:	f6 95       	lsr	r31
 994:	e7 95       	ror	r30
 996:	8a 95       	dec	r24
 998:	e2 f7       	brpl	.-8      	; 0x992 <__stack+0x133>
 99a:	cf 01       	movw	r24, r30
 99c:	00 97       	sbiw	r24, 0x00	; 0
 99e:	09 f4       	brne	.+2      	; 0x9a2 <__stack+0x143>
 9a0:	89 c0       	rjmp	.+274    	; 0xab4 <__stack+0x255>
			{


				for(u8 j=0;j<6;j++)
 9a2:	1a 82       	std	Y+2, r1	; 0x02
 9a4:	39 c0       	rjmp	.+114    	; 0xa18 <__stack+0x1b9>
				{
					LED_MATRIX_voidLedMatrixOutputImage(gaffar);
 9a6:	ce 01       	movw	r24, r28
 9a8:	86 96       	adiw	r24, 0x26	; 38
 9aa:	0e 94 66 03 	call	0x6cc	; 0x6cc <LED_MATRIX_voidLedMatrixOutputImage>

					DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_HIGH);
 9ae:	80 e1       	ldi	r24, 0x10	; 16
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					Delay_us(DelayValue[i]);
 9b6:	8b 81       	ldd	r24, Y+3	; 0x03
 9b8:	88 2f       	mov	r24, r24
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	9c 01       	movw	r18, r24
 9be:	22 0f       	add	r18, r18
 9c0:	33 1f       	adc	r19, r19
 9c2:	ce 01       	movw	r24, r28
 9c4:	01 96       	adiw	r24, 0x01	; 1
 9c6:	82 0f       	add	r24, r18
 9c8:	93 1f       	adc	r25, r19
 9ca:	fc 01       	movw	r30, r24
 9cc:	35 96       	adiw	r30, 0x05	; 5
 9ce:	80 81       	ld	r24, Z
 9d0:	91 81       	ldd	r25, Z+1	; 0x01
 9d2:	cc 01       	movw	r24, r24
 9d4:	a0 e0       	ldi	r26, 0x00	; 0
 9d6:	b0 e0       	ldi	r27, 0x00	; 0
 9d8:	bc 01       	movw	r22, r24
 9da:	cd 01       	movw	r24, r26
 9dc:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>
					DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_LOW);
 9e0:	80 e1       	ldi	r24, 0x10	; 16
 9e2:	61 e0       	ldi	r22, 0x01	; 1
 9e4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					Delay_us(DelayValue[i]);
 9e8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ea:	88 2f       	mov	r24, r24
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	9c 01       	movw	r18, r24
 9f0:	22 0f       	add	r18, r18
 9f2:	33 1f       	adc	r19, r19
 9f4:	ce 01       	movw	r24, r28
 9f6:	01 96       	adiw	r24, 0x01	; 1
 9f8:	82 0f       	add	r24, r18
 9fa:	93 1f       	adc	r25, r19
 9fc:	fc 01       	movw	r30, r24
 9fe:	35 96       	adiw	r30, 0x05	; 5
 a00:	80 81       	ld	r24, Z
 a02:	91 81       	ldd	r25, Z+1	; 0x01
 a04:	cc 01       	movw	r24, r24
 a06:	a0 e0       	ldi	r26, 0x00	; 0
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	bc 01       	movw	r22, r24
 a0c:	cd 01       	movw	r24, r26
 a0e:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>
		{
			if(GET_BIT(StatusKeys,i))
			{


				for(u8 j=0;j<6;j++)
 a12:	8a 81       	ldd	r24, Y+2	; 0x02
 a14:	8f 5f       	subi	r24, 0xFF	; 255
 a16:	8a 83       	std	Y+2, r24	; 0x02
 a18:	8a 81       	ldd	r24, Y+2	; 0x02
 a1a:	86 30       	cpi	r24, 0x06	; 6
 a1c:	20 f2       	brcs	.-120    	; 0x9a6 <__stack+0x147>
					DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_HIGH);
					Delay_us(DelayValue[i]);
					DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_LOW);
					Delay_us(DelayValue[i]);
				}
				for(u8 j=0;j<6;j++)
 a1e:	19 82       	std	Y+1, r1	; 0x01
 a20:	44 c0       	rjmp	.+136    	; 0xaaa <__stack+0x24b>
				{
					if(i<=7)
 a22:	8b 81       	ldd	r24, Y+3	; 0x03
 a24:	88 30       	cpi	r24, 0x08	; 8
 a26:	28 f4       	brcc	.+10     	; 0xa32 <__stack+0x1d3>
						LED_MATRIX_voidLedMatrixOutputImage(gaffarDance);
 a28:	ce 01       	movw	r24, r28
 a2a:	8e 96       	adiw	r24, 0x2e	; 46
 a2c:	0e 94 66 03 	call	0x6cc	; 0x6cc <LED_MATRIX_voidLedMatrixOutputImage>
 a30:	07 c0       	rjmp	.+14     	; 0xa40 <__stack+0x1e1>
					else if(i>7)
 a32:	8b 81       	ldd	r24, Y+3	; 0x03
 a34:	88 30       	cpi	r24, 0x08	; 8
 a36:	20 f0       	brcs	.+8      	; 0xa40 <__stack+0x1e1>
						LED_MATRIX_voidLedMatrixOutputImage(gaffarDance2);
 a38:	ce 01       	movw	r24, r28
 a3a:	c6 96       	adiw	r24, 0x36	; 54
 a3c:	0e 94 66 03 	call	0x6cc	; 0x6cc <LED_MATRIX_voidLedMatrixOutputImage>

					DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_HIGH);
 a40:	80 e1       	ldi	r24, 0x10	; 16
 a42:	60 e0       	ldi	r22, 0x00	; 0
 a44:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					Delay_us(DelayValue[i]);
 a48:	8b 81       	ldd	r24, Y+3	; 0x03
 a4a:	88 2f       	mov	r24, r24
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	9c 01       	movw	r18, r24
 a50:	22 0f       	add	r18, r18
 a52:	33 1f       	adc	r19, r19
 a54:	ce 01       	movw	r24, r28
 a56:	01 96       	adiw	r24, 0x01	; 1
 a58:	82 0f       	add	r24, r18
 a5a:	93 1f       	adc	r25, r19
 a5c:	fc 01       	movw	r30, r24
 a5e:	35 96       	adiw	r30, 0x05	; 5
 a60:	80 81       	ld	r24, Z
 a62:	91 81       	ldd	r25, Z+1	; 0x01
 a64:	cc 01       	movw	r24, r24
 a66:	a0 e0       	ldi	r26, 0x00	; 0
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	bc 01       	movw	r22, r24
 a6c:	cd 01       	movw	r24, r26
 a6e:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>
					DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_LOW);
 a72:	80 e1       	ldi	r24, 0x10	; 16
 a74:	61 e0       	ldi	r22, 0x01	; 1
 a76:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					Delay_us(DelayValue[i]);
 a7a:	8b 81       	ldd	r24, Y+3	; 0x03
 a7c:	88 2f       	mov	r24, r24
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	9c 01       	movw	r18, r24
 a82:	22 0f       	add	r18, r18
 a84:	33 1f       	adc	r19, r19
 a86:	ce 01       	movw	r24, r28
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	82 0f       	add	r24, r18
 a8c:	93 1f       	adc	r25, r19
 a8e:	fc 01       	movw	r30, r24
 a90:	35 96       	adiw	r30, 0x05	; 5
 a92:	80 81       	ld	r24, Z
 a94:	91 81       	ldd	r25, Z+1	; 0x01
 a96:	cc 01       	movw	r24, r24
 a98:	a0 e0       	ldi	r26, 0x00	; 0
 a9a:	b0 e0       	ldi	r27, 0x00	; 0
 a9c:	bc 01       	movw	r22, r24
 a9e:	cd 01       	movw	r24, r26
 aa0:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>
					DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_HIGH);
					Delay_us(DelayValue[i]);
					DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_LOW);
					Delay_us(DelayValue[i]);
				}
				for(u8 j=0;j<6;j++)
 aa4:	89 81       	ldd	r24, Y+1	; 0x01
 aa6:	8f 5f       	subi	r24, 0xFF	; 255
 aa8:	89 83       	std	Y+1, r24	; 0x01
 aaa:	89 81       	ldd	r24, Y+1	; 0x01
 aac:	86 30       	cpi	r24, 0x06	; 6
 aae:	08 f4       	brcc	.+2      	; 0xab2 <__stack+0x253>
 ab0:	b8 cf       	rjmp	.-144    	; 0xa22 <__stack+0x1c3>
 ab2:	55 cf       	rjmp	.-342    	; 0x95e <__stack+0xff>
				}
				break;
			}
			else
			{
				DIO_voidSetPinValue(DIO_u8_PIN_16,DIO_u8_LOW);
 ab4:	80 e1       	ldi	r24, 0x10	; 16
 ab6:	61 e0       	ldi	r22, 0x01	; 1
 ab8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				LED_MATRIX_voidCloseLedMatrix();
 abc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LED_MATRIX_voidCloseLedMatrix>
	DIO_voidInitialize();
	while(1)
	{
		StatusKeys=KEYPAD_u16GetStatus();

		for(u8 i=0;i<16;i++)
 ac0:	8b 81       	ldd	r24, Y+3	; 0x03
 ac2:	8f 5f       	subi	r24, 0xFF	; 255
 ac4:	8b 83       	std	Y+3, r24	; 0x03
 ac6:	8b 81       	ldd	r24, Y+3	; 0x03
 ac8:	80 31       	cpi	r24, 0x10	; 16
 aca:	08 f4       	brcc	.+2      	; 0xace <__stack+0x26f>
 acc:	4e cf       	rjmp	.-356    	; 0x96a <__stack+0x10b>
 ace:	47 cf       	rjmp	.-370    	; 0x95e <__stack+0xff>

00000ad0 <__mulsi3>:
 ad0:	62 9f       	mul	r22, r18
 ad2:	d0 01       	movw	r26, r0
 ad4:	73 9f       	mul	r23, r19
 ad6:	f0 01       	movw	r30, r0
 ad8:	82 9f       	mul	r24, r18
 ada:	e0 0d       	add	r30, r0
 adc:	f1 1d       	adc	r31, r1
 ade:	64 9f       	mul	r22, r20
 ae0:	e0 0d       	add	r30, r0
 ae2:	f1 1d       	adc	r31, r1
 ae4:	92 9f       	mul	r25, r18
 ae6:	f0 0d       	add	r31, r0
 ae8:	83 9f       	mul	r24, r19
 aea:	f0 0d       	add	r31, r0
 aec:	74 9f       	mul	r23, r20
 aee:	f0 0d       	add	r31, r0
 af0:	65 9f       	mul	r22, r21
 af2:	f0 0d       	add	r31, r0
 af4:	99 27       	eor	r25, r25
 af6:	72 9f       	mul	r23, r18
 af8:	b0 0d       	add	r27, r0
 afa:	e1 1d       	adc	r30, r1
 afc:	f9 1f       	adc	r31, r25
 afe:	63 9f       	mul	r22, r19
 b00:	b0 0d       	add	r27, r0
 b02:	e1 1d       	adc	r30, r1
 b04:	f9 1f       	adc	r31, r25
 b06:	bd 01       	movw	r22, r26
 b08:	cf 01       	movw	r24, r30
 b0a:	11 24       	eor	r1, r1
 b0c:	08 95       	ret

00000b0e <__udivmodsi4>:
 b0e:	a1 e2       	ldi	r26, 0x21	; 33
 b10:	1a 2e       	mov	r1, r26
 b12:	aa 1b       	sub	r26, r26
 b14:	bb 1b       	sub	r27, r27
 b16:	fd 01       	movw	r30, r26
 b18:	0d c0       	rjmp	.+26     	; 0xb34 <__udivmodsi4_ep>

00000b1a <__udivmodsi4_loop>:
 b1a:	aa 1f       	adc	r26, r26
 b1c:	bb 1f       	adc	r27, r27
 b1e:	ee 1f       	adc	r30, r30
 b20:	ff 1f       	adc	r31, r31
 b22:	a2 17       	cp	r26, r18
 b24:	b3 07       	cpc	r27, r19
 b26:	e4 07       	cpc	r30, r20
 b28:	f5 07       	cpc	r31, r21
 b2a:	20 f0       	brcs	.+8      	; 0xb34 <__udivmodsi4_ep>
 b2c:	a2 1b       	sub	r26, r18
 b2e:	b3 0b       	sbc	r27, r19
 b30:	e4 0b       	sbc	r30, r20
 b32:	f5 0b       	sbc	r31, r21

00000b34 <__udivmodsi4_ep>:
 b34:	66 1f       	adc	r22, r22
 b36:	77 1f       	adc	r23, r23
 b38:	88 1f       	adc	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	1a 94       	dec	r1
 b3e:	69 f7       	brne	.-38     	; 0xb1a <__udivmodsi4_loop>
 b40:	60 95       	com	r22
 b42:	70 95       	com	r23
 b44:	80 95       	com	r24
 b46:	90 95       	com	r25
 b48:	9b 01       	movw	r18, r22
 b4a:	ac 01       	movw	r20, r24
 b4c:	bd 01       	movw	r22, r26
 b4e:	cf 01       	movw	r24, r30
 b50:	08 95       	ret

00000b52 <_exit>:
 b52:	f8 94       	cli

00000b54 <__stop_program>:
 b54:	ff cf       	rjmp	.-2      	; 0xb54 <__stop_program>
