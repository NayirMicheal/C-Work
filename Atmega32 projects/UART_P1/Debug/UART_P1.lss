
UART_P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000dd4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800068  00800068  00000e70  2**0
                  ALLOC
  3 .stab         00001704  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000090c  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e5 05 	call	0xbca	; 0xbca <main>
  8a:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 ef       	ldi	r24, 0xF0	; 240
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1ea:	e1 e3       	ldi	r30, 0x31	; 49
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8e ef       	ldi	r24, 0xFE	; 254
 1f0:	80 83       	st	Z, r24
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_voidSetPinValue+0x6>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 30       	cpi	r24, 0x08	; 8
 20a:	60 f5       	brcc	.+88     	; 0x264 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	88 23       	and	r24, r24
 210:	a1 f4       	brne	.+40     	; 0x23a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 212:	ab e3       	ldi	r26, 0x3B	; 59
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x38>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x34>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	b3 c0       	rjmp	.+358    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 23a:	ab e3       	ldi	r26, 0x3B	; 59
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	eb e3       	ldi	r30, 0x3B	; 59
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0x60>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0x5c>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	9e c0       	rjmp	.+316    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	90 f1       	brcs	.+100    	; 0x2ce <DIO_voidSetPinValue+0xd6>
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	80 31       	cpi	r24, 0x10	; 16
 26e:	78 f5       	brcc	.+94     	; 0x2ce <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 50       	subi	r24, 0x08	; 8
 274:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	88 23       	and	r24, r24
 27a:	a1 f4       	brne	.+40     	; 0x2a4 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27c:	a8 e3       	ldi	r26, 0x38	; 56
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e8 e3       	ldi	r30, 0x38	; 56
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xa2>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0x9e>
 29e:	84 2b       	or	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a4:	a8 e3       	ldi	r26, 0x38	; 56
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinValue+0xca>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinValue+0xc6>
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 31       	cpi	r24, 0x10	; 16
 2d2:	90 f1       	brcs	.+100    	; 0x338 <DIO_voidSetPinValue+0x140>
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 31       	cpi	r24, 0x18	; 24
 2d8:	78 f5       	brcc	.+94     	; 0x338 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	80 51       	subi	r24, 0x10	; 16
 2de:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	88 23       	and	r24, r24
 2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e6:	a5 e3       	ldi	r26, 0x35	; 53
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e5 e3       	ldi	r30, 0x35	; 53
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x10c>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x108>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	49 c0       	rjmp	.+146    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30e:	a5 e3       	ldi	r26, 0x35	; 53
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e5 e3       	ldi	r30, 0x35	; 53
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x134>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x130>
 330:	80 95       	com	r24
 332:	84 23       	and	r24, r20
 334:	8c 93       	st	X, r24
 336:	34 c0       	rjmp	.+104    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	70 f5       	brcc	.+92     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 51       	subi	r24, 0x18	; 24
 348:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 23       	and	r24, r24
 34e:	a1 f4       	brne	.+40     	; 0x378 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 350:	a2 e3       	ldi	r26, 0x32	; 50
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e2 e3       	ldi	r30, 0x32	; 50
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x176>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x172>
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 378:	a2 e3       	ldi	r26, 0x32	; 50
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e2 e3       	ldi	r30, 0x32	; 50
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x19e>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x19a>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	8c 93       	st	X, r24
		}			
	}
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8GetPinValue+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	00 f5       	brcc	.+64     	; 0x3fe <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c2:	e9 e3       	ldi	r30, 0x39	; 57
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8GetPinValue+0x32>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	2a 95       	dec	r18
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8GetPinValue+0x2e>
 3e0:	9a 01       	movw	r18, r20
 3e2:	28 23       	and	r18, r24
 3e4:	39 23       	and	r19, r25
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPinValue+0x4a>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPinValue+0x46>
 3f8:	ca 01       	movw	r24, r20
 3fa:	8a 83       	std	Y+2, r24	; 0x02
 3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 3fe:	8c 81       	ldd	r24, Y+4	; 0x04
 400:	88 30       	cpi	r24, 0x08	; 8
 402:	20 f1       	brcs	.+72     	; 0x44c <DIO_u8GetPinValue+0xa2>
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	80 31       	cpi	r24, 0x10	; 16
 408:	08 f5       	brcc	.+66     	; 0x44c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	88 50       	subi	r24, 0x08	; 8
 40e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 410:	e6 e3       	ldi	r30, 0x36	; 54
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8GetPinValue+0x80>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	2a 95       	dec	r18
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8GetPinValue+0x7c>
 42e:	9a 01       	movw	r18, r20
 430:	28 23       	and	r18, r24
 432:	39 23       	and	r19, r25
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a9 01       	movw	r20, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0x98>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0x94>
 446:	ca 01       	movw	r24, r20
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	4d c0       	rjmp	.+154    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	80 31       	cpi	r24, 0x10	; 16
 450:	20 f1       	brcs	.+72     	; 0x49a <DIO_u8GetPinValue+0xf0>
 452:	8c 81       	ldd	r24, Y+4	; 0x04
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	08 f5       	brcc	.+66     	; 0x49a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	80 51       	subi	r24, 0x10	; 16
 45c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45e:	e6 e3       	ldi	r30, 0x36	; 54
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8GetPinValue+0xce>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8GetPinValue+0xca>
 47c:	9a 01       	movw	r18, r20
 47e:	28 23       	and	r18, r24
 480:	39 23       	and	r19, r25
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a9 01       	movw	r20, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8GetPinValue+0xe6>
 48c:	55 95       	asr	r21
 48e:	47 95       	ror	r20
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8GetPinValue+0xe2>
 494:	ca 01       	movw	r24, r20
 496:	8a 83       	std	Y+2, r24	; 0x02
 498:	26 c0       	rjmp	.+76     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	88 31       	cpi	r24, 0x18	; 24
 49e:	18 f1       	brcs	.+70     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	80 32       	cpi	r24, 0x20	; 32
 4a4:	00 f5       	brcc	.+64     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	88 51       	subi	r24, 0x18	; 24
 4aa:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4ac:	e0 e3       	ldi	r30, 0x30	; 48
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0x11c>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	2a 95       	dec	r18
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0x118>
 4ca:	9a 01       	movw	r18, r20
 4cc:	28 23       	and	r18, r24
 4ce:	39 23       	and	r19, r25
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a9 01       	movw	r20, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8GetPinValue+0x134>
 4da:	55 95       	asr	r21
 4dc:	47 95       	ror	r20
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8GetPinValue+0x130>
 4e2:	ca 01       	movw	r24, r20
 4e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	88 23       	and	r24, r24
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 512:	af e5       	ldi	r26, 0x5F	; 95
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	ef e5       	ldi	r30, 0x5F	; 95
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	80 68       	ori	r24, 0x80	; 128
 51e:	8c 93       	st	X, r24
}
 520:	cf 91       	pop	r28
 522:	df 91       	pop	r29
 524:	08 95       	ret

00000526 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 526:	df 93       	push	r29
 528:	cf 93       	push	r28
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 52e:	af e5       	ldi	r26, 0x5F	; 95
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	ef e5       	ldi	r30, 0x5F	; 95
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	8f 77       	andi	r24, 0x7F	; 127
 53a:	8c 93       	st	X, r24
}
 53c:	cf 91       	pop	r28
 53e:	df 91       	pop	r29
 540:	08 95       	ret

00000542 <KEYPAD_u16GetStatus>:
#include "KEYPAD_int.h"

static u16 u16ResultLoc=0;

u16 KEYPAD_u16GetStatus(void)
{
 542:	df 93       	push	r29
 544:	cf 93       	push	r28
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
	/*Clear previous status*/
	u16ResultLoc=0;
 54a:	10 92 69 00 	sts	0x0069, r1
 54e:	10 92 68 00 	sts	0x0068, r1

	/*Phase 1*/
	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_LOW);
 552:	8c e0       	ldi	r24, 0x0C	; 12
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 55a:	8d e0       	ldi	r24, 0x0D	; 13
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 562:	8e e0       	ldi	r24, 0x0E	; 14
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 56a:	8f e0       	ldi	r24, 0x0F	; 15
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	voidSetSwitchresult(0);
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <voidSetSwitchresult>

	/*Phase 2*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_LOW);
 580:	8d e0       	ldi	r24, 0x0D	; 13
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 588:	8e e0       	ldi	r24, 0x0E	; 14
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 590:	8f e0       	ldi	r24, 0x0F	; 15
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	voidSetSwitchresult(1);
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <voidSetSwitchresult>

	/*Phase 3*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 59e:	8c e0       	ldi	r24, 0x0C	; 12
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 5a6:	8d e0       	ldi	r24, 0x0D	; 13
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_LOW);
 5ae:	8e e0       	ldi	r24, 0x0E	; 14
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 5b6:	8f e0       	ldi	r24, 0x0F	; 15
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	voidSetSwitchresult(2);
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <voidSetSwitchresult>

	/*Phase 4*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 5c4:	8c e0       	ldi	r24, 0x0C	; 12
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 5cc:	8d e0       	ldi	r24, 0x0D	; 13
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 5d4:	8e e0       	ldi	r24, 0x0E	; 14
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_LOW);
 5dc:	8f e0       	ldi	r24, 0x0F	; 15
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	voidSetSwitchresult(3);
 5e4:	83 e0       	ldi	r24, 0x03	; 3
 5e6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <voidSetSwitchresult>

	return u16ResultLoc;
 5ea:	80 91 68 00 	lds	r24, 0x0068
 5ee:	90 91 69 00 	lds	r25, 0x0069
}
 5f2:	cf 91       	pop	r28
 5f4:	df 91       	pop	r29
 5f6:	08 95       	ret

000005f8 <voidSetSwitchresult>:

static void voidSetSwitchresult(u8 u8ColumnCpy)
{
 5f8:	df 93       	push	r29
 5fa:	cf 93       	push	r28
 5fc:	0f 92       	push	r0
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_1) == DIO_u8_LOW)
 604:	88 e0       	ldi	r24, 0x08	; 8
 606:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	a9 f4       	brne	.+42     	; 0x638 <voidSetSwitchresult+0x40>
	{
		SET_BIT(u16ResultLoc,u8ColumnCpy);
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <voidSetSwitchresult+0x26>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	2a 95       	dec	r18
 620:	e2 f7       	brpl	.-8      	; 0x61a <voidSetSwitchresult+0x22>
 622:	9c 01       	movw	r18, r24
 624:	80 91 68 00 	lds	r24, 0x0068
 628:	90 91 69 00 	lds	r25, 0x0069
 62c:	82 2b       	or	r24, r18
 62e:	93 2b       	or	r25, r19
 630:	90 93 69 00 	sts	0x0069, r25
 634:	80 93 68 00 	sts	0x0068, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_2) == DIO_u8_LOW)
 638:	89 e0       	ldi	r24, 0x09	; 9
 63a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	c1 f4       	brne	.+48     	; 0x672 <voidSetSwitchresult+0x7a>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+4));
 642:	89 81       	ldd	r24, Y+1	; 0x01
 644:	88 2f       	mov	r24, r24
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	9c 01       	movw	r18, r24
 64a:	2c 5f       	subi	r18, 0xFC	; 252
 64c:	3f 4f       	sbci	r19, 0xFF	; 255
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <voidSetSwitchresult+0x60>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	2a 95       	dec	r18
 65a:	e2 f7       	brpl	.-8      	; 0x654 <voidSetSwitchresult+0x5c>
 65c:	9c 01       	movw	r18, r24
 65e:	80 91 68 00 	lds	r24, 0x0068
 662:	90 91 69 00 	lds	r25, 0x0069
 666:	82 2b       	or	r24, r18
 668:	93 2b       	or	r25, r19
 66a:	90 93 69 00 	sts	0x0069, r25
 66e:	80 93 68 00 	sts	0x0068, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_3) == DIO_u8_LOW)
 672:	8a e0       	ldi	r24, 0x0A	; 10
 674:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	c1 f4       	brne	.+48     	; 0x6ac <voidSetSwitchresult+0xb4>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+8));
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	88 2f       	mov	r24, r24
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	9c 01       	movw	r18, r24
 684:	28 5f       	subi	r18, 0xF8	; 248
 686:	3f 4f       	sbci	r19, 0xFF	; 255
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <voidSetSwitchresult+0x9a>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	2a 95       	dec	r18
 694:	e2 f7       	brpl	.-8      	; 0x68e <voidSetSwitchresult+0x96>
 696:	9c 01       	movw	r18, r24
 698:	80 91 68 00 	lds	r24, 0x0068
 69c:	90 91 69 00 	lds	r25, 0x0069
 6a0:	82 2b       	or	r24, r18
 6a2:	93 2b       	or	r25, r19
 6a4:	90 93 69 00 	sts	0x0069, r25
 6a8:	80 93 68 00 	sts	0x0068, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_4) == DIO_u8_LOW)
 6ac:	8b e0       	ldi	r24, 0x0B	; 11
 6ae:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	c1 f4       	brne	.+48     	; 0x6e6 <voidSetSwitchresult+0xee>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+12));
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	88 2f       	mov	r24, r24
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	9c 01       	movw	r18, r24
 6be:	24 5f       	subi	r18, 0xF4	; 244
 6c0:	3f 4f       	sbci	r19, 0xFF	; 255
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <voidSetSwitchresult+0xd4>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	2a 95       	dec	r18
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <voidSetSwitchresult+0xd0>
 6d0:	9c 01       	movw	r18, r24
 6d2:	80 91 68 00 	lds	r24, 0x0068
 6d6:	90 91 69 00 	lds	r25, 0x0069
 6da:	82 2b       	or	r24, r18
 6dc:	93 2b       	or	r25, r19
 6de:	90 93 69 00 	sts	0x0069, r25
 6e2:	80 93 68 00 	sts	0x0068, r24
	}
}
 6e6:	0f 90       	pop	r0
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
 6ee:	df 93       	push	r29
 6f0:	cf 93       	push	r28
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
 6f6:	62 e3       	ldi	r22, 0x32	; 50
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*Write Function Set command*/
	voidWriteCmd(0b00110000 | (LCD_u8_FONT<<2) | (LCD_u8_NUM_OF_LINES<<3));
 702:	88 e3       	ldi	r24, 0x38	; 56
 704:	0e 94 b0 03 	call	0x760	; 0x760 <voidWriteCmd>

	Delay_ms(1);
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write Display on command*/
	voidWriteCmd(0b00001000 | (LCD_u8_BLINK_ON_OFF<<0) | (LCD_u8_CURSOR_ON_OFF<<1) | (LCD_u8_DISPLAY_ON_OFF<<2));
 714:	8c e0       	ldi	r24, 0x0C	; 12
 716:	0e 94 b0 03 	call	0x760	; 0x760 <voidWriteCmd>

	Delay_ms(1);
 71a:	61 e0       	ldi	r22, 0x01	; 1
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write command clear display*/
	voidWriteCmd(0b00000001);
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 b0 03 	call	0x760	; 0x760 <voidWriteCmd>

	Delay_ms(2);
 72c:	62 e0       	ldi	r22, 0x02	; 2
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	08 95       	ret

0000073e <voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
static void voidWriteData(u8 u8DataCpy)
{
 73e:	df 93       	push	r29
 740:	cf 93       	push	r28
 742:	0f 92       	push	r0
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
 74a:	8d e1       	ldi	r24, 0x1D	; 29
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	0e 94 c1 03 	call	0x782	; 0x782 <voidLcdExecute>
}
 758:	0f 90       	pop	r0
 75a:	cf 91       	pop	r28
 75c:	df 91       	pop	r29
 75e:	08 95       	ret

00000760 <voidWriteCmd>:
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
static void voidWriteCmd(u8 u8CommandCpy)
{
 760:	df 93       	push	r29
 762:	cf 93       	push	r28
 764:	0f 92       	push	r0
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
 76c:	8d e1       	ldi	r24, 0x1D	; 29
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	0e 94 c1 03 	call	0x782	; 0x782 <voidLcdExecute>
}
 77a:	0f 90       	pop	r0
 77c:	cf 91       	pop	r28
 77e:	df 91       	pop	r29
 780:	08 95       	ret

00000782 <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
 782:	df 93       	push	r29
 784:	cf 93       	push	r28
 786:	00 d0       	rcall	.+0      	; 0x788 <voidLcdExecute+0x6>
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	8a 83       	std	Y+2, r24	; 0x02
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
 78e:	8e e1       	ldi	r24, 0x1E	; 30
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 796:	19 82       	std	Y+1, r1	; 0x01
 798:	34 c0       	rjmp	.+104    	; 0x802 <voidLcdExecute+0x80>
	{
		if(GET_BIT(u8ValueCpy,u8PinsCounterLocal))
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	48 2f       	mov	r20, r24
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <voidLcdExecute+0x2e>
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	2a 95       	dec	r18
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <voidLcdExecute+0x2a>
 7b4:	9a 01       	movw	r18, r20
 7b6:	28 23       	and	r18, r24
 7b8:	39 23       	and	r19, r25
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	88 2f       	mov	r24, r24
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	a9 01       	movw	r20, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <voidLcdExecute+0x46>
 7c4:	55 95       	asr	r21
 7c6:	47 95       	ror	r20
 7c8:	8a 95       	dec	r24
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <voidLcdExecute+0x42>
 7cc:	ca 01       	movw	r24, r20
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	59 f0       	breq	.+22     	; 0x7e8 <voidLcdExecute+0x66>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_HIGH);
 7d2:	89 81       	ldd	r24, Y+1	; 0x01
 7d4:	88 2f       	mov	r24, r24
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	fc 01       	movw	r30, r24
 7da:	e0 5a       	subi	r30, 0xA0	; 160
 7dc:	ff 4f       	sbci	r31, 0xFF	; 255
 7de:	80 81       	ld	r24, Z
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
 7e6:	0a c0       	rjmp	.+20     	; 0x7fc <voidLcdExecute+0x7a>
		}
			else
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	88 2f       	mov	r24, r24
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	fc 01       	movw	r30, r24
 7f0:	e0 5a       	subi	r30, 0xA0	; 160
 7f2:	ff 4f       	sbci	r31, 0xFF	; 255
 7f4:	80 81       	ld	r24, Z
 7f6:	61 e0       	ldi	r22, 0x01	; 1
 7f8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
static void voidLcdExecute(u8 u8ValueCpy)
{
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	8f 5f       	subi	r24, 0xFF	; 255
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	89 81       	ldd	r24, Y+1	; 0x01
 804:	88 30       	cpi	r24, 0x08	; 8
 806:	48 f2       	brcs	.-110    	; 0x79a <voidLcdExecute+0x18>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
		}
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
 808:	8f e1       	ldi	r24, 0x1F	; 31
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_ms(1);
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
 81c:	8f e1       	ldi	r24, 0x1F	; 31
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
}
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	cf 91       	pop	r28
 82a:	df 91       	pop	r29
 82c:	08 95       	ret

0000082e <LCD_voidWriteStringXY>:


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
 82e:	df 93       	push	r29
 830:	cf 93       	push	r28
 832:	00 d0       	rcall	.+0      	; 0x834 <LCD_voidWriteStringXY+0x6>
 834:	00 d0       	rcall	.+0      	; 0x836 <LCD_voidWriteStringXY+0x8>
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	9a 83       	std	Y+2, r25	; 0x02
 83c:	89 83       	std	Y+1, r24	; 0x01
 83e:	6b 83       	std	Y+3, r22	; 0x03
 840:	4c 83       	std	Y+4, r20	; 0x04
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
 842:	8c 81       	ldd	r24, Y+4	; 0x04
 844:	88 2f       	mov	r24, r24
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	00 24       	eor	r0, r0
 84a:	96 95       	lsr	r25
 84c:	87 95       	ror	r24
 84e:	07 94       	ror	r0
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	07 94       	ror	r0
 856:	98 2f       	mov	r25, r24
 858:	80 2d       	mov	r24, r0
 85a:	98 2f       	mov	r25, r24
 85c:	90 68       	ori	r25, 0x80	; 128
 85e:	8b 81       	ldd	r24, Y+3	; 0x03
 860:	89 2b       	or	r24, r25
 862:	0e 94 b0 03 	call	0x760	; 0x760 <voidWriteCmd>
 866:	0a c0       	rjmp	.+20     	; 0x87c <__stack+0x1d>
	while(*u8PtrCpy)
	{
		voidWriteData(*u8PtrCpy);
 868:	e9 81       	ldd	r30, Y+1	; 0x01
 86a:	fa 81       	ldd	r31, Y+2	; 0x02
 86c:	80 81       	ld	r24, Z
 86e:	0e 94 9f 03 	call	0x73e	; 0x73e <voidWriteData>
		u8PtrCpy++;
 872:	89 81       	ldd	r24, Y+1	; 0x01
 874:	9a 81       	ldd	r25, Y+2	; 0x02
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	9a 83       	std	Y+2, r25	; 0x02
 87a:	89 83       	std	Y+1, r24	; 0x01


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
	while(*u8PtrCpy)
 87c:	e9 81       	ldd	r30, Y+1	; 0x01
 87e:	fa 81       	ldd	r31, Y+2	; 0x02
 880:	80 81       	ld	r24, Z
 882:	88 23       	and	r24, r24
 884:	89 f7       	brne	.-30     	; 0x868 <__stack+0x9>
	{
		voidWriteData(*u8PtrCpy);
		u8PtrCpy++;
	}
}
 886:	0f 90       	pop	r0
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	cf 91       	pop	r28
 890:	df 91       	pop	r29
 892:	08 95       	ret

00000894 <LCD_voidWriteStringCurrentPosition>:
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
 894:	df 93       	push	r29
 896:	cf 93       	push	r28
 898:	00 d0       	rcall	.+0      	; 0x89a <LCD_voidWriteStringCurrentPosition+0x6>
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	9a 83       	std	Y+2, r25	; 0x02
 8a0:	89 83       	std	Y+1, r24	; 0x01
 8a2:	0a c0       	rjmp	.+20     	; 0x8b8 <LCD_voidWriteStringCurrentPosition+0x24>
	while(*u8PtrCpy)
		{
			voidWriteData(*u8PtrCpy);
 8a4:	e9 81       	ldd	r30, Y+1	; 0x01
 8a6:	fa 81       	ldd	r31, Y+2	; 0x02
 8a8:	80 81       	ld	r24, Z
 8aa:	0e 94 9f 03 	call	0x73e	; 0x73e <voidWriteData>
			u8PtrCpy++;
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	9a 81       	ldd	r25, Y+2	; 0x02
 8b2:	01 96       	adiw	r24, 0x01	; 1
 8b4:	9a 83       	std	Y+2, r25	; 0x02
 8b6:	89 83       	std	Y+1, r24	; 0x01
		u8PtrCpy++;
	}
}
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
	while(*u8PtrCpy)
 8b8:	e9 81       	ldd	r30, Y+1	; 0x01
 8ba:	fa 81       	ldd	r31, Y+2	; 0x02
 8bc:	80 81       	ld	r24, Z
 8be:	88 23       	and	r24, r24
 8c0:	89 f7       	brne	.-30     	; 0x8a4 <LCD_voidWriteStringCurrentPosition+0x10>
		{
			voidWriteData(*u8PtrCpy);
			u8PtrCpy++;
		}
}
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	cf 91       	pop	r28
 8c8:	df 91       	pop	r29
 8ca:	08 95       	ret

000008cc <LCD_voidClearDisplay>:
extern void LCD_voidClearDisplay(void)
{
 8cc:	df 93       	push	r29
 8ce:	cf 93       	push	r28
 8d0:	cd b7       	in	r28, 0x3d	; 61
 8d2:	de b7       	in	r29, 0x3e	; 62
	voidWriteCmd(0b00000001);
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	0e 94 b0 03 	call	0x760	; 0x760 <voidWriteCmd>
	Delay_ms(2);
 8da:	62 e0       	ldi	r22, 0x02	; 2
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
 8e6:	cf 91       	pop	r28
 8e8:	df 91       	pop	r29
 8ea:	08 95       	ret

000008ec <LCD_voidDrawCustomChar>:

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
 8ec:	df 93       	push	r29
 8ee:	cf 93       	push	r28
 8f0:	00 d0       	rcall	.+0      	; 0x8f2 <LCD_voidDrawCustomChar+0x6>
 8f2:	00 d0       	rcall	.+0      	; 0x8f4 <LCD_voidDrawCustomChar+0x8>
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
 8f8:	9b 83       	std	Y+3, r25	; 0x03
 8fa:	8a 83       	std	Y+2, r24	; 0x02
 8fc:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
 8fe:	8c 81       	ldd	r24, Y+4	; 0x04
 900:	88 2f       	mov	r24, r24
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	80 64       	ori	r24, 0x40	; 64
 912:	0e 94 b0 03 	call	0x760	; 0x760 <voidWriteCmd>
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 916:	19 82       	std	Y+1, r1	; 0x01
 918:	0e c0       	rjmp	.+28     	; 0x936 <LCD_voidDrawCustomChar+0x4a>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
 91a:	89 81       	ldd	r24, Y+1	; 0x01
 91c:	28 2f       	mov	r18, r24
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	9b 81       	ldd	r25, Y+3	; 0x03
 924:	fc 01       	movw	r30, r24
 926:	e2 0f       	add	r30, r18
 928:	f3 1f       	adc	r31, r19
 92a:	80 81       	ld	r24, Z
 92c:	0e 94 9f 03 	call	0x73e	; 0x73e <voidWriteData>
}

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
 930:	89 81       	ldd	r24, Y+1	; 0x01
 932:	8f 5f       	subi	r24, 0xFF	; 255
 934:	89 83       	std	Y+1, r24	; 0x01
 936:	89 81       	ldd	r24, Y+1	; 0x01
 938:	88 30       	cpi	r24, 0x08	; 8
 93a:	78 f3       	brcs	.-34     	; 0x91a <LCD_voidDrawCustomChar+0x2e>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
	}
}
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	cf 91       	pop	r28
 946:	df 91       	pop	r29
 948:	08 95       	ret

0000094a <LCD_voidWriteCustomChar>:

extern void LCD_voidWriteCustomChar(u8 u8IndexCpy ,u8 u8XPositionCpy,u8 u8YPositionCpy)
{
 94a:	df 93       	push	r29
 94c:	cf 93       	push	r28
 94e:	00 d0       	rcall	.+0      	; 0x950 <LCD_voidWriteCustomChar+0x6>
 950:	0f 92       	push	r0
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	89 83       	std	Y+1, r24	; 0x01
 958:	6a 83       	std	Y+2, r22	; 0x02
 95a:	4b 83       	std	Y+3, r20	; 0x03
	voidWriteCmd((0x80 | (u8YPositionCpy<<6) | u8XPositionCpy));
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
 95e:	88 2f       	mov	r24, r24
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	00 24       	eor	r0, r0
 964:	96 95       	lsr	r25
 966:	87 95       	ror	r24
 968:	07 94       	ror	r0
 96a:	96 95       	lsr	r25
 96c:	87 95       	ror	r24
 96e:	07 94       	ror	r0
 970:	98 2f       	mov	r25, r24
 972:	80 2d       	mov	r24, r0
 974:	98 2f       	mov	r25, r24
 976:	90 68       	ori	r25, 0x80	; 128
 978:	8a 81       	ldd	r24, Y+2	; 0x02
 97a:	89 2b       	or	r24, r25
 97c:	0e 94 b0 03 	call	0x760	; 0x760 <voidWriteCmd>
	voidWriteData(u8IndexCpy);
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	0e 94 9f 03 	call	0x73e	; 0x73e <voidWriteData>
}
 986:	0f 90       	pop	r0
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	cf 91       	pop	r28
 98e:	df 91       	pop	r29
 990:	08 95       	ret

00000992 <UART_voidInit>:

static volatile u8 Data[20];
static u8 Currentindex=0;

void UART_voidInit(void)
{
 992:	df 93       	push	r29
 994:	cf 93       	push	r28
 996:	0f 92       	push	r0
 998:	cd b7       	in	r28, 0x3d	; 61
 99a:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRCMASK;
	/*Disable Double speed and multiprocessor communication mode*/
	UCSRA=0;
 99c:	eb e2       	ldi	r30, 0x2B	; 43
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	10 82       	st	Z, r1
	/*Choose the BaudRate and Select UBRRH register if needed*/
#if UART_BAUDRATE < 256
	UBRRL=UART_BAUDRATE;
 9a2:	e9 e2       	ldi	r30, 0x29	; 41
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	83 e3       	ldi	r24, 0x33	; 51
 9a8:	80 83       	st	Z, r24
#elif UART_BAUDRATE >= 256
	UBBR =(0b10000000 << 8) | UART_BAUDRATE;

#endif
	/*Choose the UCSRC Register*/
	SET_BIT(UCSRCMASK,7);
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	80 68       	ori	r24, 0x80	; 128
 9ae:	89 83       	std	Y+1, r24	; 0x01
	/*Choose Uart Mode*/
#if UART_MODE == UART_ASYNCH
	CLR_BIT(UCSRCMASK,6);
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	8f 7b       	andi	r24, 0xBF	; 191
 9b4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRCMASK,6);
#endif

	/*Choose Uart Parity Bit*/
#if UART_PARITY == UART_PARITY_DISABLE
	CLR_BIT(UCSRCMASK,4);
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	8f 7e       	andi	r24, 0xEF	; 239
 9ba:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRCMASK,5);
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	8f 7d       	andi	r24, 0xDF	; 223
 9c0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRCMASK,5);
#endif

	/*Choose Uart Mode*/
#if UART_STOP_NUM == UART_ONE_STOP
	CLR_BIT(UCSRCMASK,3);
 9c2:	89 81       	ldd	r24, Y+1	; 0x01
 9c4:	87 7f       	andi	r24, 0xF7	; 247
 9c6:	89 83       	std	Y+1, r24	; 0x01
#elif UART_DATA_SIZE == UART_DATA_SIZE_7
	CLR_BIT(UCSRCMASK,1);
	SET_BIT(UCSRCMASK,2);
	CLR_BIT(UCSRB,2);
#elif UART_DATA_SIZE == UART_DATA_SIZE_8
	SET_BIT(UCSRCMASK,1);
 9c8:	89 81       	ldd	r24, Y+1	; 0x01
 9ca:	82 60       	ori	r24, 0x02	; 2
 9cc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRCMASK,2);
 9ce:	89 81       	ldd	r24, Y+1	; 0x01
 9d0:	84 60       	ori	r24, 0x04	; 4
 9d2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,2);
 9d4:	aa e2       	ldi	r26, 0x2A	; 42
 9d6:	b0 e0       	ldi	r27, 0x00	; 0
 9d8:	ea e2       	ldi	r30, 0x2A	; 42
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	80 81       	ld	r24, Z
 9de:	8b 7f       	andi	r24, 0xFB	; 251
 9e0:	8c 93       	st	X, r24
#elif UART_DATA_SIZE == UART_DATA_SIZE_9
	SET_BIT(UCSRCMASK,1);
	SET_BIT(UCSRCMASK,2);
	SET_BIT(UCSRB,2);
#endif
	UCSRC=UCSRCMASK;
 9e2:	e0 e4       	ldi	r30, 0x40	; 64
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	89 81       	ldd	r24, Y+1	; 0x01
 9e8:	80 83       	st	Z, r24

	/*Enable the transmiter and the receiver*/
	UCSRB=0b00011000;
 9ea:	ea e2       	ldi	r30, 0x2A	; 42
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	88 e1       	ldi	r24, 0x18	; 24
 9f0:	80 83       	st	Z, r24
}
 9f2:	0f 90       	pop	r0
 9f4:	cf 91       	pop	r28
 9f6:	df 91       	pop	r29
 9f8:	08 95       	ret

000009fa <UART_voidSend>:
void UART_voidSend(u8 Data)
{
 9fa:	df 93       	push	r29
 9fc:	cf 93       	push	r28
 9fe:	0f 92       	push	r0
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
 a04:	89 83       	std	Y+1, r24	; 0x01
	UDR=Data;
 a06:	ec e2       	ldi	r30, 0x2C	; 44
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	89 81       	ldd	r24, Y+1	; 0x01
 a0c:	80 83       	st	Z, r24
	/*Check that the last transmit is complete*/
	while(GET_BIT(UCSRA,6) == 0);
 a0e:	eb e2       	ldi	r30, 0x2B	; 43
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	88 2f       	mov	r24, r24
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	80 74       	andi	r24, 0x40	; 64
 a1a:	90 70       	andi	r25, 0x00	; 0
 a1c:	08 2e       	mov	r0, r24
 a1e:	89 2f       	mov	r24, r25
 a20:	00 0c       	add	r0, r0
 a22:	88 1f       	adc	r24, r24
 a24:	99 0b       	sbc	r25, r25
 a26:	00 0c       	add	r0, r0
 a28:	88 1f       	adc	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	00 97       	sbiw	r24, 0x00	; 0
 a2e:	79 f3       	breq	.-34     	; 0xa0e <UART_voidSend+0x14>
	/*clear this bit by software*/
	SET_BIT(UCSRA,6);
 a30:	ab e2       	ldi	r26, 0x2B	; 43
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	eb e2       	ldi	r30, 0x2B	; 43
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	80 81       	ld	r24, Z
 a3a:	80 64       	ori	r24, 0x40	; 64
 a3c:	8c 93       	st	X, r24
}
 a3e:	0f 90       	pop	r0
 a40:	cf 91       	pop	r28
 a42:	df 91       	pop	r29
 a44:	08 95       	ret

00000a46 <UART_u8ReceivePolling>:

u8 UART_u8ReceivePolling(void)
{
 a46:	df 93       	push	r29
 a48:	cf 93       	push	r28
 a4a:	cd b7       	in	r28, 0x3d	; 61
 a4c:	de b7       	in	r29, 0x3e	; 62
	/*check that there a new byte to read*/
	while(GET_BIT(UCSRA,7) == 0);
 a4e:	eb e2       	ldi	r30, 0x2B	; 43
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	88 1f       	adc	r24, r24
 a56:	88 27       	eor	r24, r24
 a58:	88 1f       	adc	r24, r24
 a5a:	88 2f       	mov	r24, r24
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	90 70       	andi	r25, 0x00	; 0
 a60:	00 97       	sbiw	r24, 0x00	; 0
 a62:	a9 f3       	breq	.-22     	; 0xa4e <UART_u8ReceivePolling+0x8>
	return UDR;
 a64:	ec e2       	ldi	r30, 0x2C	; 44
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
}
 a6a:	cf 91       	pop	r28
 a6c:	df 91       	pop	r29
 a6e:	08 95       	ret

00000a70 <UART_EnableRecieveInterrupt>:

void UART_EnableRecieveInterrupt(void)
{
 a70:	df 93       	push	r29
 a72:	cf 93       	push	r28
 a74:	cd b7       	in	r28, 0x3d	; 61
 a76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,7);
 a78:	aa e2       	ldi	r26, 0x2A	; 42
 a7a:	b0 e0       	ldi	r27, 0x00	; 0
 a7c:	ea e2       	ldi	r30, 0x2A	; 42
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	80 81       	ld	r24, Z
 a82:	80 68       	ori	r24, 0x80	; 128
 a84:	8c 93       	st	X, r24
}
 a86:	cf 91       	pop	r28
 a88:	df 91       	pop	r29
 a8a:	08 95       	ret

00000a8c <UART_DisableRecieveInterrupt>:

void UART_DisableRecieveInterrupt(void)
{
 a8c:	df 93       	push	r29
 a8e:	cf 93       	push	r28
 a90:	cd b7       	in	r28, 0x3d	; 61
 a92:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,7);
 a94:	aa e2       	ldi	r26, 0x2A	; 42
 a96:	b0 e0       	ldi	r27, 0x00	; 0
 a98:	ea e2       	ldi	r30, 0x2A	; 42
 a9a:	f0 e0       	ldi	r31, 0x00	; 0
 a9c:	80 81       	ld	r24, Z
 a9e:	8f 77       	andi	r24, 0x7F	; 127
 aa0:	8c 93       	st	X, r24
}
 aa2:	cf 91       	pop	r28
 aa4:	df 91       	pop	r29
 aa6:	08 95       	ret

00000aa8 <Uart_Receive>:


void Uart_Receive(u8 * data, u16 * len)
{
 aa8:	df 93       	push	r29
 aaa:	cf 93       	push	r28
 aac:	00 d0       	rcall	.+0      	; 0xaae <Uart_Receive+0x6>
 aae:	00 d0       	rcall	.+0      	; 0xab0 <Uart_Receive+0x8>
 ab0:	00 d0       	rcall	.+0      	; 0xab2 <Uart_Receive+0xa>
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62
 ab6:	9c 83       	std	Y+4, r25	; 0x04
 ab8:	8b 83       	std	Y+3, r24	; 0x03
 aba:	7e 83       	std	Y+6, r23	; 0x06
 abc:	6d 83       	std	Y+5, r22	; 0x05
	u16 i;
	CLR_BIT(UCSRB,7); // disable receive interrupt
 abe:	aa e2       	ldi	r26, 0x2A	; 42
 ac0:	b0 e0       	ldi	r27, 0x00	; 0
 ac2:	ea e2       	ldi	r30, 0x2A	; 42
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	80 81       	ld	r24, Z
 ac8:	8f 77       	andi	r24, 0x7F	; 127
 aca:	8c 93       	st	X, r24
	for(i=0;i<Currentindex;i++)
 acc:	1a 82       	std	Y+2, r1	; 0x02
 ace:	19 82       	std	Y+1, r1	; 0x01
 ad0:	13 c0       	rjmp	.+38     	; 0xaf8 <Uart_Receive+0x50>
	{
		data[i]=Data[i];
 ad2:	2b 81       	ldd	r18, Y+3	; 0x03
 ad4:	3c 81       	ldd	r19, Y+4	; 0x04
 ad6:	89 81       	ldd	r24, Y+1	; 0x01
 ad8:	9a 81       	ldd	r25, Y+2	; 0x02
 ada:	d9 01       	movw	r26, r18
 adc:	a8 0f       	add	r26, r24
 ade:	b9 1f       	adc	r27, r25
 ae0:	89 81       	ldd	r24, Y+1	; 0x01
 ae2:	9a 81       	ldd	r25, Y+2	; 0x02
 ae4:	fc 01       	movw	r30, r24
 ae6:	e5 59       	subi	r30, 0x95	; 149
 ae8:	ff 4f       	sbci	r31, 0xFF	; 255
 aea:	80 81       	ld	r24, Z
 aec:	8c 93       	st	X, r24

void Uart_Receive(u8 * data, u16 * len)
{
	u16 i;
	CLR_BIT(UCSRB,7); // disable receive interrupt
	for(i=0;i<Currentindex;i++)
 aee:	89 81       	ldd	r24, Y+1	; 0x01
 af0:	9a 81       	ldd	r25, Y+2	; 0x02
 af2:	01 96       	adiw	r24, 0x01	; 1
 af4:	9a 83       	std	Y+2, r25	; 0x02
 af6:	89 83       	std	Y+1, r24	; 0x01
 af8:	80 91 6a 00 	lds	r24, 0x006A
 afc:	28 2f       	mov	r18, r24
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	89 81       	ldd	r24, Y+1	; 0x01
 b02:	9a 81       	ldd	r25, Y+2	; 0x02
 b04:	82 17       	cp	r24, r18
 b06:	93 07       	cpc	r25, r19
 b08:	20 f3       	brcs	.-56     	; 0xad2 <Uart_Receive+0x2a>
	{
		data[i]=Data[i];
	}
	*len=Currentindex;
 b0a:	80 91 6a 00 	lds	r24, 0x006A
 b0e:	88 2f       	mov	r24, r24
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	ed 81       	ldd	r30, Y+5	; 0x05
 b14:	fe 81       	ldd	r31, Y+6	; 0x06
 b16:	91 83       	std	Z+1, r25	; 0x01
 b18:	80 83       	st	Z, r24
	Currentindex=0;
 b1a:	10 92 6a 00 	sts	0x006A, r1
	SET_BIT(UCSRB,7); // enable receive interrupt
 b1e:	aa e2       	ldi	r26, 0x2A	; 42
 b20:	b0 e0       	ldi	r27, 0x00	; 0
 b22:	ea e2       	ldi	r30, 0x2A	; 42
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	80 81       	ld	r24, Z
 b28:	80 68       	ori	r24, 0x80	; 128
 b2a:	8c 93       	st	X, r24
}
 b2c:	26 96       	adiw	r28, 0x06	; 6
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	f8 94       	cli
 b32:	de bf       	out	0x3e, r29	; 62
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	cd bf       	out	0x3d, r28	; 61
 b38:	cf 91       	pop	r28
 b3a:	df 91       	pop	r29
 b3c:	08 95       	ret

00000b3e <__vector_13>:

void __vector_13 (void)__attribute__((signal,used));
void __vector_13 (void)
{
 b3e:	1f 92       	push	r1
 b40:	0f 92       	push	r0
 b42:	0f b6       	in	r0, 0x3f	; 63
 b44:	0f 92       	push	r0
 b46:	11 24       	eor	r1, r1
 b48:	2f 93       	push	r18
 b4a:	8f 93       	push	r24
 b4c:	9f 93       	push	r25
 b4e:	ef 93       	push	r30
 b50:	ff 93       	push	r31
 b52:	df 93       	push	r29
 b54:	cf 93       	push	r28
 b56:	cd b7       	in	r28, 0x3d	; 61
 b58:	de b7       	in	r29, 0x3e	; 62
	Data[Currentindex]=UDR;
 b5a:	80 91 6a 00 	lds	r24, 0x006A
 b5e:	88 2f       	mov	r24, r24
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	ec e2       	ldi	r30, 0x2C	; 44
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	20 81       	ld	r18, Z
 b68:	fc 01       	movw	r30, r24
 b6a:	e5 59       	subi	r30, 0x95	; 149
 b6c:	ff 4f       	sbci	r31, 0xFF	; 255
 b6e:	20 83       	st	Z, r18
	Currentindex++;
 b70:	80 91 6a 00 	lds	r24, 0x006A
 b74:	8f 5f       	subi	r24, 0xFF	; 255
 b76:	80 93 6a 00 	sts	0x006A, r24
}
 b7a:	cf 91       	pop	r28
 b7c:	df 91       	pop	r29
 b7e:	ff 91       	pop	r31
 b80:	ef 91       	pop	r30
 b82:	9f 91       	pop	r25
 b84:	8f 91       	pop	r24
 b86:	2f 91       	pop	r18
 b88:	0f 90       	pop	r0
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	0f 90       	pop	r0
 b8e:	1f 90       	pop	r1
 b90:	18 95       	reti

00000b92 <UART_H_sendCommand>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "UART.h"

void UART_H_sendCommand(u8 * StringPtr)
{
 b92:	df 93       	push	r29
 b94:	cf 93       	push	r28
 b96:	00 d0       	rcall	.+0      	; 0xb98 <UART_H_sendCommand+0x6>
 b98:	cd b7       	in	r28, 0x3d	; 61
 b9a:	de b7       	in	r29, 0x3e	; 62
 b9c:	9a 83       	std	Y+2, r25	; 0x02
 b9e:	89 83       	std	Y+1, r24	; 0x01
 ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <UART_H_sendCommand+0x24>
	while(*StringPtr)
	{
		UART_voidSend(*StringPtr);
 ba2:	e9 81       	ldd	r30, Y+1	; 0x01
 ba4:	fa 81       	ldd	r31, Y+2	; 0x02
 ba6:	80 81       	ld	r24, Z
 ba8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <UART_voidSend>
		StringPtr++;
 bac:	89 81       	ldd	r24, Y+1	; 0x01
 bae:	9a 81       	ldd	r25, Y+2	; 0x02
 bb0:	01 96       	adiw	r24, 0x01	; 1
 bb2:	9a 83       	std	Y+2, r25	; 0x02
 bb4:	89 83       	std	Y+1, r24	; 0x01
#include "BIT_MATH.h"
#include "UART.h"

void UART_H_sendCommand(u8 * StringPtr)
{
	while(*StringPtr)
 bb6:	e9 81       	ldd	r30, Y+1	; 0x01
 bb8:	fa 81       	ldd	r31, Y+2	; 0x02
 bba:	80 81       	ld	r24, Z
 bbc:	88 23       	and	r24, r24
 bbe:	89 f7       	brne	.-30     	; 0xba2 <UART_H_sendCommand+0x10>
	{
		UART_voidSend(*StringPtr);
		StringPtr++;
	}
}
 bc0:	0f 90       	pop	r0
 bc2:	0f 90       	pop	r0
 bc4:	cf 91       	pop	r28
 bc6:	df 91       	pop	r29
 bc8:	08 95       	ret

00000bca <main>:
#include "UART.h"
#include "UART_H.h"
#include "LCD_int.h"
#include "KEYPAD_int.h"
void main (void)
{
 bca:	df 93       	push	r29
 bcc:	cf 93       	push	r28
 bce:	cd b7       	in	r28, 0x3d	; 61
 bd0:	de b7       	in	r29, 0x3e	; 62
 bd2:	2b 97       	sbiw	r28, 0x0b	; 11
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
	u8 Data[1];
	u16 Len;
	u16 KeypadReturn;
	u8 presskey=0;
 bde:	1c 82       	std	Y+4, r1	; 0x04
	s8 pressedIndex=-1;
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	8b 83       	std	Y+3, r24	; 0x03
	u8 arrayTosend [2];
	DIO_voidInitialize();
 be4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_8,DIO_u8_HIGH);
 be8:	88 e0       	ldi	r24, 0x08	; 8
 bea:	60 e0       	ldi	r22, 0x00	; 0
 bec:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_9,DIO_u8_HIGH);
 bf0:	89 e0       	ldi	r24, 0x09	; 9
 bf2:	60 e0       	ldi	r22, 0x00	; 0
 bf4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_10,DIO_u8_HIGH);
 bf8:	8a e0       	ldi	r24, 0x0A	; 10
 bfa:	60 e0       	ldi	r22, 0x00	; 0
 bfc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_11,DIO_u8_HIGH);
 c00:	8b e0       	ldi	r24, 0x0B	; 11
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	LCD_voidInitialize();
 c08:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_voidInitialize>
	UART_voidInit();
 c0c:	0e 94 c9 04 	call	0x992	; 0x992 <UART_voidInit>
	UART_EnableRecieveInterrupt();
 c10:	0e 94 38 05 	call	0xa70	; 0xa70 <UART_EnableRecieveInterrupt>
	GIE_EnableGlobalInterrupt();
 c14:	0e 94 85 02 	call	0x50a	; 0x50a <GIE_EnableGlobalInterrupt>
	while(1)
	{
		KeypadReturn=KEYPAD_u16GetStatus();
 c18:	0e 94 a1 02 	call	0x542	; 0x542 <KEYPAD_u16GetStatus>
 c1c:	9e 83       	std	Y+6, r25	; 0x06
 c1e:	8d 83       	std	Y+5, r24	; 0x05
		for(u8 i=0;i<16 && (!presskey);i++)
 c20:	1a 82       	std	Y+2, r1	; 0x02
 c22:	23 c0       	rjmp	.+70     	; 0xc6a <main+0xa0>
		{
			if(GET_BIT(KeypadReturn,i))
 c24:	8a 81       	ldd	r24, Y+2	; 0x02
 c26:	28 2f       	mov	r18, r24
 c28:	30 e0       	ldi	r19, 0x00	; 0
 c2a:	81 e0       	ldi	r24, 0x01	; 1
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <main+0x6a>
 c30:	88 0f       	add	r24, r24
 c32:	99 1f       	adc	r25, r25
 c34:	2a 95       	dec	r18
 c36:	e2 f7       	brpl	.-8      	; 0xc30 <main+0x66>
 c38:	9c 01       	movw	r18, r24
 c3a:	8d 81       	ldd	r24, Y+5	; 0x05
 c3c:	9e 81       	ldd	r25, Y+6	; 0x06
 c3e:	28 23       	and	r18, r24
 c40:	39 23       	and	r19, r25
 c42:	8a 81       	ldd	r24, Y+2	; 0x02
 c44:	88 2f       	mov	r24, r24
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	a9 01       	movw	r20, r18
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <main+0x86>
 c4c:	56 95       	lsr	r21
 c4e:	47 95       	ror	r20
 c50:	8a 95       	dec	r24
 c52:	e2 f7       	brpl	.-8      	; 0xc4c <main+0x82>
 c54:	ca 01       	movw	r24, r20
 c56:	00 97       	sbiw	r24, 0x00	; 0
 c58:	29 f0       	breq	.+10     	; 0xc64 <main+0x9a>
			{
				presskey=1;
 c5a:	81 e0       	ldi	r24, 0x01	; 1
 c5c:	8c 83       	std	Y+4, r24	; 0x04
				pressedIndex=i+1;
 c5e:	8a 81       	ldd	r24, Y+2	; 0x02
 c60:	8f 5f       	subi	r24, 0xFF	; 255
 c62:	8b 83       	std	Y+3, r24	; 0x03
	UART_EnableRecieveInterrupt();
	GIE_EnableGlobalInterrupt();
	while(1)
	{
		KeypadReturn=KEYPAD_u16GetStatus();
		for(u8 i=0;i<16 && (!presskey);i++)
 c64:	8a 81       	ldd	r24, Y+2	; 0x02
 c66:	8f 5f       	subi	r24, 0xFF	; 255
 c68:	8a 83       	std	Y+2, r24	; 0x02
 c6a:	8a 81       	ldd	r24, Y+2	; 0x02
 c6c:	80 31       	cpi	r24, 0x10	; 16
 c6e:	18 f4       	brcc	.+6      	; 0xc76 <main+0xac>
 c70:	8c 81       	ldd	r24, Y+4	; 0x04
 c72:	88 23       	and	r24, r24
 c74:	b9 f2       	breq	.-82     	; 0xc24 <main+0x5a>
			{
				presskey=1;
				pressedIndex=i+1;
			}
		}
		if(pressedIndex > 0)
 c76:	8b 81       	ldd	r24, Y+3	; 0x03
 c78:	18 16       	cp	r1, r24
 c7a:	ac f5       	brge	.+106    	; 0xce6 <main+0x11c>
		{
			u8 i;
			if(pressedIndex >9)
 c7c:	8b 81       	ldd	r24, Y+3	; 0x03
 c7e:	8a 30       	cpi	r24, 0x0A	; 10
 c80:	1c f0       	brlt	.+6      	; 0xc88 <main+0xbe>
			{
				i=1;
 c82:	81 e0       	ldi	r24, 0x01	; 1
 c84:	89 83       	std	Y+1, r24	; 0x01
 c86:	23 c0       	rjmp	.+70     	; 0xcce <main+0x104>
			}
			else
			{
				i=0;
 c88:	19 82       	std	Y+1, r1	; 0x01
 c8a:	21 c0       	rjmp	.+66     	; 0xcce <main+0x104>
			}
			while(pressedIndex)
			{
				arrayTosend[i]=(pressedIndex % 10)+'0';
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
 c8e:	48 2f       	mov	r20, r24
 c90:	50 e0       	ldi	r21, 0x00	; 0
 c92:	8b 81       	ldd	r24, Y+3	; 0x03
 c94:	9a e0       	ldi	r25, 0x0A	; 10
 c96:	69 2f       	mov	r22, r25
 c98:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__divmodqi4>
 c9c:	89 2f       	mov	r24, r25
 c9e:	28 2f       	mov	r18, r24
 ca0:	20 5d       	subi	r18, 0xD0	; 208
 ca2:	ce 01       	movw	r24, r28
 ca4:	0a 96       	adiw	r24, 0x0a	; 10
 ca6:	fc 01       	movw	r30, r24
 ca8:	e4 0f       	add	r30, r20
 caa:	f5 1f       	adc	r31, r21
 cac:	20 83       	st	Z, r18
				if(pressedIndex >9)
 cae:	8b 81       	ldd	r24, Y+3	; 0x03
 cb0:	8a 30       	cpi	r24, 0x0A	; 10
 cb2:	24 f0       	brlt	.+8      	; 0xcbc <main+0xf2>
				{
					i--;
 cb4:	89 81       	ldd	r24, Y+1	; 0x01
 cb6:	81 50       	subi	r24, 0x01	; 1
 cb8:	89 83       	std	Y+1, r24	; 0x01
 cba:	03 c0       	rjmp	.+6      	; 0xcc2 <main+0xf8>
				}
				else
				{
					i++;
 cbc:	89 81       	ldd	r24, Y+1	; 0x01
 cbe:	8f 5f       	subi	r24, 0xFF	; 255
 cc0:	89 83       	std	Y+1, r24	; 0x01
				}
				pressedIndex /=10;
 cc2:	8b 81       	ldd	r24, Y+3	; 0x03
 cc4:	9a e0       	ldi	r25, 0x0A	; 10
 cc6:	69 2f       	mov	r22, r25
 cc8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__divmodqi4>
 ccc:	8b 83       	std	Y+3, r24	; 0x03
			}
			else
			{
				i=0;
			}
			while(pressedIndex)
 cce:	8b 81       	ldd	r24, Y+3	; 0x03
 cd0:	88 23       	and	r24, r24
 cd2:	e1 f6       	brne	.-72     	; 0xc8c <main+0xc2>
				{
					i++;
				}
				pressedIndex /=10;
			}
			UART_H_sendCommand(arrayTosend);
 cd4:	ce 01       	movw	r24, r28
 cd6:	0a 96       	adiw	r24, 0x0a	; 10
 cd8:	0e 94 c9 05 	call	0xb92	; 0xb92 <UART_H_sendCommand>
			pressedIndex=-1;
 cdc:	8f ef       	ldi	r24, 0xFF	; 255
 cde:	8b 83       	std	Y+3, r24	; 0x03
			presskey=0;
 ce0:	1c 82       	std	Y+4, r1	; 0x04
			arrayTosend[0]='\0';
 ce2:	1a 86       	std	Y+10, r1	; 0x0a
			arrayTosend[1]='\0';
 ce4:	1b 86       	std	Y+11, r1	; 0x0b
		}
		Uart_Receive(Data,&Len);
 ce6:	ce 01       	movw	r24, r28
 ce8:	07 96       	adiw	r24, 0x07	; 7
 cea:	9e 01       	movw	r18, r28
 cec:	28 5f       	subi	r18, 0xF8	; 248
 cee:	3f 4f       	sbci	r19, 0xFF	; 255
 cf0:	b9 01       	movw	r22, r18
 cf2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Uart_Receive>
		if(Len == 1)
 cf6:	88 85       	ldd	r24, Y+8	; 0x08
 cf8:	99 85       	ldd	r25, Y+9	; 0x09
 cfa:	81 30       	cpi	r24, 0x01	; 1
 cfc:	91 05       	cpc	r25, r1
 cfe:	39 f4       	brne	.+14     	; 0xd0e <main+0x144>
		{
			Data[1]='\0';
 d00:	18 86       	std	Y+8, r1	; 0x08
			LCD_voidWriteStringCurrentPosition(Data);
 d02:	ce 01       	movw	r24, r28
 d04:	07 96       	adiw	r24, 0x07	; 7
 d06:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_voidWriteStringCurrentPosition>
			Len=0;
 d0a:	19 86       	std	Y+9, r1	; 0x09
 d0c:	18 86       	std	Y+8, r1	; 0x08
		}
		Delay_ms(50);
 d0e:	62 e3       	ldi	r22, 0x32	; 50
 d10:	70 e0       	ldi	r23, 0x00	; 0
 d12:	80 e0       	ldi	r24, 0x00	; 0
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
 d1a:	7e cf       	rjmp	.-260    	; 0xc18 <main+0x4e>

00000d1c <__mulsi3>:
 d1c:	62 9f       	mul	r22, r18
 d1e:	d0 01       	movw	r26, r0
 d20:	73 9f       	mul	r23, r19
 d22:	f0 01       	movw	r30, r0
 d24:	82 9f       	mul	r24, r18
 d26:	e0 0d       	add	r30, r0
 d28:	f1 1d       	adc	r31, r1
 d2a:	64 9f       	mul	r22, r20
 d2c:	e0 0d       	add	r30, r0
 d2e:	f1 1d       	adc	r31, r1
 d30:	92 9f       	mul	r25, r18
 d32:	f0 0d       	add	r31, r0
 d34:	83 9f       	mul	r24, r19
 d36:	f0 0d       	add	r31, r0
 d38:	74 9f       	mul	r23, r20
 d3a:	f0 0d       	add	r31, r0
 d3c:	65 9f       	mul	r22, r21
 d3e:	f0 0d       	add	r31, r0
 d40:	99 27       	eor	r25, r25
 d42:	72 9f       	mul	r23, r18
 d44:	b0 0d       	add	r27, r0
 d46:	e1 1d       	adc	r30, r1
 d48:	f9 1f       	adc	r31, r25
 d4a:	63 9f       	mul	r22, r19
 d4c:	b0 0d       	add	r27, r0
 d4e:	e1 1d       	adc	r30, r1
 d50:	f9 1f       	adc	r31, r25
 d52:	bd 01       	movw	r22, r26
 d54:	cf 01       	movw	r24, r30
 d56:	11 24       	eor	r1, r1
 d58:	08 95       	ret

00000d5a <__divmodqi4>:
 d5a:	87 fb       	bst	r24, 7
 d5c:	08 2e       	mov	r0, r24
 d5e:	06 26       	eor	r0, r22
 d60:	87 fd       	sbrc	r24, 7
 d62:	81 95       	neg	r24
 d64:	67 fd       	sbrc	r22, 7
 d66:	61 95       	neg	r22
 d68:	27 d0       	rcall	.+78     	; 0xdb8 <__udivmodqi4>
 d6a:	0e f4       	brtc	.+2      	; 0xd6e <__divmodqi4_1>
 d6c:	91 95       	neg	r25

00000d6e <__divmodqi4_1>:
 d6e:	07 fc       	sbrc	r0, 7
 d70:	81 95       	neg	r24

00000d72 <__divmodqi4_exit>:
 d72:	08 95       	ret

00000d74 <__udivmodsi4>:
 d74:	a1 e2       	ldi	r26, 0x21	; 33
 d76:	1a 2e       	mov	r1, r26
 d78:	aa 1b       	sub	r26, r26
 d7a:	bb 1b       	sub	r27, r27
 d7c:	fd 01       	movw	r30, r26
 d7e:	0d c0       	rjmp	.+26     	; 0xd9a <__udivmodsi4_ep>

00000d80 <__udivmodsi4_loop>:
 d80:	aa 1f       	adc	r26, r26
 d82:	bb 1f       	adc	r27, r27
 d84:	ee 1f       	adc	r30, r30
 d86:	ff 1f       	adc	r31, r31
 d88:	a2 17       	cp	r26, r18
 d8a:	b3 07       	cpc	r27, r19
 d8c:	e4 07       	cpc	r30, r20
 d8e:	f5 07       	cpc	r31, r21
 d90:	20 f0       	brcs	.+8      	; 0xd9a <__udivmodsi4_ep>
 d92:	a2 1b       	sub	r26, r18
 d94:	b3 0b       	sbc	r27, r19
 d96:	e4 0b       	sbc	r30, r20
 d98:	f5 0b       	sbc	r31, r21

00000d9a <__udivmodsi4_ep>:
 d9a:	66 1f       	adc	r22, r22
 d9c:	77 1f       	adc	r23, r23
 d9e:	88 1f       	adc	r24, r24
 da0:	99 1f       	adc	r25, r25
 da2:	1a 94       	dec	r1
 da4:	69 f7       	brne	.-38     	; 0xd80 <__udivmodsi4_loop>
 da6:	60 95       	com	r22
 da8:	70 95       	com	r23
 daa:	80 95       	com	r24
 dac:	90 95       	com	r25
 dae:	9b 01       	movw	r18, r22
 db0:	ac 01       	movw	r20, r24
 db2:	bd 01       	movw	r22, r26
 db4:	cf 01       	movw	r24, r30
 db6:	08 95       	ret

00000db8 <__udivmodqi4>:
 db8:	99 1b       	sub	r25, r25
 dba:	79 e0       	ldi	r23, 0x09	; 9
 dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <__udivmodqi4_ep>

00000dbe <__udivmodqi4_loop>:
 dbe:	99 1f       	adc	r25, r25
 dc0:	96 17       	cp	r25, r22
 dc2:	08 f0       	brcs	.+2      	; 0xdc6 <__udivmodqi4_ep>
 dc4:	96 1b       	sub	r25, r22

00000dc6 <__udivmodqi4_ep>:
 dc6:	88 1f       	adc	r24, r24
 dc8:	7a 95       	dec	r23
 dca:	c9 f7       	brne	.-14     	; 0xdbe <__udivmodqi4_loop>
 dcc:	80 95       	com	r24
 dce:	08 95       	ret

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
