
smsma.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000011c4  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004ac  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 11 03 	call	0x622	; 0x622 <main>
  64:	0c 94 66 05 	jmp	0xacc	; 0xacc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2c 97       	sbiw	r28, 0x0c	; 12
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	69 87       	std	Y+9, r22	; 0x09
  82:	7a 87       	std	Y+10, r23	; 0x0a
  84:	8b 87       	std	Y+11, r24	; 0x0b
  86:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  88:	89 85       	ldd	r24, Y+9	; 0x09
  8a:	9a 85       	ldd	r25, Y+10	; 0x0a
  8c:	ab 85       	ldd	r26, Y+11	; 0x0b
  8e:	bc 85       	ldd	r27, Y+12	; 0x0c
  90:	22 e7       	ldi	r18, 0x72	; 114
  92:	31 e0       	ldi	r19, 0x01	; 1
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	bc 01       	movw	r22, r24
  9a:	cd 01       	movw	r24, r26
  9c:	0e 94 25 05 	call	0xa4a	; 0xa4a <__mulsi3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	89 83       	std	Y+1, r24	; 0x01
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	ab 83       	std	Y+3, r26	; 0x03
  aa:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  ac:	1d 82       	std	Y+5, r1	; 0x05
  ae:	1e 82       	std	Y+6, r1	; 0x06
  b0:	1f 82       	std	Y+7, r1	; 0x07
  b2:	18 86       	std	Y+8, r1	; 0x08
  b4:	0c c0       	rjmp	.+24     	; 0xce <Delay_ms+0x62>
	{
		asm("nop");
  b6:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  b8:	8d 81       	ldd	r24, Y+5	; 0x05
  ba:	9e 81       	ldd	r25, Y+6	; 0x06
  bc:	af 81       	ldd	r26, Y+7	; 0x07
  be:	b8 85       	ldd	r27, Y+8	; 0x08
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	8d 83       	std	Y+5, r24	; 0x05
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	af 83       	std	Y+7, r26	; 0x07
  cc:	b8 87       	std	Y+8, r27	; 0x08
  ce:	2d 81       	ldd	r18, Y+5	; 0x05
  d0:	3e 81       	ldd	r19, Y+6	; 0x06
  d2:	4f 81       	ldd	r20, Y+7	; 0x07
  d4:	58 85       	ldd	r21, Y+8	; 0x08
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	ab 81       	ldd	r26, Y+3	; 0x03
  dc:	bc 81       	ldd	r27, Y+4	; 0x04
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	4a 07       	cpc	r20, r26
  e4:	5b 07       	cpc	r21, r27
  e6:	38 f3       	brcs	.-50     	; 0xb6 <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  e8:	2c 96       	adiw	r28, 0x0c	; 12
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <Delay_us>:
void Delay_us(u32 DelayValue)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2c 97       	sbiw	r28, 0x0c	; 12
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	69 87       	std	Y+9, r22	; 0x09
 110:	7a 87       	std	Y+10, r23	; 0x0a
 112:	8b 87       	std	Y+11, r24	; 0x0b
 114:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	ab 85       	ldd	r26, Y+11	; 0x0b
 11c:	bc 85       	ldd	r27, Y+12	; 0x0c
 11e:	27 e7       	ldi	r18, 0x77	; 119
 120:	31 e0       	ldi	r19, 0x01	; 1
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	bc 01       	movw	r22, r24
 128:	cd 01       	movw	r24, r26
 12a:	0e 94 25 05 	call	0xa4a	; 0xa4a <__mulsi3>
 12e:	dc 01       	movw	r26, r24
 130:	cb 01       	movw	r24, r22
 132:	89 5d       	subi	r24, 0xD9	; 217
 134:	94 44       	sbci	r25, 0x44	; 68
 136:	a0 40       	sbci	r26, 0x00	; 0
 138:	b0 40       	sbci	r27, 0x00	; 0
 13a:	28 ee       	ldi	r18, 0xE8	; 232
 13c:	33 e0       	ldi	r19, 0x03	; 3
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	0e 94 44 05 	call	0xa88	; 0xa88 <__udivmodsi4>
 14a:	da 01       	movw	r26, r20
 14c:	c9 01       	movw	r24, r18
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	ab 83       	std	Y+3, r26	; 0x03
 154:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 156:	1d 82       	std	Y+5, r1	; 0x05
 158:	1e 82       	std	Y+6, r1	; 0x06
 15a:	1f 82       	std	Y+7, r1	; 0x07
 15c:	18 86       	std	Y+8, r1	; 0x08
 15e:	0c c0       	rjmp	.+24     	; 0x178 <Delay_us+0x7e>
	{
		asm("nop");
 160:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 162:	8d 81       	ldd	r24, Y+5	; 0x05
 164:	9e 81       	ldd	r25, Y+6	; 0x06
 166:	af 81       	ldd	r26, Y+7	; 0x07
 168:	b8 85       	ldd	r27, Y+8	; 0x08
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	a1 1d       	adc	r26, r1
 16e:	b1 1d       	adc	r27, r1
 170:	8d 83       	std	Y+5, r24	; 0x05
 172:	9e 83       	std	Y+6, r25	; 0x06
 174:	af 83       	std	Y+7, r26	; 0x07
 176:	b8 87       	std	Y+8, r27	; 0x08
 178:	2d 81       	ldd	r18, Y+5	; 0x05
 17a:	3e 81       	ldd	r19, Y+6	; 0x06
 17c:	4f 81       	ldd	r20, Y+7	; 0x07
 17e:	58 85       	ldd	r21, Y+8	; 0x08
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	ab 81       	ldd	r26, Y+3	; 0x03
 186:	bc 81       	ldd	r27, Y+4	; 0x04
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	4a 07       	cpc	r20, r26
 18e:	5b 07       	cpc	r21, r27
 190:	38 f3       	brcs	.-50     	; 0x160 <Delay_us+0x66>
	{
		asm("nop");
	}
 192:	2c 96       	adiw	r28, 0x0c	; 12
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1ac:	ea e3       	ldi	r30, 0x3A	; 58
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	10 82       	st	Z, r1
	DDRB = DIO_u8_PORTB_DIRECTION;
 1b2:	e7 e3       	ldi	r30, 0x37	; 55
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	87 e0       	ldi	r24, 0x07	; 7
 1b8:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1ba:	e4 e3       	ldi	r30, 0x34	; 52
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	10 82       	st	Z, r1
	DDRD = DIO_u8_PORTD_DIRECTION;
 1c0:	e1 e3       	ldi	r30, 0x31	; 49
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	80 83       	st	Z, r24
}
 1c8:	cf 91       	pop	r28
 1ca:	df 91       	pop	r29
 1cc:	08 95       	ret

000001ce <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1ce:	df 93       	push	r29
 1d0:	cf 93       	push	r28
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <DIO_voidSetPinValue+0x6>
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	88 30       	cpi	r24, 0x08	; 8
 1e0:	60 f5       	brcc	.+88     	; 0x23a <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	88 23       	and	r24, r24
 1e6:	a1 f4       	brne	.+40     	; 0x210 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 1e8:	ab e3       	ldi	r26, 0x3B	; 59
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	eb e3       	ldi	r30, 0x3B	; 59
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	48 2f       	mov	r20, r24
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 2e       	mov	r0, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinValue+0x38>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinValue+0x34>
 20a:	84 2b       	or	r24, r20
 20c:	8c 93       	st	X, r24
 20e:	b3 c0       	rjmp	.+358    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 210:	ab e3       	ldi	r26, 0x3B	; 59
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	eb e3       	ldi	r30, 0x3B	; 59
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	48 2f       	mov	r20, r24
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinValue+0x60>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinValue+0x5c>
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	8c 93       	st	X, r24
 238:	9e c0       	rjmp	.+316    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	88 30       	cpi	r24, 0x08	; 8
 23e:	90 f1       	brcs	.+100    	; 0x2a4 <DIO_voidSetPinValue+0xd6>
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	80 31       	cpi	r24, 0x10	; 16
 244:	78 f5       	brcc	.+94     	; 0x2a4 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	88 50       	subi	r24, 0x08	; 8
 24a:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	88 23       	and	r24, r24
 250:	a1 f4       	brne	.+40     	; 0x27a <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 252:	a8 e3       	ldi	r26, 0x38	; 56
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e8 e3       	ldi	r30, 0x38	; 56
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	48 2f       	mov	r20, r24
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_voidSetPinValue+0xa2>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_voidSetPinValue+0x9e>
 274:	84 2b       	or	r24, r20
 276:	8c 93       	st	X, r24
 278:	7e c0       	rjmp	.+252    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 27a:	a8 e3       	ldi	r26, 0x38	; 56
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e8 e3       	ldi	r30, 0x38	; 56
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	48 2f       	mov	r20, r24
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPinValue+0xca>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPinValue+0xc6>
 29c:	80 95       	com	r24
 29e:	84 23       	and	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	69 c0       	rjmp	.+210    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	80 31       	cpi	r24, 0x10	; 16
 2a8:	90 f1       	brcs	.+100    	; 0x30e <DIO_voidSetPinValue+0x140>
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	88 31       	cpi	r24, 0x18	; 24
 2ae:	78 f5       	brcc	.+94     	; 0x30e <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	80 51       	subi	r24, 0x10	; 16
 2b4:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2b6:	8a 81       	ldd	r24, Y+2	; 0x02
 2b8:	88 23       	and	r24, r24
 2ba:	a1 f4       	brne	.+40     	; 0x2e4 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2bc:	a5 e3       	ldi	r26, 0x35	; 53
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	e5 e3       	ldi	r30, 0x35	; 53
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 2e       	mov	r0, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_voidSetPinValue+0x10c>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_voidSetPinValue+0x108>
 2de:	84 2b       	or	r24, r20
 2e0:	8c 93       	st	X, r24
 2e2:	49 c0       	rjmp	.+146    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e3       	ldi	r30, 0x35	; 53
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_voidSetPinValue+0x134>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_voidSetPinValue+0x130>
 306:	80 95       	com	r24
 308:	84 23       	and	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	34 c0       	rjmp	.+104    	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	88 31       	cpi	r24, 0x18	; 24
 312:	88 f1       	brcs	.+98     	; 0x376 <DIO_voidSetPinValue+0x1a8>
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	80 32       	cpi	r24, 0x20	; 32
 318:	70 f5       	brcc	.+92     	; 0x376 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	88 51       	subi	r24, 0x18	; 24
 31e:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	88 23       	and	r24, r24
 324:	a1 f4       	brne	.+40     	; 0x34e <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 326:	a2 e3       	ldi	r26, 0x32	; 50
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e2 e3       	ldi	r30, 0x32	; 50
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	48 2f       	mov	r20, r24
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 2e       	mov	r0, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_voidSetPinValue+0x176>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_voidSetPinValue+0x172>
 348:	84 2b       	or	r24, r20
 34a:	8c 93       	st	X, r24
 34c:	14 c0       	rjmp	.+40     	; 0x376 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 34e:	a2 e3       	ldi	r26, 0x32	; 50
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e2 e3       	ldi	r30, 0x32	; 50
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_voidSetPinValue+0x19e>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_voidSetPinValue+0x19a>
 370:	80 95       	com	r24
 372:	84 23       	and	r24, r20
 374:	8c 93       	st	X, r24
		}			
	}
}
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
 388:	62 e3       	ldi	r22, 0x32	; 50
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
	/*Write Function Set command*/
	LCD_voidWriteCmd(0b00110000 | (LCD_u8_FONT<<2) | (LCD_u8_NUM_OF_LINES<<3));
 394:	88 e3       	ldi	r24, 0x38	; 56
 396:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>

	Delay_us(100);
 39a:	64 e6       	ldi	r22, 0x64	; 100
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 7d 00 	call	0xfa	; 0xfa <Delay_us>

	/*Write Display on command*/
	LCD_voidWriteCmd(0b00001000 | (LCD_u8_BLINK_ON_OFF<<1) | (LCD_u8_CURSOR_ON_OFF<<2) | (LCD_u8_DISPLAY_ON_OFF<<3));
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>

	Delay_us(100);
 3ac:	64 e6       	ldi	r22, 0x64	; 100
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 7d 00 	call	0xfa	; 0xfa <Delay_us>

	/*Write command clear display*/
	LCD_voidWriteCmd(0b00000001);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>

	Delay_ms(2);
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
}
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <LCD_voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
extern void LCD_voidWriteData(u8 u8DataCpy)
{
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	0f 92       	push	r0
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
 3dc:	88 e0       	ldi	r24, 0x08	; 8
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	0e 94 0a 02 	call	0x414	; 0x414 <voidLcdExecute>
}
 3ea:	0f 90       	pop	r0
 3ec:	cf 91       	pop	r28
 3ee:	df 91       	pop	r29
 3f0:	08 95       	ret

000003f2 <LCD_voidWriteCmd>:
/*********************************************/
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
extern void LCD_voidWriteCmd(u8 u8CommandCpy)
{
 3f2:	df 93       	push	r29
 3f4:	cf 93       	push	r28
 3f6:	0f 92       	push	r0
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
 3fe:	88 e0       	ldi	r24, 0x08	; 8
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	0e 94 0a 02 	call	0x414	; 0x414 <voidLcdExecute>
}
 40c:	0f 90       	pop	r0
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	08 95       	ret

00000414 <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	0f 92       	push	r0
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	89 83       	std	Y+1, r24	; 0x01
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
 420:	89 e0       	ldi	r24, 0x09	; 9
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	if(GET_BIT(u8ValueCpy,0))
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	81 70       	andi	r24, 0x01	; 1
 430:	90 70       	andi	r25, 0x00	; 0
 432:	88 23       	and	r24, r24
 434:	29 f0       	breq	.+10     	; 0x440 <voidLcdExecute+0x2c>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_0,DIO_u8_HIGH);
 436:	88 e1       	ldi	r24, 0x18	; 24
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
 43e:	04 c0       	rjmp	.+8      	; 0x448 <voidLcdExecute+0x34>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_0,DIO_u8_LOW);
 440:	88 e1       	ldi	r24, 0x18	; 24
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,1))
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	88 2f       	mov	r24, r24
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	82 70       	andi	r24, 0x02	; 2
 450:	90 70       	andi	r25, 0x00	; 0
 452:	95 95       	asr	r25
 454:	87 95       	ror	r24
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	29 f0       	breq	.+10     	; 0x464 <voidLcdExecute+0x50>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_1,DIO_u8_HIGH);
 45a:	89 e1       	ldi	r24, 0x19	; 25
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
 462:	04 c0       	rjmp	.+8      	; 0x46c <voidLcdExecute+0x58>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_1,DIO_u8_LOW);
 464:	89 e1       	ldi	r24, 0x19	; 25
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,2))
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	88 2f       	mov	r24, r24
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	84 70       	andi	r24, 0x04	; 4
 474:	90 70       	andi	r25, 0x00	; 0
 476:	95 95       	asr	r25
 478:	87 95       	ror	r24
 47a:	95 95       	asr	r25
 47c:	87 95       	ror	r24
 47e:	00 97       	sbiw	r24, 0x00	; 0
 480:	29 f0       	breq	.+10     	; 0x48c <voidLcdExecute+0x78>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_2,DIO_u8_HIGH);
 482:	8a e1       	ldi	r24, 0x1A	; 26
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
 48a:	04 c0       	rjmp	.+8      	; 0x494 <voidLcdExecute+0x80>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_2,DIO_u8_LOW);
 48c:	8a e1       	ldi	r24, 0x1A	; 26
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,3))
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	88 2f       	mov	r24, r24
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	88 70       	andi	r24, 0x08	; 8
 49c:	90 70       	andi	r25, 0x00	; 0
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	95 95       	asr	r25
 4a4:	87 95       	ror	r24
 4a6:	95 95       	asr	r25
 4a8:	87 95       	ror	r24
 4aa:	00 97       	sbiw	r24, 0x00	; 0
 4ac:	29 f0       	breq	.+10     	; 0x4b8 <voidLcdExecute+0xa4>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_3,DIO_u8_HIGH);
 4ae:	8b e1       	ldi	r24, 0x1B	; 27
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <voidLcdExecute+0xac>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_3,DIO_u8_LOW);
 4b8:	8b e1       	ldi	r24, 0x1B	; 27
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,4))
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	80 71       	andi	r24, 0x10	; 16
 4c8:	90 70       	andi	r25, 0x00	; 0
 4ca:	95 95       	asr	r25
 4cc:	87 95       	ror	r24
 4ce:	95 95       	asr	r25
 4d0:	87 95       	ror	r24
 4d2:	95 95       	asr	r25
 4d4:	87 95       	ror	r24
 4d6:	95 95       	asr	r25
 4d8:	87 95       	ror	r24
 4da:	00 97       	sbiw	r24, 0x00	; 0
 4dc:	29 f0       	breq	.+10     	; 0x4e8 <voidLcdExecute+0xd4>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_4,DIO_u8_HIGH);
 4de:	8c e1       	ldi	r24, 0x1C	; 28
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <voidLcdExecute+0xdc>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_4,DIO_u8_LOW);
 4e8:	8c e1       	ldi	r24, 0x1C	; 28
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,5))
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	80 72       	andi	r24, 0x20	; 32
 4f8:	90 70       	andi	r25, 0x00	; 0
 4fa:	95 95       	asr	r25
 4fc:	87 95       	ror	r24
 4fe:	95 95       	asr	r25
 500:	87 95       	ror	r24
 502:	95 95       	asr	r25
 504:	87 95       	ror	r24
 506:	95 95       	asr	r25
 508:	87 95       	ror	r24
 50a:	95 95       	asr	r25
 50c:	87 95       	ror	r24
 50e:	00 97       	sbiw	r24, 0x00	; 0
 510:	29 f0       	breq	.+10     	; 0x51c <voidLcdExecute+0x108>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_5,DIO_u8_HIGH);
 512:	8d e1       	ldi	r24, 0x1D	; 29
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
 51a:	04 c0       	rjmp	.+8      	; 0x524 <voidLcdExecute+0x110>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_5,DIO_u8_LOW);
 51c:	8d e1       	ldi	r24, 0x1D	; 29
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,6))
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	88 2f       	mov	r24, r24
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	80 74       	andi	r24, 0x40	; 64
 52c:	90 70       	andi	r25, 0x00	; 0
 52e:	08 2e       	mov	r0, r24
 530:	89 2f       	mov	r24, r25
 532:	00 0c       	add	r0, r0
 534:	88 1f       	adc	r24, r24
 536:	99 0b       	sbc	r25, r25
 538:	00 0c       	add	r0, r0
 53a:	88 1f       	adc	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	29 f0       	breq	.+10     	; 0x54c <voidLcdExecute+0x138>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_6,DIO_u8_HIGH);
 542:	8e e1       	ldi	r24, 0x1E	; 30
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
 54a:	04 c0       	rjmp	.+8      	; 0x554 <voidLcdExecute+0x140>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_6,DIO_u8_LOW);
 54c:	8e e1       	ldi	r24, 0x1E	; 30
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	}

	if(GET_BIT(u8ValueCpy,7))
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	88 1f       	adc	r24, r24
 558:	88 27       	eor	r24, r24
 55a:	88 1f       	adc	r24, r24
 55c:	88 2f       	mov	r24, r24
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	90 70       	andi	r25, 0x00	; 0
 562:	00 97       	sbiw	r24, 0x00	; 0
 564:	29 f0       	breq	.+10     	; 0x570 <voidLcdExecute+0x15c>
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_7,DIO_u8_HIGH);
 566:	8f e1       	ldi	r24, 0x1F	; 31
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
 56e:	04 c0       	rjmp	.+8      	; 0x578 <voidLcdExecute+0x164>
	}
	else
	{
		DIO_voidSetPinValue(LCD_u8_DATA_PIN_7,DIO_u8_LOW);
 570:	8f e1       	ldi	r24, 0x1F	; 31
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
 578:	8a e0       	ldi	r24, 0x0A	; 10
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_us(100);
 580:	64 e6       	ldi	r22, 0x64	; 100
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 7d 00 	call	0xfa	; 0xfa <Delay_us>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
 58c:	8a e0       	ldi	r24, 0x0A	; 10
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_voidSetPinValue>
}
 594:	0f 90       	pop	r0
 596:	cf 91       	pop	r28
 598:	df 91       	pop	r29
 59a:	08 95       	ret

0000059c <LCD_voidWriteString>:


extern void LCD_voidWriteString(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
 59c:	df 93       	push	r29
 59e:	cf 93       	push	r28
 5a0:	00 d0       	rcall	.+0      	; 0x5a2 <LCD_voidWriteString+0x6>
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <LCD_voidWriteString+0x8>
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	9a 83       	std	Y+2, r25	; 0x02
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	6b 83       	std	Y+3, r22	; 0x03
 5ae:	4c 83       	std	Y+4, r20	; 0x04
	LCD_voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
 5b0:	8c 81       	ldd	r24, Y+4	; 0x04
 5b2:	88 2f       	mov	r24, r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	00 24       	eor	r0, r0
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	07 94       	ror	r0
 5be:	96 95       	lsr	r25
 5c0:	87 95       	ror	r24
 5c2:	07 94       	ror	r0
 5c4:	98 2f       	mov	r25, r24
 5c6:	80 2d       	mov	r24, r0
 5c8:	98 2f       	mov	r25, r24
 5ca:	90 68       	ori	r25, 0x80	; 128
 5cc:	8b 81       	ldd	r24, Y+3	; 0x03
 5ce:	89 2b       	or	r24, r25
 5d0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>
 5d4:	0a c0       	rjmp	.+20     	; 0x5ea <LCD_voidWriteString+0x4e>
	while(*u8PtrCpy)
	{
		LCD_voidWriteData(*u8PtrCpy);
 5d6:	e9 81       	ldd	r30, Y+1	; 0x01
 5d8:	fa 81       	ldd	r31, Y+2	; 0x02
 5da:	80 81       	ld	r24, Z
 5dc:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		u8PtrCpy++;
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	9a 81       	ldd	r25, Y+2	; 0x02
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	9a 83       	std	Y+2, r25	; 0x02
 5e8:	89 83       	std	Y+1, r24	; 0x01


extern void LCD_voidWriteString(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
	LCD_voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
	while(*u8PtrCpy)
 5ea:	e9 81       	ldd	r30, Y+1	; 0x01
 5ec:	fa 81       	ldd	r31, Y+2	; 0x02
 5ee:	80 81       	ld	r24, Z
 5f0:	88 23       	and	r24, r24
 5f2:	89 f7       	brne	.-30     	; 0x5d6 <LCD_voidWriteString+0x3a>
	{
		LCD_voidWriteData(*u8PtrCpy);
		u8PtrCpy++;
	}
}
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	cf 91       	pop	r28
 5fe:	df 91       	pop	r29
 600:	08 95       	ret

00000602 <LCD_voidClearDisplay>:

extern void LCD_voidClearDisplay(void)
{
 602:	df 93       	push	r29
 604:	cf 93       	push	r28
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCmd(0b00000001);
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>
	Delay_us(1500);
 610:	6c ed       	ldi	r22, 0xDC	; 220
 612:	75 e0       	ldi	r23, 0x05	; 5
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 7d 00 	call	0xfa	; 0xfa <Delay_us>
}
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <main>:
#include "STD_TYPES.h"
#include "DELAY.h"
#include "DIO_int.h"
#include "LCD_int.h"
void main (void)
{
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 62a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_voidInitialize>
	LCD_voidInitialize();
 62e:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_voidInitialize>
	LCD_voidWriteCmd(0b01000000);
 632:	80 e4       	ldi	r24, 0x40	; 64
 634:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>

	LCD_voidWriteData(17);
 638:	81 e1       	ldi	r24, 0x11	; 17
 63a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(10);
 63e:	8a e0       	ldi	r24, 0x0A	; 10
 640:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(31);
 644:	8f e1       	ldi	r24, 0x1F	; 31
 646:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(27);
 64a:	8b e1       	ldi	r24, 0x1B	; 27
 64c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(17);
 650:	81 e1       	ldi	r24, 0x11	; 17
 652:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(31);
 656:	8f e1       	ldi	r24, 0x1F	; 31
 658:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(0);
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(0);
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>

	LCD_voidWriteData(21);
 668:	85 e1       	ldi	r24, 0x15	; 21
 66a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(10);
 66e:	8a e0       	ldi	r24, 0x0A	; 10
 670:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(31);
 674:	8f e1       	ldi	r24, 0x1F	; 31
 676:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(27);
 67a:	8b e1       	ldi	r24, 0x1B	; 27
 67c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(17);
 680:	81 e1       	ldi	r24, 0x11	; 17
 682:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(31);
 686:	8f e1       	ldi	r24, 0x1F	; 31
 688:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(10);
 68c:	8a e0       	ldi	r24, 0x0A	; 10
 68e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteData(31);
 692:	8f e1       	ldi	r24, 0x1F	; 31
 694:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>

	LCD_voidWriteData(0);
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteCmd(0b10001110);
 69e:	8e e8       	ldi	r24, 0x8E	; 142
 6a0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>
	LCD_voidWriteData(1);
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteCmd(0b10001101);
 6aa:	8d e8       	ldi	r24, 0x8D	; 141
 6ac:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>
	LCD_voidWriteData(2);
 6b0:	82 e0       	ldi	r24, 0x02	; 2
 6b2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
	LCD_voidWriteCmd(0b10001100);
 6b6:	8c e8       	ldi	r24, 0x8C	; 140
 6b8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>
	LCD_voidWriteData(3);
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>



	while(1)
	{
		LCD_voidInitialize();
 6c2:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_voidInitialize>
		LCD_voidWriteCmd(0b10000000);
 6c6:	80 e8       	ldi	r24, 0x80	; 128
 6c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteCmd>
		LCD_voidWriteData(0);
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 6d2:	8f ef       	ldi	r24, 0xFF	; 255
 6d4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 6de:	8f ef       	ldi	r24, 0xFF	; 255
 6e0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 6ea:	8f ef       	ldi	r24, 0xFF	; 255
 6ec:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 6fc:	68 ee       	ldi	r22, 0xE8	; 232
 6fe:	73 e0       	ldi	r23, 0x03	; 3
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
		LCD_voidClearDisplay();
 708:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 70c:	8e ef       	ldi	r24, 0xFE	; 254
 70e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 724:	8f ef       	ldi	r24, 0xFF	; 255
 726:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 73c:	68 ee       	ldi	r22, 0xE8	; 232
 73e:	73 e0       	ldi	r23, 0x03	; 3
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 748:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 74c:	8e ef       	ldi	r24, 0xFE	; 254
 74e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 764:	8f ef       	ldi	r24, 0xFF	; 255
 766:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 76a:	8f ef       	ldi	r24, 0xFF	; 255
 76c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 770:	8f ef       	ldi	r24, 0xFF	; 255
 772:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 77c:	68 ee       	ldi	r22, 0xE8	; 232
 77e:	73 e0       	ldi	r23, 0x03	; 3
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 788:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 78c:	8e ef       	ldi	r24, 0xFE	; 254
 78e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 798:	8f ef       	ldi	r24, 0xFF	; 255
 79a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 7bc:	68 ee       	ldi	r22, 0xE8	; 232
 7be:	73 e0       	ldi	r23, 0x03	; 3
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 7c8:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 7cc:	8e ef       	ldi	r24, 0xFE	; 254
 7ce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7d2:	8f ef       	ldi	r24, 0xFF	; 255
 7d4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7ea:	8f ef       	ldi	r24, 0xFF	; 255
 7ec:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 7f6:	8f ef       	ldi	r24, 0xFF	; 255
 7f8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 7fc:	68 ee       	ldi	r22, 0xE8	; 232
 7fe:	73 e0       	ldi	r23, 0x03	; 3
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 808:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 80c:	8e ef       	ldi	r24, 0xFE	; 254
 80e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 83c:	68 ee       	ldi	r22, 0xE8	; 232
 83e:	73 e0       	ldi	r23, 0x03	; 3
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 848:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 84c:	8e ef       	ldi	r24, 0xFE	; 254
 84e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 864:	8f ef       	ldi	r24, 0xFF	; 255
 866:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 87c:	68 ee       	ldi	r22, 0xE8	; 232
 87e:	73 e0       	ldi	r23, 0x03	; 3
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 888:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 88c:	8e ef       	ldi	r24, 0xFE	; 254
 88e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 898:	8f ef       	ldi	r24, 0xFF	; 255
 89a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8b0:	8f ef       	ldi	r24, 0xFF	; 255
 8b2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 8bc:	68 ee       	ldi	r22, 0xE8	; 232
 8be:	73 e0       	ldi	r23, 0x03	; 3
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 8c8:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 8cc:	8e ef       	ldi	r24, 0xFE	; 254
 8ce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8d2:	8f ef       	ldi	r24, 0xFF	; 255
 8d4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8ea:	8f ef       	ldi	r24, 0xFF	; 255
 8ec:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 8fc:	68 ee       	ldi	r22, 0xE8	; 232
 8fe:	73 e0       	ldi	r23, 0x03	; 3
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 908:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 90c:	8e ef       	ldi	r24, 0xFE	; 254
 90e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 930:	8f ef       	ldi	r24, 0xFF	; 255
 932:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 93c:	68 ee       	ldi	r22, 0xE8	; 232
 93e:	73 e0       	ldi	r23, 0x03	; 3
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 948:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 94c:	8e ef       	ldi	r24, 0xFE	; 254
 94e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 958:	8f ef       	ldi	r24, 0xFF	; 255
 95a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 96a:	8f ef       	ldi	r24, 0xFF	; 255
 96c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 97c:	68 ee       	ldi	r22, 0xE8	; 232
 97e:	73 e0       	ldi	r23, 0x03	; 3
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 988:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 98c:	8e ef       	ldi	r24, 0xFE	; 254
 98e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 992:	8f ef       	ldi	r24, 0xFF	; 255
 994:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 998:	8f ef       	ldi	r24, 0xFF	; 255
 99a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9aa:	8f ef       	ldi	r24, 0xFF	; 255
 9ac:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 9bc:	68 ee       	ldi	r22, 0xE8	; 232
 9be:	73 e0       	ldi	r23, 0x03	; 3
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 9c8:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 9cc:	8e ef       	ldi	r24, 0xFE	; 254
 9ce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9de:	8f ef       	ldi	r24, 0xFF	; 255
 9e0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9e4:	8f ef       	ldi	r24, 0xFF	; 255
 9e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9ea:	8f ef       	ldi	r24, 0xFF	; 255
 9ec:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9f0:	8f ef       	ldi	r24, 0xFF	; 255
 9f2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 9fc:	68 ee       	ldi	r22, 0xE8	; 232
 9fe:	73 e0       	ldi	r23, 0x03	; 3
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>

		LCD_voidClearDisplay();
 a08:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidWriteData(0xfe);
 a0c:	8e ef       	ldi	r24, 0xFE	; 254
 a0e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(1);
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 a1e:	8f ef       	ldi	r24, 0xFF	; 255
 a20:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 a2a:	8f ef       	ldi	r24, 0xFF	; 255
 a2c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 a30:	8f ef       	ldi	r24, 0xFF	; 255
 a32:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		LCD_voidWriteData(0xff);
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_voidWriteData>
		Delay_ms(1000);
 a3c:	68 ee       	ldi	r22, 0xE8	; 232
 a3e:	73 e0       	ldi	r23, 0x03	; 3
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
 a48:	3c ce       	rjmp	.-904    	; 0x6c2 <main+0xa0>

00000a4a <__mulsi3>:
 a4a:	62 9f       	mul	r22, r18
 a4c:	d0 01       	movw	r26, r0
 a4e:	73 9f       	mul	r23, r19
 a50:	f0 01       	movw	r30, r0
 a52:	82 9f       	mul	r24, r18
 a54:	e0 0d       	add	r30, r0
 a56:	f1 1d       	adc	r31, r1
 a58:	64 9f       	mul	r22, r20
 a5a:	e0 0d       	add	r30, r0
 a5c:	f1 1d       	adc	r31, r1
 a5e:	92 9f       	mul	r25, r18
 a60:	f0 0d       	add	r31, r0
 a62:	83 9f       	mul	r24, r19
 a64:	f0 0d       	add	r31, r0
 a66:	74 9f       	mul	r23, r20
 a68:	f0 0d       	add	r31, r0
 a6a:	65 9f       	mul	r22, r21
 a6c:	f0 0d       	add	r31, r0
 a6e:	99 27       	eor	r25, r25
 a70:	72 9f       	mul	r23, r18
 a72:	b0 0d       	add	r27, r0
 a74:	e1 1d       	adc	r30, r1
 a76:	f9 1f       	adc	r31, r25
 a78:	63 9f       	mul	r22, r19
 a7a:	b0 0d       	add	r27, r0
 a7c:	e1 1d       	adc	r30, r1
 a7e:	f9 1f       	adc	r31, r25
 a80:	bd 01       	movw	r22, r26
 a82:	cf 01       	movw	r24, r30
 a84:	11 24       	eor	r1, r1
 a86:	08 95       	ret

00000a88 <__udivmodsi4>:
 a88:	a1 e2       	ldi	r26, 0x21	; 33
 a8a:	1a 2e       	mov	r1, r26
 a8c:	aa 1b       	sub	r26, r26
 a8e:	bb 1b       	sub	r27, r27
 a90:	fd 01       	movw	r30, r26
 a92:	0d c0       	rjmp	.+26     	; 0xaae <__udivmodsi4_ep>

00000a94 <__udivmodsi4_loop>:
 a94:	aa 1f       	adc	r26, r26
 a96:	bb 1f       	adc	r27, r27
 a98:	ee 1f       	adc	r30, r30
 a9a:	ff 1f       	adc	r31, r31
 a9c:	a2 17       	cp	r26, r18
 a9e:	b3 07       	cpc	r27, r19
 aa0:	e4 07       	cpc	r30, r20
 aa2:	f5 07       	cpc	r31, r21
 aa4:	20 f0       	brcs	.+8      	; 0xaae <__udivmodsi4_ep>
 aa6:	a2 1b       	sub	r26, r18
 aa8:	b3 0b       	sbc	r27, r19
 aaa:	e4 0b       	sbc	r30, r20
 aac:	f5 0b       	sbc	r31, r21

00000aae <__udivmodsi4_ep>:
 aae:	66 1f       	adc	r22, r22
 ab0:	77 1f       	adc	r23, r23
 ab2:	88 1f       	adc	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	1a 94       	dec	r1
 ab8:	69 f7       	brne	.-38     	; 0xa94 <__udivmodsi4_loop>
 aba:	60 95       	com	r22
 abc:	70 95       	com	r23
 abe:	80 95       	com	r24
 ac0:	90 95       	com	r25
 ac2:	9b 01       	movw	r18, r22
 ac4:	ac 01       	movw	r20, r24
 ac6:	bd 01       	movw	r22, r26
 ac8:	cf 01       	movw	r24, r30
 aca:	08 95       	ret

00000acc <_exit>:
 acc:	f8 94       	cli

00000ace <__stop_program>:
 ace:	ff cf       	rjmp	.-2      	; 0xace <__stop_program>
