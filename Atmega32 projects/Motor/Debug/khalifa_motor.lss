
khalifa_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000bc4  00000c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  00000c5a  2**0
                  ALLOC
  3 .stab         00001434  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007fb  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_10>
  2c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8a 04 	call	0x914	; 0x914 <main>
  8a:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	69 87       	std	Y+9, r22	; 0x09
  a8:	7a 87       	std	Y+10, r23	; 0x0a
  aa:	8b 87       	std	Y+11, r24	; 0x0b
  ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	ab 85       	ldd	r26, Y+11	; 0x0b
  b4:	bc 85       	ldd	r27, Y+12	; 0x0c
  b6:	22 e7       	ldi	r18, 0x72	; 114
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__mulsi3>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
  dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  de:	8d 81       	ldd	r24, Y+5	; 0x05
  e0:	9e 81       	ldd	r25, Y+6	; 0x06
  e2:	af 81       	ldd	r26, Y+7	; 0x07
  e4:	b8 85       	ldd	r27, Y+8	; 0x08
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	8d 83       	std	Y+5, r24	; 0x05
  ee:	9e 83       	std	Y+6, r25	; 0x06
  f0:	af 83       	std	Y+7, r26	; 0x07
  f2:	b8 87       	std	Y+8, r27	; 0x08
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	4f 81       	ldd	r20, Y+7	; 0x07
  fa:	58 85       	ldd	r21, Y+8	; 0x08
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	ab 81       	ldd	r26, Y+3	; 0x03
 102:	bc 81       	ldd	r27, Y+4	; 0x04
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	4a 07       	cpc	r20, r26
 10a:	5b 07       	cpc	r21, r27
 10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
 10e:	2c 96       	adiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2c 97       	sbiw	r28, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	69 87       	std	Y+9, r22	; 0x09
 136:	7a 87       	std	Y+10, r23	; 0x0a
 138:	8b 87       	std	Y+11, r24	; 0x0b
 13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	27 e7       	ldi	r18, 0x77	; 119
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__mulsi3>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	89 5d       	subi	r24, 0xD9	; 217
 15a:	94 44       	sbci	r25, 0x44	; 68
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	b0 40       	sbci	r27, 0x00	; 0
 160:	28 ee       	ldi	r18, 0xE8	; 232
 162:	33 e0       	ldi	r19, 0x03	; 3
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	bc 01       	movw	r22, r24
 16a:	cd 01       	movw	r24, r26
 16c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__udivmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	ab 83       	std	Y+3, r26	; 0x03
 17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 17c:	1d 82       	std	Y+5, r1	; 0x05
 17e:	1e 82       	std	Y+6, r1	; 0x06
 180:	1f 82       	std	Y+7, r1	; 0x07
 182:	18 86       	std	Y+8, r1	; 0x08
 184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
 186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	af 81       	ldd	r26, Y+7	; 0x07
 18e:	b8 85       	ldd	r27, Y+8	; 0x08
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	a1 1d       	adc	r26, r1
 194:	b1 1d       	adc	r27, r1
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	4f 81       	ldd	r20, Y+7	; 0x07
 1a4:	58 85       	ldd	r21, Y+8	; 0x08
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	4a 07       	cpc	r20, r26
 1b4:	5b 07       	cpc	r21, r27
 1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
 1b8:	2c 96       	adiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1e2:	e4 e3       	ldi	r30, 0x34	; 52
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1ea:	e1 e3       	ldi	r30, 0x31	; 49
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8a ef       	ldi	r24, 0xFA	; 250
 1f0:	80 83       	st	Z, r24
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_voidSetPinValue+0x6>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 30       	cpi	r24, 0x08	; 8
 20a:	60 f5       	brcc	.+88     	; 0x264 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	88 23       	and	r24, r24
 210:	a1 f4       	brne	.+40     	; 0x23a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 212:	ab e3       	ldi	r26, 0x3B	; 59
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x38>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x34>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	b3 c0       	rjmp	.+358    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 23a:	ab e3       	ldi	r26, 0x3B	; 59
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	eb e3       	ldi	r30, 0x3B	; 59
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0x60>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0x5c>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	9e c0       	rjmp	.+316    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	90 f1       	brcs	.+100    	; 0x2ce <DIO_voidSetPinValue+0xd6>
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	80 31       	cpi	r24, 0x10	; 16
 26e:	78 f5       	brcc	.+94     	; 0x2ce <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 50       	subi	r24, 0x08	; 8
 274:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	88 23       	and	r24, r24
 27a:	a1 f4       	brne	.+40     	; 0x2a4 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 27c:	a8 e3       	ldi	r26, 0x38	; 56
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e8 e3       	ldi	r30, 0x38	; 56
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xa2>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0x9e>
 29e:	84 2b       	or	r24, r20
 2a0:	8c 93       	st	X, r24
 2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 2a4:	a8 e3       	ldi	r26, 0x38	; 56
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e8 e3       	ldi	r30, 0x38	; 56
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinValue+0xca>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinValue+0xc6>
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 31       	cpi	r24, 0x10	; 16
 2d2:	90 f1       	brcs	.+100    	; 0x338 <DIO_voidSetPinValue+0x140>
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 31       	cpi	r24, 0x18	; 24
 2d8:	78 f5       	brcc	.+94     	; 0x338 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	80 51       	subi	r24, 0x10	; 16
 2de:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	88 23       	and	r24, r24
 2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2e6:	a5 e3       	ldi	r26, 0x35	; 53
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e5 e3       	ldi	r30, 0x35	; 53
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x10c>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x108>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	49 c0       	rjmp	.+146    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 30e:	a5 e3       	ldi	r26, 0x35	; 53
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e5 e3       	ldi	r30, 0x35	; 53
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x134>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x130>
 330:	80 95       	com	r24
 332:	84 23       	and	r24, r20
 334:	8c 93       	st	X, r24
 336:	34 c0       	rjmp	.+104    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	70 f5       	brcc	.+92     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	88 51       	subi	r24, 0x18	; 24
 348:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 23       	and	r24, r24
 34e:	a1 f4       	brne	.+40     	; 0x378 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 350:	a2 e3       	ldi	r26, 0x32	; 50
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e2 e3       	ldi	r30, 0x32	; 50
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x176>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x172>
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	14 c0       	rjmp	.+40     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 378:	a2 e3       	ldi	r26, 0x32	; 50
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e2 e3       	ldi	r30, 0x32	; 50
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x19e>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x19a>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	8c 93       	st	X, r24
		}			
	}
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8GetPinValue+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	00 f5       	brcc	.+64     	; 0x3fe <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 3c2:	e9 e3       	ldi	r30, 0x39	; 57
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8GetPinValue+0x32>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	2a 95       	dec	r18
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8GetPinValue+0x2e>
 3e0:	9a 01       	movw	r18, r20
 3e2:	28 23       	and	r18, r24
 3e4:	39 23       	and	r19, r25
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPinValue+0x4a>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPinValue+0x46>
 3f8:	ca 01       	movw	r24, r20
 3fa:	8a 83       	std	Y+2, r24	; 0x02
 3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 3fe:	8c 81       	ldd	r24, Y+4	; 0x04
 400:	88 30       	cpi	r24, 0x08	; 8
 402:	20 f1       	brcs	.+72     	; 0x44c <DIO_u8GetPinValue+0xa2>
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	80 31       	cpi	r24, 0x10	; 16
 408:	08 f5       	brcc	.+66     	; 0x44c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	88 50       	subi	r24, 0x08	; 8
 40e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 410:	e6 e3       	ldi	r30, 0x36	; 54
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8GetPinValue+0x80>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	2a 95       	dec	r18
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8GetPinValue+0x7c>
 42e:	9a 01       	movw	r18, r20
 430:	28 23       	and	r18, r24
 432:	39 23       	and	r19, r25
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a9 01       	movw	r20, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0x98>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0x94>
 446:	ca 01       	movw	r24, r20
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	4d c0       	rjmp	.+154    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	80 31       	cpi	r24, 0x10	; 16
 450:	20 f1       	brcs	.+72     	; 0x49a <DIO_u8GetPinValue+0xf0>
 452:	8c 81       	ldd	r24, Y+4	; 0x04
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	08 f5       	brcc	.+66     	; 0x49a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	80 51       	subi	r24, 0x10	; 16
 45c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 45e:	e6 e3       	ldi	r30, 0x36	; 54
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8GetPinValue+0xce>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8GetPinValue+0xca>
 47c:	9a 01       	movw	r18, r20
 47e:	28 23       	and	r18, r24
 480:	39 23       	and	r19, r25
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a9 01       	movw	r20, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8GetPinValue+0xe6>
 48c:	55 95       	asr	r21
 48e:	47 95       	ror	r20
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8GetPinValue+0xe2>
 494:	ca 01       	movw	r24, r20
 496:	8a 83       	std	Y+2, r24	; 0x02
 498:	26 c0       	rjmp	.+76     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	88 31       	cpi	r24, 0x18	; 24
 49e:	18 f1       	brcs	.+70     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	80 32       	cpi	r24, 0x20	; 32
 4a4:	00 f5       	brcc	.+64     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	88 51       	subi	r24, 0x18	; 24
 4aa:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 4ac:	e0 e3       	ldi	r30, 0x30	; 48
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0x11c>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	2a 95       	dec	r18
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0x118>
 4ca:	9a 01       	movw	r18, r20
 4cc:	28 23       	and	r18, r24
 4ce:	39 23       	and	r19, r25
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a9 01       	movw	r20, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8GetPinValue+0x134>
 4da:	55 95       	asr	r21
 4dc:	47 95       	ror	r20
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8GetPinValue+0x130>
 4e2:	ca 01       	movw	r24, r20
 4e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	88 23       	and	r24, r24
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	08 95       	ret

0000050a <EXTI_voidInit>:
#include"EXTI_config.h"
#include "EXTI_int.h"
/*this function shall intialize the EXTI and*/
/*Set its ooperation initially disabled*/
void EXTI_voidInit(void)
{
 50a:	df 93       	push	r29
 50c:	cf 93       	push	r28
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXTI_u8_MODE == EXTI_u8_LOW_LEVEL
	CLR_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
#elif EXTI_u8_MODE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCR,0);
 512:	a5 e5       	ldi	r26, 0x55	; 85
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	e5 e5       	ldi	r30, 0x55	; 85
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	8e 7f       	andi	r24, 0xFE	; 254
 51e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
 520:	a5 e5       	ldi	r26, 0x55	; 85
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	e5 e5       	ldi	r30, 0x55	; 85
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	8c 93       	st	X, r24
#elif EXTI_u8_MODE == EXTI_u8_RAISING_EDGE
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#endif
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
 52e:	ab e5       	ldi	r26, 0x5B	; 91
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	eb e5       	ldi	r30, 0x5B	; 91
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	8f 7b       	andi	r24, 0xBF	; 191
 53a:	8c 93       	st	X, r24

	/*Clear Flag*/
	SET_BIT(GIFR,6);
 53c:	aa e5       	ldi	r26, 0x5A	; 90
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	ea e5       	ldi	r30, 0x5A	; 90
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	80 64       	ori	r24, 0x40	; 64
 548:	8c 93       	st	X, r24
}
 54a:	cf 91       	pop	r28
 54c:	df 91       	pop	r29
 54e:	08 95       	ret

00000550 <EXTI_voidSetCallback>:

/*this function shall set the callback pointer*/
/*to the recieved address*/
void EXTI_voidSetCallback(void (*ptrCpy)(void))
{
 550:	df 93       	push	r29
 552:	cf 93       	push	r28
 554:	00 d0       	rcall	.+0      	; 0x556 <EXTI_voidSetCallback+0x6>
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	9a 83       	std	Y+2, r25	; 0x02
 55c:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidCallback=ptrCpy;
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	9a 81       	ldd	r25, Y+2	; 0x02
 562:	90 93 63 00 	sts	0x0063, r25
 566:	80 93 62 00 	sts	0x0062, r24
}
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	cf 91       	pop	r28
 570:	df 91       	pop	r29
 572:	08 95       	ret

00000574 <EXTI_voidEnable>:

/*this function shall enable the external interrupt*/
void EXTI_voidEnable(void)
{
 574:	df 93       	push	r29
 576:	cf 93       	push	r28
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
 57c:	ab e5       	ldi	r26, 0x5B	; 91
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	eb e5       	ldi	r30, 0x5B	; 91
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	80 64       	ori	r24, 0x40	; 64
 588:	8c 93       	st	X, r24

}
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <EXTI_voidDisable>:

/*this function shall disable the external interrupt*/
void EXTI_voidDisable(void)
{
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
 598:	ab e5       	ldi	r26, 0x5B	; 91
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	eb e5       	ldi	r30, 0x5B	; 91
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	8f 7b       	andi	r24, 0xBF	; 191
 5a4:	8c 93       	st	X, r24

}
 5a6:	cf 91       	pop	r28
 5a8:	df 91       	pop	r29
 5aa:	08 95       	ret

000005ac <__vector_1>:

void  __vector_1  (void) __attribute__((signal,used));
void  __vector_1  (void)
{
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	0f 92       	push	r0
 5b4:	11 24       	eor	r1, r1
 5b6:	2f 93       	push	r18
 5b8:	3f 93       	push	r19
 5ba:	4f 93       	push	r20
 5bc:	5f 93       	push	r21
 5be:	6f 93       	push	r22
 5c0:	7f 93       	push	r23
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	af 93       	push	r26
 5c8:	bf 93       	push	r27
 5ca:	ef 93       	push	r30
 5cc:	ff 93       	push	r31
 5ce:	df 93       	push	r29
 5d0:	cf 93       	push	r28
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallback();
 5d6:	e0 91 62 00 	lds	r30, 0x0062
 5da:	f0 91 63 00 	lds	r31, 0x0063
 5de:	09 95       	icall
}
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	7f 91       	pop	r23
 5f2:	6f 91       	pop	r22
 5f4:	5f 91       	pop	r21
 5f6:	4f 91       	pop	r20
 5f8:	3f 91       	pop	r19
 5fa:	2f 91       	pop	r18
 5fc:	0f 90       	pop	r0
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	0f 90       	pop	r0
 602:	1f 90       	pop	r1
 604:	18 95       	reti

00000606 <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 606:	df 93       	push	r29
 608:	cf 93       	push	r28
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 60e:	af e5       	ldi	r26, 0x5F	; 95
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	ef e5       	ldi	r30, 0x5F	; 95
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	80 68       	ori	r24, 0x80	; 128
 61a:	8c 93       	st	X, r24
}
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 62a:	af e5       	ldi	r26, 0x5F	; 95
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	ef e5       	ldi	r30, 0x5F	; 95
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	8f 77       	andi	r24, 0x7F	; 127
 636:	8c 93       	st	X, r24
}
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <SWD_u8GetSwitchState>:
#include"SWD_priv.h"
#include"SWD_int.h"


u8 SWD_u8GetSwitchState(u8 u8SwIdxCpy)
{
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	00 d0       	rcall	.+0      	; 0x644 <SWD_u8GetSwitchState+0x6>
 644:	0f 92       	push	r0
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	8b 83       	std	Y+3, r24	; 0x03
	u8 DioStateLoc;
	u8 SwitchStateLoc;
	if(u8SwIdxCpy < SWD_u8_SW_NB)
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	88 23       	and	r24, r24
 650:	21 f5       	brne	.+72     	; 0x69a <SWD_u8GetSwitchState+0x5c>
	{
		DioStateLoc=DIO_u8GetPinValue(SWD_u8SwToDioLink[u8SwIdxCpy]);
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	e0 5a       	subi	r30, 0xA0	; 160
 65c:	ff 4f       	sbci	r31, 0xFF	; 255
 65e:	80 81       	ld	r24, Z
 660:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_u8GetPinValue>
 664:	8a 83       	std	Y+2, r24	; 0x02
		/*if switch state equals its open state return released*/
		if(DioStateLoc==SWD_u8SwOpenState[u8SwIdxCpy])
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	fc 01       	movw	r30, r24
 66e:	ec 59       	subi	r30, 0x9C	; 156
 670:	ff 4f       	sbci	r31, 0xFF	; 255
 672:	90 81       	ld	r25, Z
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	98 17       	cp	r25, r24
 678:	19 f4       	brne	.+6      	; 0x680 <SWD_u8GetSwitchState+0x42>
		{
			SwitchStateLoc= SWD_u8RELEASED;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	89 83       	std	Y+1, r24	; 0x01
 67e:	0e c0       	rjmp	.+28     	; 0x69c <SWD_u8GetSwitchState+0x5e>
		}
		/*if switch state not equal open state return pushed */
		else if(DioStateLoc != SWD_u8SwOpenState[u8SwIdxCpy])
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	fc 01       	movw	r30, r24
 688:	ec 59       	subi	r30, 0x9C	; 156
 68a:	ff 4f       	sbci	r31, 0xFF	; 255
 68c:	90 81       	ld	r25, Z
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	98 17       	cp	r25, r24
 692:	21 f0       	breq	.+8      	; 0x69c <SWD_u8GetSwitchState+0x5e>
		{
			SwitchStateLoc= SWD_u8PUSHED;
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	01 c0       	rjmp	.+2      	; 0x69c <SWD_u8GetSwitchState+0x5e>
		}
	}
	/* Error: returned if the number of switch isn't in the range */
	else{
		SwitchStateLoc= SWD_u8ERROR;
 69a:	19 82       	std	Y+1, r1	; 0x01
		}
	return SwitchStateLoc;
 69c:	89 81       	ldd	r24, Y+1	; 0x01
}
 69e:	0f 90       	pop	r0
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	cf 91       	pop	r28
 6a6:	df 91       	pop	r29
 6a8:	08 95       	ret

000006aa <TIM_voidInitialize>:
static void (* TIM_CallBack) (void);
static void (* TIM_CallBack_CTC) (void);

/*Description: This function shall init the Timer prephiral*/
void TIM_voidInitialize(void)
{
 6aa:	df 93       	push	r29
 6ac:	cf 93       	push	r28
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
	/*clear flag*/
	SET_BIT(TIFR,0);
 6b2:	a8 e5       	ldi	r26, 0x58	; 88
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	e8 e5       	ldi	r30, 0x58	; 88
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	81 60       	ori	r24, 0x01	; 1
 6be:	8c 93       	st	X, r24
	SET_BIT(TIFR,1);
 6c0:	a8 e5       	ldi	r26, 0x58	; 88
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	e8 e5       	ldi	r30, 0x58	; 88
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	82 60       	ori	r24, 0x02	; 2
 6cc:	8c 93       	st	X, r24
	/*disable interrupt for counting and ctc*/
	CLR_BIT(TIMSK,0);
 6ce:	a9 e5       	ldi	r26, 0x59	; 89
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	e9 e5       	ldi	r30, 0x59	; 89
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	8e 7f       	andi	r24, 0xFE	; 254
 6da:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
 6dc:	a9 e5       	ldi	r26, 0x59	; 89
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	e9 e5       	ldi	r30, 0x59	; 89
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	8d 7f       	andi	r24, 0xFD	; 253
 6e8:	8c 93       	st	X, r24
	TCNT0=TIM_u8_INIT_VALUE;
	CLR_BIT(TCCR0,3);
	CLR_BIT(TCCR0,6);
#elif TIM_u8_MODE== TIM_u8_CTC_MODE
#if TIM_u8_MODE_CTC == TIM_u8_CTC_NORMAL
	CLR_BIT(TCCR0,4);
 6ea:	a3 e5       	ldi	r26, 0x53	; 83
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e3 e5       	ldi	r30, 0x53	; 83
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	8f 7e       	andi	r24, 0xEF	; 239
 6f6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
 6f8:	a3 e5       	ldi	r26, 0x53	; 83
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	e3 e5       	ldi	r30, 0x53	; 83
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	8f 7d       	andi	r24, 0xDF	; 223
 704:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
#elif TIM_u8_MODE_CTC == TIM_u8_CTC_SET
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#endif
	OCR0=TIM_u8_OCR0_VALUE;
 706:	ec e5       	ldi	r30, 0x5C	; 92
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	83 ed       	ldi	r24, 0xD3	; 211
 70c:	80 83       	st	Z, r24
	SET_BIT(TCCR0,3);
 70e:	a3 e5       	ldi	r26, 0x53	; 83
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	e3 e5       	ldi	r30, 0x53	; 83
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	88 60       	ori	r24, 0x08	; 8
 71a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
 71c:	a3 e5       	ldi	r26, 0x53	; 83
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	e3 e5       	ldi	r30, 0x53	; 83
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	8f 7b       	andi	r24, 0xBF	; 191
 728:	8c 93       	st	X, r24
#endif
	/*set prescaler (which powers the timer not the interrupt but the timer it self)*/
#if TIM_u16_PRESCALER == TIM_u16_NO_DIVISON
	TCCR0 |= TIM_u8_NO_DIV_MASK;
 72a:	a3 e5       	ldi	r26, 0x53	; 83
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	e3 e5       	ldi	r30, 0x53	; 83
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	81 60       	ori	r24, 0x01	; 1
 736:	8c 93       	st	X, r24
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_256
	TCCR0 |= TIM_u8_DIV_BY_256_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_1024
	TCCR0 |= TIM_u8_DIV_BY_1024_MASK;
#endif
}
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	08 95       	ret

0000073e <TIM_voidEnableInt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInt(void)
{
 73e:	df 93       	push	r29
 740:	cf 93       	push	r28
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
 746:	a9 e5       	ldi	r26, 0x59	; 89
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	e9 e5       	ldi	r30, 0x59	; 89
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	81 60       	ori	r24, 0x01	; 1
 752:	8c 93       	st	X, r24
}
 754:	cf 91       	pop	r28
 756:	df 91       	pop	r29
 758:	08 95       	ret

0000075a <TIM_voidDisableInt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInt(void)
{
 75a:	df 93       	push	r29
 75c:	cf 93       	push	r28
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
 762:	a9 e5       	ldi	r26, 0x59	; 89
 764:	b0 e0       	ldi	r27, 0x00	; 0
 766:	e9 e5       	ldi	r30, 0x59	; 89
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	8e 7f       	andi	r24, 0xFE	; 254
 76e:	8c 93       	st	X, r24
}
 770:	cf 91       	pop	r28
 772:	df 91       	pop	r29
 774:	08 95       	ret

00000776 <TIM_voidEnableIntCTC>:

/*Description: enable Timer interrupt CTC*/
void TIM_voidEnableIntCTC(void)
{
 776:	df 93       	push	r29
 778:	cf 93       	push	r28
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
 77e:	a9 e5       	ldi	r26, 0x59	; 89
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e9 e5       	ldi	r30, 0x59	; 89
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	82 60       	ori	r24, 0x02	; 2
 78a:	8c 93       	st	X, r24
}
 78c:	cf 91       	pop	r28
 78e:	df 91       	pop	r29
 790:	08 95       	ret

00000792 <TIM_voidDisableIntCTC>:

/*Description: disable Timer interrupt CTC*/
void TIM_voidDisableIntCTC(void)
{
 792:	df 93       	push	r29
 794:	cf 93       	push	r28
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
 79a:	a9 e5       	ldi	r26, 0x59	; 89
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e9 e5       	ldi	r30, 0x59	; 89
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	8d 7f       	andi	r24, 0xFD	; 253
 7a6:	8c 93       	st	X, r24
}
 7a8:	cf 91       	pop	r28
 7aa:	df 91       	pop	r29
 7ac:	08 95       	ret

000007ae <TIM_voidSetCallBack>:


/*Description: set Timer callback function*/
void TIM_voidSetCallBack(void (* ptrCpy) (void))
{
 7ae:	df 93       	push	r29
 7b0:	cf 93       	push	r28
 7b2:	00 d0       	rcall	.+0      	; 0x7b4 <TIM_voidSetCallBack+0x6>
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
 7b8:	9a 83       	std	Y+2, r25	; 0x02
 7ba:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack=ptrCpy;
 7bc:	89 81       	ldd	r24, Y+1	; 0x01
 7be:	9a 81       	ldd	r25, Y+2	; 0x02
 7c0:	90 93 66 00 	sts	0x0066, r25
 7c4:	80 93 65 00 	sts	0x0065, r24
}
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	cf 91       	pop	r28
 7ce:	df 91       	pop	r29
 7d0:	08 95       	ret

000007d2 <TIM_voidSetCallBackCTC>:

/*Description: set CTC Timer callback function*/
void TIM_voidSetCallBackCTC(void (* ptrCpy) (void))
{
 7d2:	df 93       	push	r29
 7d4:	cf 93       	push	r28
 7d6:	00 d0       	rcall	.+0      	; 0x7d8 <TIM_voidSetCallBackCTC+0x6>
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
 7dc:	9a 83       	std	Y+2, r25	; 0x02
 7de:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack_CTC=ptrCpy;
 7e0:	89 81       	ldd	r24, Y+1	; 0x01
 7e2:	9a 81       	ldd	r25, Y+2	; 0x02
 7e4:	90 93 68 00 	sts	0x0068, r25
 7e8:	80 93 67 00 	sts	0x0067, r24
}
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	cf 91       	pop	r28
 7f2:	df 91       	pop	r29
 7f4:	08 95       	ret

000007f6 <TIM_voidInitCountingRegister>:

/*Description: init timer register*/
void TIM_voidInitCountingRegister(u8 u8ValueCpy)
{
 7f6:	df 93       	push	r29
 7f8:	cf 93       	push	r28
 7fa:	0f 92       	push	r0
 7fc:	cd b7       	in	r28, 0x3d	; 61
 7fe:	de b7       	in	r29, 0x3e	; 62
 800:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
 802:	e2 e5       	ldi	r30, 0x52	; 82
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	80 83       	st	Z, r24
}
 80a:	0f 90       	pop	r0
 80c:	cf 91       	pop	r28
 80e:	df 91       	pop	r29
 810:	08 95       	ret

00000812 <TIM_voidInitCTCRegister>:

/*Description: init OCR0 timer register*/
void TIM_voidInitCTCRegister(u8 u8ValueCpy)
{
 812:	df 93       	push	r29
 814:	cf 93       	push	r28
 816:	0f 92       	push	r0
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
 81c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8ValueCpy;
 81e:	ec e5       	ldi	r30, 0x5C	; 92
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	80 83       	st	Z, r24
}
 826:	0f 90       	pop	r0
 828:	cf 91       	pop	r28
 82a:	df 91       	pop	r29
 82c:	08 95       	ret

0000082e <__vector_11>:

void __vector_11 (void)__attribute__((signal,used));
void __vector_11 (void)
{
 82e:	1f 92       	push	r1
 830:	0f 92       	push	r0
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	0f 92       	push	r0
 836:	11 24       	eor	r1, r1
 838:	2f 93       	push	r18
 83a:	3f 93       	push	r19
 83c:	4f 93       	push	r20
 83e:	5f 93       	push	r21
 840:	6f 93       	push	r22
 842:	7f 93       	push	r23
 844:	8f 93       	push	r24
 846:	9f 93       	push	r25
 848:	af 93       	push	r26
 84a:	bf 93       	push	r27
 84c:	ef 93       	push	r30
 84e:	ff 93       	push	r31
 850:	df 93       	push	r29
 852:	cf 93       	push	r28
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack();
 858:	e0 91 65 00 	lds	r30, 0x0065
 85c:	f0 91 66 00 	lds	r31, 0x0066
 860:	09 95       	icall
}
 862:	cf 91       	pop	r28
 864:	df 91       	pop	r29
 866:	ff 91       	pop	r31
 868:	ef 91       	pop	r30
 86a:	bf 91       	pop	r27
 86c:	af 91       	pop	r26
 86e:	9f 91       	pop	r25
 870:	8f 91       	pop	r24
 872:	7f 91       	pop	r23
 874:	6f 91       	pop	r22
 876:	5f 91       	pop	r21
 878:	4f 91       	pop	r20
 87a:	3f 91       	pop	r19
 87c:	2f 91       	pop	r18
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <__vector_10>:


void __vector_10 (void)__attribute__((signal,used));
void __vector_10 (void)
{
 888:	1f 92       	push	r1
 88a:	0f 92       	push	r0
 88c:	0f b6       	in	r0, 0x3f	; 63
 88e:	0f 92       	push	r0
 890:	11 24       	eor	r1, r1
 892:	2f 93       	push	r18
 894:	3f 93       	push	r19
 896:	4f 93       	push	r20
 898:	5f 93       	push	r21
 89a:	6f 93       	push	r22
 89c:	7f 93       	push	r23
 89e:	8f 93       	push	r24
 8a0:	9f 93       	push	r25
 8a2:	af 93       	push	r26
 8a4:	bf 93       	push	r27
 8a6:	ef 93       	push	r30
 8a8:	ff 93       	push	r31
 8aa:	df 93       	push	r29
 8ac:	cf 93       	push	r28
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack_CTC();
 8b2:	e0 91 67 00 	lds	r30, 0x0067
 8b6:	f0 91 68 00 	lds	r31, 0x0068
 8ba:	09 95       	icall
}
 8bc:	cf 91       	pop	r28
 8be:	df 91       	pop	r29
 8c0:	ff 91       	pop	r31
 8c2:	ef 91       	pop	r30
 8c4:	bf 91       	pop	r27
 8c6:	af 91       	pop	r26
 8c8:	9f 91       	pop	r25
 8ca:	8f 91       	pop	r24
 8cc:	7f 91       	pop	r23
 8ce:	6f 91       	pop	r22
 8d0:	5f 91       	pop	r21
 8d2:	4f 91       	pop	r20
 8d4:	3f 91       	pop	r19
 8d6:	2f 91       	pop	r18
 8d8:	0f 90       	pop	r0
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	0f 90       	pop	r0
 8de:	1f 90       	pop	r1
 8e0:	18 95       	reti

000008e2 <callback>:
#include "TIM_int.h"
#include "SWD_int.h"
static u8 Exti_flag=0;
void Motor(void);
void callback(void)
{
 8e2:	df 93       	push	r29
 8e4:	cf 93       	push	r28
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
TOG_BIT(PORTB,3);
 8ea:	a8 e3       	ldi	r26, 0x38	; 56
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	e8 e3       	ldi	r30, 0x38	; 56
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	90 81       	ld	r25, Z
 8f4:	88 e0       	ldi	r24, 0x08	; 8
 8f6:	89 27       	eor	r24, r25
 8f8:	8c 93       	st	X, r24
}
 8fa:	cf 91       	pop	r28
 8fc:	df 91       	pop	r29
 8fe:	08 95       	ret

00000900 <MotorMove>:
void MotorMove(void)
{
 900:	df 93       	push	r29
 902:	cf 93       	push	r28
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
	Exti_flag=1;
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	80 93 69 00 	sts	0x0069, r24
}
 90e:	cf 91       	pop	r28
 910:	df 91       	pop	r29
 912:	08 95       	ret

00000914 <main>:
void main(void)
{
 914:	df 93       	push	r29
 916:	cf 93       	push	r28
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 91c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_24,DIO_u8_HIGH);
 920:	88 e1       	ldi	r24, 0x18	; 24
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_26,DIO_u8_HIGH);
 928:	8a e1       	ldi	r24, 0x1A	; 26
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	TIM_voidInitialize();
 930:	0e 94 55 03 	call	0x6aa	; 0x6aa <TIM_voidInitialize>
	TIM_voidSetCallBackCTC(callback);
 934:	81 e7       	ldi	r24, 0x71	; 113
 936:	94 e0       	ldi	r25, 0x04	; 4
 938:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TIM_voidSetCallBackCTC>
	EXTI_voidInit();
 93c:	0e 94 85 02 	call	0x50a	; 0x50a <EXTI_voidInit>
	EXTI_voidSetCallback(MotorMove);
 940:	80 e8       	ldi	r24, 0x80	; 128
 942:	94 e0       	ldi	r25, 0x04	; 4
 944:	0e 94 a8 02 	call	0x550	; 0x550 <EXTI_voidSetCallback>
	EXTI_voidEnable(); // on pin 26 pin D2
 948:	0e 94 ba 02 	call	0x574	; 0x574 <EXTI_voidEnable>
	//may need pull up to Ext pin D2
	TIM_voidSetCallBackCTC(callback); // connect IR Led on pin B3 (11)
 94c:	81 e7       	ldi	r24, 0x71	; 113
 94e:	94 e0       	ldi	r25, 0x04	; 4
 950:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <TIM_voidSetCallBackCTC>
	GIE_EnableGlobalInterrupt();
 954:	0e 94 03 03 	call	0x606	; 0x606 <GIE_EnableGlobalInterrupt>
	while(1)
	{
		if(SWD_u8GetSwitchState(SWD_u8_SW1)==SWD_u8PUSHED)
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	0e 94 1f 03 	call	0x63e	; 0x63e <SWD_u8GetSwitchState>
 95e:	82 30       	cpi	r24, 0x02	; 2
 960:	19 f4       	brne	.+6      	; 0x968 <main+0x54>
		{
			TIM_voidEnableIntCTC();
 962:	0e 94 bb 03 	call	0x776	; 0x776 <TIM_voidEnableIntCTC>
 966:	06 c0       	rjmp	.+12     	; 0x974 <main+0x60>
		}
		else
		{
			TIM_voidDisableIntCTC();
 968:	0e 94 c9 03 	call	0x792	; 0x792 <TIM_voidDisableIntCTC>
			DIO_voidSetPinValue(DIO_u8_PIN_11,DIO_u8_LOW);
 96c:	8b e0       	ldi	r24, 0x0B	; 11
 96e:	61 e0       	ldi	r22, 0x01	; 1
 970:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		}
		if(Exti_flag==1)
 974:	80 91 69 00 	lds	r24, 0x0069
 978:	81 30       	cpi	r24, 0x01	; 1
 97a:	71 f7       	brne	.-36     	; 0x958 <main+0x44>
		{
			Motor();
 97c:	0e 94 c1 04 	call	0x982	; 0x982 <Motor>
 980:	eb cf       	rjmp	.-42     	; 0x958 <main+0x44>

00000982 <Motor>:
		}
	}
}
void Motor(void)
{
 982:	df 93       	push	r29
 984:	cf 93       	push	r28
 986:	00 d0       	rcall	.+0      	; 0x988 <Motor+0x6>
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
	static u8 motordirection=0;
	if(0==motordirection)
 98c:	80 91 6a 00 	lds	r24, 0x006A
 990:	88 23       	and	r24, r24
 992:	09 f0       	breq	.+2      	; 0x996 <Motor+0x14>
 994:	65 c0       	rjmp	.+202    	; 0xa60 <Motor+0xde>
	{
	for(u8 i=0;i<255;i++)
 996:	1a 82       	std	Y+2, r1	; 0x02
 998:	5b c0       	rjmp	.+182    	; 0xa50 <Motor+0xce>
	{
	DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	60 e0       	ldi	r22, 0x00	; 0
 99e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	61 e0       	ldi	r22, 0x01	; 1
 9a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	61 e0       	ldi	r22, 0x01	; 1
 9ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 9b2:	83 e0       	ldi	r24, 0x03	; 3
 9b4:	61 e0       	ldi	r22, 0x01	; 1
 9b6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	Delay_ms(2);
 9ba:	62 e0       	ldi	r22, 0x02	; 2
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	61 e0       	ldi	r22, 0x01	; 1
 9ca:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_HIGH);
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	60 e0       	ldi	r22, 0x00	; 0
 9d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 9d6:	82 e0       	ldi	r24, 0x02	; 2
 9d8:	61 e0       	ldi	r22, 0x01	; 1
 9da:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	61 e0       	ldi	r22, 0x01	; 1
 9e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	Delay_ms(2);
 9e6:	62 e0       	ldi	r22, 0x02	; 2
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	61 e0       	ldi	r22, 0x01	; 1
 9f6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	61 e0       	ldi	r22, 0x01	; 1
 9fe:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_HIGH);
 a02:	82 e0       	ldi	r24, 0x02	; 2
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 a0a:	83 e0       	ldi	r24, 0x03	; 3
 a0c:	61 e0       	ldi	r22, 0x01	; 1
 a0e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	Delay_ms(2);
 a12:	62 e0       	ldi	r22, 0x02	; 2
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	61 e0       	ldi	r22, 0x01	; 1
 a22:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	61 e0       	ldi	r22, 0x01	; 1
 a2a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 a2e:	82 e0       	ldi	r24, 0x02	; 2
 a30:	61 e0       	ldi	r22, 0x01	; 1
 a32:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_HIGH);
 a36:	83 e0       	ldi	r24, 0x03	; 3
 a38:	60 e0       	ldi	r22, 0x00	; 0
 a3a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	Delay_ms(2);
 a3e:	62 e0       	ldi	r22, 0x02	; 2
 a40:	70 e0       	ldi	r23, 0x00	; 0
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
void Motor(void)
{
	static u8 motordirection=0;
	if(0==motordirection)
	{
	for(u8 i=0;i<255;i++)
 a4a:	8a 81       	ldd	r24, Y+2	; 0x02
 a4c:	8f 5f       	subi	r24, 0xFF	; 255
 a4e:	8a 83       	std	Y+2, r24	; 0x02
 a50:	8a 81       	ldd	r24, Y+2	; 0x02
 a52:	8f 3f       	cpi	r24, 0xFF	; 255
 a54:	09 f0       	breq	.+2      	; 0xa58 <Motor+0xd6>
 a56:	a1 cf       	rjmp	.-190    	; 0x99a <Motor+0x18>
	DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
	DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
	DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_HIGH);
	Delay_ms(2);
	}
	motordirection=1;
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	80 93 6a 00 	sts	0x006A, r24
 a5e:	68 c0       	rjmp	.+208    	; 0xb30 <Motor+0x1ae>
	}
	else if(1==motordirection)
 a60:	80 91 6a 00 	lds	r24, 0x006A
 a64:	81 30       	cpi	r24, 0x01	; 1
 a66:	09 f0       	breq	.+2      	; 0xa6a <Motor+0xe8>
 a68:	63 c0       	rjmp	.+198    	; 0xb30 <Motor+0x1ae>
	{
		for(u8 i=0;i<255;i++)
 a6a:	19 82       	std	Y+1, r1	; 0x01
 a6c:	5b c0       	rjmp	.+182    	; 0xb24 <Motor+0x1a2>
		{
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 a6e:	80 e0       	ldi	r24, 0x00	; 0
 a70:	61 e0       	ldi	r22, 0x01	; 1
 a72:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	61 e0       	ldi	r22, 0x01	; 1
 a7a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 a7e:	82 e0       	ldi	r24, 0x02	; 2
 a80:	61 e0       	ldi	r22, 0x01	; 1
 a82:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_HIGH);
 a86:	83 e0       	ldi	r24, 0x03	; 3
 a88:	60 e0       	ldi	r22, 0x00	; 0
 a8a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		Delay_ms(2);
 a8e:	62 e0       	ldi	r22, 0x02	; 2
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	61 e0       	ldi	r22, 0x01	; 1
 a9e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	61 e0       	ldi	r22, 0x01	; 1
 aa6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_HIGH);
 aaa:	82 e0       	ldi	r24, 0x02	; 2
 aac:	60 e0       	ldi	r22, 0x00	; 0
 aae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 ab2:	83 e0       	ldi	r24, 0x03	; 3
 ab4:	61 e0       	ldi	r22, 0x01	; 1
 ab6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		Delay_ms(2);
 aba:	62 e0       	ldi	r22, 0x02	; 2
 abc:	70 e0       	ldi	r23, 0x00	; 0
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	61 e0       	ldi	r22, 0x01	; 1
 aca:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_HIGH);
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	60 e0       	ldi	r22, 0x00	; 0
 ad2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 ad6:	82 e0       	ldi	r24, 0x02	; 2
 ad8:	61 e0       	ldi	r22, 0x01	; 1
 ada:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 ade:	83 e0       	ldi	r24, 0x03	; 3
 ae0:	61 e0       	ldi	r22, 0x01	; 1
 ae2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		Delay_ms(2);
 ae6:	62 e0       	ldi	r22, 0x02	; 2
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	80 e0       	ldi	r24, 0x00	; 0
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 af2:	80 e0       	ldi	r24, 0x00	; 0
 af4:	60 e0       	ldi	r22, 0x00	; 0
 af6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	61 e0       	ldi	r22, 0x01	; 1
 afe:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
 b02:	82 e0       	ldi	r24, 0x02	; 2
 b04:	61 e0       	ldi	r22, 0x01	; 1
 b06:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
 b0a:	83 e0       	ldi	r24, 0x03	; 3
 b0c:	61 e0       	ldi	r22, 0x01	; 1
 b0e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		Delay_ms(2);
 b12:	62 e0       	ldi	r22, 0x02	; 2
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	}
	motordirection=1;
	}
	else if(1==motordirection)
	{
		for(u8 i=0;i<255;i++)
 b1e:	89 81       	ldd	r24, Y+1	; 0x01
 b20:	8f 5f       	subi	r24, 0xFF	; 255
 b22:	89 83       	std	Y+1, r24	; 0x01
 b24:	89 81       	ldd	r24, Y+1	; 0x01
 b26:	8f 3f       	cpi	r24, 0xFF	; 255
 b28:	09 f0       	breq	.+2      	; 0xb2c <Motor+0x1aa>
 b2a:	a1 cf       	rjmp	.-190    	; 0xa6e <Motor+0xec>
		DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_LOW);
		DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_LOW);
		DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_LOW);
		Delay_ms(2);
		}
		motordirection=0;
 b2c:	10 92 6a 00 	sts	0x006A, r1
	}
	Exti_flag=0;
 b30:	10 92 69 00 	sts	0x0069, r1
}
 b34:	0f 90       	pop	r0
 b36:	0f 90       	pop	r0
 b38:	cf 91       	pop	r28
 b3a:	df 91       	pop	r29
 b3c:	08 95       	ret

00000b3e <__mulsi3>:
 b3e:	62 9f       	mul	r22, r18
 b40:	d0 01       	movw	r26, r0
 b42:	73 9f       	mul	r23, r19
 b44:	f0 01       	movw	r30, r0
 b46:	82 9f       	mul	r24, r18
 b48:	e0 0d       	add	r30, r0
 b4a:	f1 1d       	adc	r31, r1
 b4c:	64 9f       	mul	r22, r20
 b4e:	e0 0d       	add	r30, r0
 b50:	f1 1d       	adc	r31, r1
 b52:	92 9f       	mul	r25, r18
 b54:	f0 0d       	add	r31, r0
 b56:	83 9f       	mul	r24, r19
 b58:	f0 0d       	add	r31, r0
 b5a:	74 9f       	mul	r23, r20
 b5c:	f0 0d       	add	r31, r0
 b5e:	65 9f       	mul	r22, r21
 b60:	f0 0d       	add	r31, r0
 b62:	99 27       	eor	r25, r25
 b64:	72 9f       	mul	r23, r18
 b66:	b0 0d       	add	r27, r0
 b68:	e1 1d       	adc	r30, r1
 b6a:	f9 1f       	adc	r31, r25
 b6c:	63 9f       	mul	r22, r19
 b6e:	b0 0d       	add	r27, r0
 b70:	e1 1d       	adc	r30, r1
 b72:	f9 1f       	adc	r31, r25
 b74:	bd 01       	movw	r22, r26
 b76:	cf 01       	movw	r24, r30
 b78:	11 24       	eor	r1, r1
 b7a:	08 95       	ret

00000b7c <__udivmodsi4>:
 b7c:	a1 e2       	ldi	r26, 0x21	; 33
 b7e:	1a 2e       	mov	r1, r26
 b80:	aa 1b       	sub	r26, r26
 b82:	bb 1b       	sub	r27, r27
 b84:	fd 01       	movw	r30, r26
 b86:	0d c0       	rjmp	.+26     	; 0xba2 <__udivmodsi4_ep>

00000b88 <__udivmodsi4_loop>:
 b88:	aa 1f       	adc	r26, r26
 b8a:	bb 1f       	adc	r27, r27
 b8c:	ee 1f       	adc	r30, r30
 b8e:	ff 1f       	adc	r31, r31
 b90:	a2 17       	cp	r26, r18
 b92:	b3 07       	cpc	r27, r19
 b94:	e4 07       	cpc	r30, r20
 b96:	f5 07       	cpc	r31, r21
 b98:	20 f0       	brcs	.+8      	; 0xba2 <__udivmodsi4_ep>
 b9a:	a2 1b       	sub	r26, r18
 b9c:	b3 0b       	sbc	r27, r19
 b9e:	e4 0b       	sbc	r30, r20
 ba0:	f5 0b       	sbc	r31, r21

00000ba2 <__udivmodsi4_ep>:
 ba2:	66 1f       	adc	r22, r22
 ba4:	77 1f       	adc	r23, r23
 ba6:	88 1f       	adc	r24, r24
 ba8:	99 1f       	adc	r25, r25
 baa:	1a 94       	dec	r1
 bac:	69 f7       	brne	.-38     	; 0xb88 <__udivmodsi4_loop>
 bae:	60 95       	com	r22
 bb0:	70 95       	com	r23
 bb2:	80 95       	com	r24
 bb4:	90 95       	com	r25
 bb6:	9b 01       	movw	r18, r22
 bb8:	ac 01       	movw	r20, r24
 bba:	bd 01       	movw	r22, r26
 bbc:	cf 01       	movw	r24, r30
 bbe:	08 95       	ret

00000bc0 <_exit>:
 bc0:	f8 94       	cli

00000bc2 <__stop_program>:
 bc2:	ff cf       	rjmp	.-2      	; 0xbc2 <__stop_program>
