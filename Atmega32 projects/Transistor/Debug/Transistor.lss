
Transistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000744  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003e3  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
  64:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2c 97       	sbiw	r28, 0x0c	; 12
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	69 87       	std	Y+9, r22	; 0x09
  82:	7a 87       	std	Y+10, r23	; 0x0a
  84:	8b 87       	std	Y+11, r24	; 0x0b
  86:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
  88:	89 85       	ldd	r24, Y+9	; 0x09
  8a:	9a 85       	ldd	r25, Y+10	; 0x0a
  8c:	ab 85       	ldd	r26, Y+11	; 0x0b
  8e:	bc 85       	ldd	r27, Y+12	; 0x0c
  90:	22 e7       	ldi	r18, 0x72	; 114
  92:	31 e0       	ldi	r19, 0x01	; 1
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	bc 01       	movw	r22, r24
  9a:	cd 01       	movw	r24, r26
  9c:	0e 94 8c 02 	call	0x518	; 0x518 <__mulsi3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	89 83       	std	Y+1, r24	; 0x01
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	ab 83       	std	Y+3, r26	; 0x03
  aa:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
  ac:	1d 82       	std	Y+5, r1	; 0x05
  ae:	1e 82       	std	Y+6, r1	; 0x06
  b0:	1f 82       	std	Y+7, r1	; 0x07
  b2:	18 86       	std	Y+8, r1	; 0x08
  b4:	0c c0       	rjmp	.+24     	; 0xce <Delay_ms+0x62>
	{
		asm("nop");
  b6:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
  b8:	8d 81       	ldd	r24, Y+5	; 0x05
  ba:	9e 81       	ldd	r25, Y+6	; 0x06
  bc:	af 81       	ldd	r26, Y+7	; 0x07
  be:	b8 85       	ldd	r27, Y+8	; 0x08
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	8d 83       	std	Y+5, r24	; 0x05
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	af 83       	std	Y+7, r26	; 0x07
  cc:	b8 87       	std	Y+8, r27	; 0x08
  ce:	2d 81       	ldd	r18, Y+5	; 0x05
  d0:	3e 81       	ldd	r19, Y+6	; 0x06
  d2:	4f 81       	ldd	r20, Y+7	; 0x07
  d4:	58 85       	ldd	r21, Y+8	; 0x08
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	ab 81       	ldd	r26, Y+3	; 0x03
  dc:	bc 81       	ldd	r27, Y+4	; 0x04
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	4a 07       	cpc	r20, r26
  e4:	5b 07       	cpc	r21, r27
  e6:	38 f3       	brcs	.-50     	; 0xb6 <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
  e8:	2c 96       	adiw	r28, 0x0c	; 12
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <Delay_us>:
void Delay_us(u32 DelayValue)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2c 97       	sbiw	r28, 0x0c	; 12
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	69 87       	std	Y+9, r22	; 0x09
 110:	7a 87       	std	Y+10, r23	; 0x0a
 112:	8b 87       	std	Y+11, r24	; 0x0b
 114:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	ab 85       	ldd	r26, Y+11	; 0x0b
 11c:	bc 85       	ldd	r27, Y+12	; 0x0c
 11e:	27 e7       	ldi	r18, 0x77	; 119
 120:	31 e0       	ldi	r19, 0x01	; 1
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	bc 01       	movw	r22, r24
 128:	cd 01       	movw	r24, r26
 12a:	0e 94 8c 02 	call	0x518	; 0x518 <__mulsi3>
 12e:	dc 01       	movw	r26, r24
 130:	cb 01       	movw	r24, r22
 132:	89 5d       	subi	r24, 0xD9	; 217
 134:	94 44       	sbci	r25, 0x44	; 68
 136:	a0 40       	sbci	r26, 0x00	; 0
 138:	b0 40       	sbci	r27, 0x00	; 0
 13a:	28 ee       	ldi	r18, 0xE8	; 232
 13c:	33 e0       	ldi	r19, 0x03	; 3
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	0e 94 ab 02 	call	0x556	; 0x556 <__udivmodsi4>
 14a:	da 01       	movw	r26, r20
 14c:	c9 01       	movw	r24, r18
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	ab 83       	std	Y+3, r26	; 0x03
 154:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
 156:	1d 82       	std	Y+5, r1	; 0x05
 158:	1e 82       	std	Y+6, r1	; 0x06
 15a:	1f 82       	std	Y+7, r1	; 0x07
 15c:	18 86       	std	Y+8, r1	; 0x08
 15e:	0c c0       	rjmp	.+24     	; 0x178 <Delay_us+0x7e>
	{
		asm("nop");
 160:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
 162:	8d 81       	ldd	r24, Y+5	; 0x05
 164:	9e 81       	ldd	r25, Y+6	; 0x06
 166:	af 81       	ldd	r26, Y+7	; 0x07
 168:	b8 85       	ldd	r27, Y+8	; 0x08
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	a1 1d       	adc	r26, r1
 16e:	b1 1d       	adc	r27, r1
 170:	8d 83       	std	Y+5, r24	; 0x05
 172:	9e 83       	std	Y+6, r25	; 0x06
 174:	af 83       	std	Y+7, r26	; 0x07
 176:	b8 87       	std	Y+8, r27	; 0x08
 178:	2d 81       	ldd	r18, Y+5	; 0x05
 17a:	3e 81       	ldd	r19, Y+6	; 0x06
 17c:	4f 81       	ldd	r20, Y+7	; 0x07
 17e:	58 85       	ldd	r21, Y+8	; 0x08
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	ab 81       	ldd	r26, Y+3	; 0x03
 186:	bc 81       	ldd	r27, Y+4	; 0x04
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	4a 07       	cpc	r20, r26
 18e:	5b 07       	cpc	r21, r27
 190:	38 f3       	brcs	.-50     	; 0x160 <Delay_us+0x66>
	{
		asm("nop");
	}
 192:	2c 96       	adiw	r28, 0x0c	; 12
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
 1ac:	ea e3       	ldi	r30, 0x3A	; 58
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
 1b4:	e7 e3       	ldi	r30, 0x37	; 55
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
 1bc:	e4 e3       	ldi	r30, 0x34	; 52
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
 1c4:	e1 e3       	ldi	r30, 0x31	; 49
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	10 82       	st	Z, r1
}
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	08 95       	ret

000001d0 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
 1d0:	df 93       	push	r29
 1d2:	cf 93       	push	r28
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <DIO_voidSetPinValue+0x6>
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	88 30       	cpi	r24, 0x08	; 8
 1e2:	60 f5       	brcc	.+88     	; 0x23c <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	88 23       	and	r24, r24
 1e8:	a1 f4       	brne	.+40     	; 0x212 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
 1ea:	ab e3       	ldi	r26, 0x3B	; 59
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	eb e3       	ldi	r30, 0x3B	; 59
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	48 2f       	mov	r20, r24
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 2e       	mov	r0, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0x38>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0x34>
 20c:	84 2b       	or	r24, r20
 20e:	8c 93       	st	X, r24
 210:	b3 c0       	rjmp	.+358    	; 0x378 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 212:	ab e3       	ldi	r26, 0x3B	; 59
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x60>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x5c>
 234:	80 95       	com	r24
 236:	84 23       	and	r24, r20
 238:	8c 93       	st	X, r24
 23a:	9e c0       	rjmp	.+316    	; 0x378 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	88 30       	cpi	r24, 0x08	; 8
 240:	90 f1       	brcs	.+100    	; 0x2a6 <DIO_voidSetPinValue+0xd6>
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	80 31       	cpi	r24, 0x10	; 16
 246:	78 f5       	brcc	.+94     	; 0x2a6 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	88 50       	subi	r24, 0x08	; 8
 24c:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	88 23       	and	r24, r24
 252:	a1 f4       	brne	.+40     	; 0x27c <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 254:	a8 e3       	ldi	r26, 0x38	; 56
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e8 e3       	ldi	r30, 0x38	; 56
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_voidSetPinValue+0xa2>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_voidSetPinValue+0x9e>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	7e c0       	rjmp	.+252    	; 0x378 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 27c:	a8 e3       	ldi	r26, 0x38	; 56
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e8 e3       	ldi	r30, 0x38	; 56
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xca>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0xc6>
 29e:	80 95       	com	r24
 2a0:	84 23       	and	r24, r20
 2a2:	8c 93       	st	X, r24
 2a4:	69 c0       	rjmp	.+210    	; 0x378 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	80 31       	cpi	r24, 0x10	; 16
 2aa:	90 f1       	brcs	.+100    	; 0x310 <DIO_voidSetPinValue+0x140>
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	88 31       	cpi	r24, 0x18	; 24
 2b0:	78 f5       	brcc	.+94     	; 0x310 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	80 51       	subi	r24, 0x10	; 16
 2b6:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	88 23       	and	r24, r24
 2bc:	a1 f4       	brne	.+40     	; 0x2e6 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 2be:	a5 e3       	ldi	r26, 0x35	; 53
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e5 e3       	ldi	r30, 0x35	; 53
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_voidSetPinValue+0x10c>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_voidSetPinValue+0x108>
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	49 c0       	rjmp	.+146    	; 0x378 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 2e6:	a5 e3       	ldi	r26, 0x35	; 53
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e5 e3       	ldi	r30, 0x35	; 53
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x134>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x130>
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	8c 93       	st	X, r24
 30e:	34 c0       	rjmp	.+104    	; 0x378 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	88 31       	cpi	r24, 0x18	; 24
 314:	88 f1       	brcs	.+98     	; 0x378 <DIO_voidSetPinValue+0x1a8>
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	80 32       	cpi	r24, 0x20	; 32
 31a:	70 f5       	brcc	.+92     	; 0x378 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 51       	subi	r24, 0x18	; 24
 320:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	88 23       	and	r24, r24
 326:	a1 f4       	brne	.+40     	; 0x350 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 328:	a2 e3       	ldi	r26, 0x32	; 50
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	e2 e3       	ldi	r30, 0x32	; 50
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	48 2f       	mov	r20, r24
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	28 2f       	mov	r18, r24
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 2e       	mov	r0, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_voidSetPinValue+0x176>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_voidSetPinValue+0x172>
 34a:	84 2b       	or	r24, r20
 34c:	8c 93       	st	X, r24
 34e:	14 c0       	rjmp	.+40     	; 0x378 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 350:	a2 e3       	ldi	r26, 0x32	; 50
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e2 e3       	ldi	r30, 0x32	; 50
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x19e>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x19a>
 372:	80 95       	com	r24
 374:	84 23       	and	r24, r20
 376:	8c 93       	st	X, r24
		}			
	}
}
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	cf 91       	pop	r28
 37e:	df 91       	pop	r29
 380:	08 95       	ret

00000382 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 382:	df 93       	push	r29
 384:	cf 93       	push	r28
 386:	00 d0       	rcall	.+0      	; 0x388 <DIO_u8GetPinValue+0x6>
 388:	00 d0       	rcall	.+0      	; 0x38a <DIO_u8GetPinValue+0x8>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 390:	8c 81       	ldd	r24, Y+4	; 0x04
 392:	88 30       	cpi	r24, 0x08	; 8
 394:	00 f5       	brcc	.+64     	; 0x3d6 <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 396:	8c 81       	ldd	r24, Y+4	; 0x04
 398:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 39a:	e9 e3       	ldi	r30, 0x39	; 57
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	8b 81       	ldd	r24, Y+3	; 0x03
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8GetPinValue+0x32>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	2a 95       	dec	r18
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8GetPinValue+0x2e>
 3b8:	9a 01       	movw	r18, r20
 3ba:	28 23       	and	r18, r24
 3bc:	39 23       	and	r19, r25
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	a9 01       	movw	r20, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_u8GetPinValue+0x4a>
 3c8:	55 95       	asr	r21
 3ca:	47 95       	ror	r20
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_u8GetPinValue+0x46>
 3d0:	ca 01       	movw	r24, r20
 3d2:	8a 83       	std	Y+2, r24	; 0x02
 3d4:	74 c0       	rjmp	.+232    	; 0x4be <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 3d6:	8c 81       	ldd	r24, Y+4	; 0x04
 3d8:	80 31       	cpi	r24, 0x10	; 16
 3da:	20 f1       	brcs	.+72     	; 0x424 <DIO_u8GetPinValue+0xa2>
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	88 31       	cpi	r24, 0x18	; 24
 3e0:	08 f5       	brcc	.+66     	; 0x424 <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 3e2:	8c 81       	ldd	r24, Y+4	; 0x04
 3e4:	88 50       	subi	r24, 0x08	; 8
 3e6:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 3e8:	e6 e3       	ldi	r30, 0x36	; 54
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	8b 81       	ldd	r24, Y+3	; 0x03
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_u8GetPinValue+0x80>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	2a 95       	dec	r18
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_u8GetPinValue+0x7c>
 406:	9a 01       	movw	r18, r20
 408:	28 23       	and	r18, r24
 40a:	39 23       	and	r19, r25
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	88 2f       	mov	r24, r24
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	a9 01       	movw	r20, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_u8GetPinValue+0x98>
 416:	55 95       	asr	r21
 418:	47 95       	ror	r20
 41a:	8a 95       	dec	r24
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_u8GetPinValue+0x94>
 41e:	ca 01       	movw	r24, r20
 420:	8a 83       	std	Y+2, r24	; 0x02
 422:	4d c0       	rjmp	.+154    	; 0x4be <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	80 31       	cpi	r24, 0x10	; 16
 428:	20 f1       	brcs	.+72     	; 0x472 <DIO_u8GetPinValue+0xf0>
 42a:	8c 81       	ldd	r24, Y+4	; 0x04
 42c:	88 31       	cpi	r24, 0x18	; 24
 42e:	08 f5       	brcc	.+66     	; 0x472 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 430:	8c 81       	ldd	r24, Y+4	; 0x04
 432:	80 51       	subi	r24, 0x10	; 16
 434:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 436:	e6 e3       	ldi	r30, 0x36	; 54
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	8b 81       	ldd	r24, Y+3	; 0x03
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_u8GetPinValue+0xce>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	2a 95       	dec	r18
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_u8GetPinValue+0xca>
 454:	9a 01       	movw	r18, r20
 456:	28 23       	and	r18, r24
 458:	39 23       	and	r19, r25
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	88 2f       	mov	r24, r24
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	a9 01       	movw	r20, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_u8GetPinValue+0xe6>
 464:	55 95       	asr	r21
 466:	47 95       	ror	r20
 468:	8a 95       	dec	r24
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_u8GetPinValue+0xe2>
 46c:	ca 01       	movw	r24, r20
 46e:	8a 83       	std	Y+2, r24	; 0x02
 470:	26 c0       	rjmp	.+76     	; 0x4be <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 472:	8c 81       	ldd	r24, Y+4	; 0x04
 474:	88 31       	cpi	r24, 0x18	; 24
 476:	18 f1       	brcs	.+70     	; 0x4be <DIO_u8GetPinValue+0x13c>
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	80 32       	cpi	r24, 0x20	; 32
 47c:	00 f5       	brcc	.+64     	; 0x4be <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 47e:	8c 81       	ldd	r24, Y+4	; 0x04
 480:	88 51       	subi	r24, 0x18	; 24
 482:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 484:	e0 e3       	ldi	r30, 0x30	; 48
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_u8GetPinValue+0x11c>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	2a 95       	dec	r18
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_u8GetPinValue+0x118>
 4a2:	9a 01       	movw	r18, r20
 4a4:	28 23       	and	r18, r24
 4a6:	39 23       	and	r19, r25
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	88 2f       	mov	r24, r24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	a9 01       	movw	r20, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_u8GetPinValue+0x134>
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	8a 95       	dec	r24
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_u8GetPinValue+0x130>
 4ba:	ca 01       	movw	r24, r20
 4bc:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	88 23       	and	r24, r24
 4c2:	19 f4       	brne	.+6      	; 0x4ca <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	89 83       	std	Y+1, r24	; 0x01
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 4d0:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	cf 91       	pop	r28
 4de:	df 91       	pop	r29
 4e0:	08 95       	ret

000004e2 <main>:
#include "STD_TYPES.h"
#include "DELAY.h"
#include "DIO_int.h"

void main(void)
{
 4e2:	df 93       	push	r29
 4e4:	cf 93       	push	r28
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 4ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_voidInitialize>


	while(1)
	{
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH);
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_voidSetPinValue>
		Delay_ms(3000);
 4f6:	68 eb       	ldi	r22, 0xB8	; 184
 4f8:	7b e0       	ldi	r23, 0x0B	; 11
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
		DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_LOW);
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_voidSetPinValue>
		Delay_ms(3000);
 50a:	68 eb       	ldi	r22, 0xB8	; 184
 50c:	7b e0       	ldi	r23, 0x0B	; 11
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 36 00 	call	0x6c	; 0x6c <Delay_ms>
 516:	eb cf       	rjmp	.-42     	; 0x4ee <main+0xc>

00000518 <__mulsi3>:
 518:	62 9f       	mul	r22, r18
 51a:	d0 01       	movw	r26, r0
 51c:	73 9f       	mul	r23, r19
 51e:	f0 01       	movw	r30, r0
 520:	82 9f       	mul	r24, r18
 522:	e0 0d       	add	r30, r0
 524:	f1 1d       	adc	r31, r1
 526:	64 9f       	mul	r22, r20
 528:	e0 0d       	add	r30, r0
 52a:	f1 1d       	adc	r31, r1
 52c:	92 9f       	mul	r25, r18
 52e:	f0 0d       	add	r31, r0
 530:	83 9f       	mul	r24, r19
 532:	f0 0d       	add	r31, r0
 534:	74 9f       	mul	r23, r20
 536:	f0 0d       	add	r31, r0
 538:	65 9f       	mul	r22, r21
 53a:	f0 0d       	add	r31, r0
 53c:	99 27       	eor	r25, r25
 53e:	72 9f       	mul	r23, r18
 540:	b0 0d       	add	r27, r0
 542:	e1 1d       	adc	r30, r1
 544:	f9 1f       	adc	r31, r25
 546:	63 9f       	mul	r22, r19
 548:	b0 0d       	add	r27, r0
 54a:	e1 1d       	adc	r30, r1
 54c:	f9 1f       	adc	r31, r25
 54e:	bd 01       	movw	r22, r26
 550:	cf 01       	movw	r24, r30
 552:	11 24       	eor	r1, r1
 554:	08 95       	ret

00000556 <__udivmodsi4>:
 556:	a1 e2       	ldi	r26, 0x21	; 33
 558:	1a 2e       	mov	r1, r26
 55a:	aa 1b       	sub	r26, r26
 55c:	bb 1b       	sub	r27, r27
 55e:	fd 01       	movw	r30, r26
 560:	0d c0       	rjmp	.+26     	; 0x57c <__udivmodsi4_ep>

00000562 <__udivmodsi4_loop>:
 562:	aa 1f       	adc	r26, r26
 564:	bb 1f       	adc	r27, r27
 566:	ee 1f       	adc	r30, r30
 568:	ff 1f       	adc	r31, r31
 56a:	a2 17       	cp	r26, r18
 56c:	b3 07       	cpc	r27, r19
 56e:	e4 07       	cpc	r30, r20
 570:	f5 07       	cpc	r31, r21
 572:	20 f0       	brcs	.+8      	; 0x57c <__udivmodsi4_ep>
 574:	a2 1b       	sub	r26, r18
 576:	b3 0b       	sbc	r27, r19
 578:	e4 0b       	sbc	r30, r20
 57a:	f5 0b       	sbc	r31, r21

0000057c <__udivmodsi4_ep>:
 57c:	66 1f       	adc	r22, r22
 57e:	77 1f       	adc	r23, r23
 580:	88 1f       	adc	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	1a 94       	dec	r1
 586:	69 f7       	brne	.-38     	; 0x562 <__udivmodsi4_loop>
 588:	60 95       	com	r22
 58a:	70 95       	com	r23
 58c:	80 95       	com	r24
 58e:	90 95       	com	r25
 590:	9b 01       	movw	r18, r22
 592:	ac 01       	movw	r20, r24
 594:	bd 01       	movw	r22, r26
 596:	cf 01       	movw	r24, r30
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
