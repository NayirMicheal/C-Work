
train.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001158  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00001158  000011ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000a2  008000a2  0000122e  2**0
                  ALLOC
  3 .stab         00001980  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000af6  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_1>
       8:	0c 94 31 03 	jmp	0x662	; 0x662 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 06 	call	0xc1c	; 0xc1c <main>
      8a:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2c 97       	sbiw	r28, 0x0c	; 12
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	69 87       	std	Y+9, r22	; 0x09
      a8:	7a 87       	std	Y+10, r23	; 0x0a
      aa:	8b 87       	std	Y+11, r24	; 0x0b
      ac:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=370*DelayValue;
      ae:	89 85       	ldd	r24, Y+9	; 0x09
      b0:	9a 85       	ldd	r25, Y+10	; 0x0a
      b2:	ab 85       	ldd	r26, Y+11	; 0x0b
      b4:	bc 85       	ldd	r27, Y+12	; 0x0c
      b6:	22 e7       	ldi	r18, 0x72	; 114
      b8:	31 e0       	ldi	r19, 0x01	; 1
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	50 e0       	ldi	r21, 0x00	; 0
      be:	bc 01       	movw	r22, r24
      c0:	cd 01       	movw	r24, r26
      c2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__mulsi3>
      c6:	dc 01       	movw	r26, r24
      c8:	cb 01       	movw	r24, r22
      ca:	89 83       	std	Y+1, r24	; 0x01
      cc:	9a 83       	std	Y+2, r25	; 0x02
      ce:	ab 83       	std	Y+3, r26	; 0x03
      d0:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
      d2:	1d 82       	std	Y+5, r1	; 0x05
      d4:	1e 82       	std	Y+6, r1	; 0x06
      d6:	1f 82       	std	Y+7, r1	; 0x07
      d8:	18 86       	std	Y+8, r1	; 0x08
      da:	0c c0       	rjmp	.+24     	; 0xf4 <Delay_ms+0x62>
	{
		asm("nop");
      dc:	00 00       	nop
#include "STD_TYPES.h"
void Delay_ms(u32 DelayValue)
{
	u32 i;
	u32 counts=370*DelayValue;
	for(i=0;i<counts;i++)
      de:	8d 81       	ldd	r24, Y+5	; 0x05
      e0:	9e 81       	ldd	r25, Y+6	; 0x06
      e2:	af 81       	ldd	r26, Y+7	; 0x07
      e4:	b8 85       	ldd	r27, Y+8	; 0x08
      e6:	01 96       	adiw	r24, 0x01	; 1
      e8:	a1 1d       	adc	r26, r1
      ea:	b1 1d       	adc	r27, r1
      ec:	8d 83       	std	Y+5, r24	; 0x05
      ee:	9e 83       	std	Y+6, r25	; 0x06
      f0:	af 83       	std	Y+7, r26	; 0x07
      f2:	b8 87       	std	Y+8, r27	; 0x08
      f4:	2d 81       	ldd	r18, Y+5	; 0x05
      f6:	3e 81       	ldd	r19, Y+6	; 0x06
      f8:	4f 81       	ldd	r20, Y+7	; 0x07
      fa:	58 85       	ldd	r21, Y+8	; 0x08
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	9a 81       	ldd	r25, Y+2	; 0x02
     100:	ab 81       	ldd	r26, Y+3	; 0x03
     102:	bc 81       	ldd	r27, Y+4	; 0x04
     104:	28 17       	cp	r18, r24
     106:	39 07       	cpc	r19, r25
     108:	4a 07       	cpc	r20, r26
     10a:	5b 07       	cpc	r21, r27
     10c:	38 f3       	brcs	.-50     	; 0xdc <Delay_ms+0x4a>
	{
		asm("nop");
	}	
}
     10e:	2c 96       	adiw	r28, 0x0c	; 12
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	de bf       	out	0x3e, r29	; 62
     116:	0f be       	out	0x3f, r0	; 63
     118:	cd bf       	out	0x3d, r28	; 61
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <Delay_us>:
void Delay_us(u32 DelayValue)
{
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
     128:	2c 97       	sbiw	r28, 0x0c	; 12
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	de bf       	out	0x3e, r29	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	cd bf       	out	0x3d, r28	; 61
     134:	69 87       	std	Y+9, r22	; 0x09
     136:	7a 87       	std	Y+10, r23	; 0x0a
     138:	8b 87       	std	Y+11, r24	; 0x0b
     13a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
     13c:	89 85       	ldd	r24, Y+9	; 0x09
     13e:	9a 85       	ldd	r25, Y+10	; 0x0a
     140:	ab 85       	ldd	r26, Y+11	; 0x0b
     142:	bc 85       	ldd	r27, Y+12	; 0x0c
     144:	27 e7       	ldi	r18, 0x77	; 119
     146:	31 e0       	ldi	r19, 0x01	; 1
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	bc 01       	movw	r22, r24
     14e:	cd 01       	movw	r24, r26
     150:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__mulsi3>
     154:	dc 01       	movw	r26, r24
     156:	cb 01       	movw	r24, r22
     158:	89 5d       	subi	r24, 0xD9	; 217
     15a:	94 44       	sbci	r25, 0x44	; 68
     15c:	a0 40       	sbci	r26, 0x00	; 0
     15e:	b0 40       	sbci	r27, 0x00	; 0
     160:	28 ee       	ldi	r18, 0xE8	; 232
     162:	33 e0       	ldi	r19, 0x03	; 3
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	bc 01       	movw	r22, r24
     16a:	cd 01       	movw	r24, r26
     16c:	0e 94 88 08 	call	0x1110	; 0x1110 <__udivmodsi4>
     170:	da 01       	movw	r26, r20
     172:	c9 01       	movw	r24, r18
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	ab 83       	std	Y+3, r26	; 0x03
     17a:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<counts;i++)
     17c:	1d 82       	std	Y+5, r1	; 0x05
     17e:	1e 82       	std	Y+6, r1	; 0x06
     180:	1f 82       	std	Y+7, r1	; 0x07
     182:	18 86       	std	Y+8, r1	; 0x08
     184:	0c c0       	rjmp	.+24     	; 0x19e <Delay_us+0x7e>
	{
		asm("nop");
     186:	00 00       	nop
}
void Delay_us(u32 DelayValue)
{
	u32 i;
	u32 counts=(((DelayValue-47)*375)/1000);
	for(i=0;i<counts;i++)
     188:	8d 81       	ldd	r24, Y+5	; 0x05
     18a:	9e 81       	ldd	r25, Y+6	; 0x06
     18c:	af 81       	ldd	r26, Y+7	; 0x07
     18e:	b8 85       	ldd	r27, Y+8	; 0x08
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	8d 83       	std	Y+5, r24	; 0x05
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	af 83       	std	Y+7, r26	; 0x07
     19c:	b8 87       	std	Y+8, r27	; 0x08
     19e:	2d 81       	ldd	r18, Y+5	; 0x05
     1a0:	3e 81       	ldd	r19, Y+6	; 0x06
     1a2:	4f 81       	ldd	r20, Y+7	; 0x07
     1a4:	58 85       	ldd	r21, Y+8	; 0x08
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	ab 81       	ldd	r26, Y+3	; 0x03
     1ac:	bc 81       	ldd	r27, Y+4	; 0x04
     1ae:	28 17       	cp	r18, r24
     1b0:	39 07       	cpc	r19, r25
     1b2:	4a 07       	cpc	r20, r26
     1b4:	5b 07       	cpc	r21, r27
     1b6:	38 f3       	brcs	.-50     	; 0x186 <Delay_us+0x66>
	{
		asm("nop");
	}
     1b8:	2c 96       	adiw	r28, 0x0c	; 12
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	cf 91       	pop	r28
     1c6:	df 91       	pop	r29
     1c8:	08 95       	ret

000001ca <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
     1ca:	df 93       	push	r29
     1cc:	cf 93       	push	r28
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
     1d2:	ea e3       	ldi	r30, 0x3A	; 58
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
     1da:	e7 e3       	ldi	r30, 0x37	; 55
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
     1e2:	e4 e3       	ldi	r30, 0x34	; 52
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
     1ea:	e1 e3       	ldi	r30, 0x31	; 49
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	8b ef       	ldi	r24, 0xFB	; 251
     1f0:	80 83       	st	Z, r24
}
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	08 95       	ret

000001f8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
     1f8:	df 93       	push	r29
     1fa:	cf 93       	push	r28
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <DIO_voidSetPinValue+0x6>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	89 83       	std	Y+1, r24	; 0x01
     204:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	88 30       	cpi	r24, 0x08	; 8
     20a:	60 f5       	brcc	.+88     	; 0x264 <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
     20c:	8a 81       	ldd	r24, Y+2	; 0x02
     20e:	88 23       	and	r24, r24
     210:	a1 f4       	brne	.+40     	; 0x23a <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
     212:	ab e3       	ldi	r26, 0x3B	; 59
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	eb e3       	ldi	r30, 0x3B	; 59
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	48 2f       	mov	r20, r24
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	28 2f       	mov	r18, r24
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 2e       	mov	r0, r18
     22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0x38>
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	0a 94       	dec	r0
     232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0x34>
     234:	84 2b       	or	r24, r20
     236:	8c 93       	st	X, r24
     238:	b3 c0       	rjmp	.+358    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
     23a:	ab e3       	ldi	r26, 0x3B	; 59
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	eb e3       	ldi	r30, 0x3B	; 59
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	48 2f       	mov	r20, r24
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	28 2f       	mov	r18, r24
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 2e       	mov	r0, r18
     252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0x60>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0x5c>
     25c:	80 95       	com	r24
     25e:	84 23       	and	r24, r20
     260:	8c 93       	st	X, r24
     262:	9e c0       	rjmp	.+316    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	88 30       	cpi	r24, 0x08	; 8
     268:	90 f1       	brcs	.+100    	; 0x2ce <DIO_voidSetPinValue+0xd6>
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	80 31       	cpi	r24, 0x10	; 16
     26e:	78 f5       	brcc	.+94     	; 0x2ce <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	88 50       	subi	r24, 0x08	; 8
     274:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
     276:	8a 81       	ldd	r24, Y+2	; 0x02
     278:	88 23       	and	r24, r24
     27a:	a1 f4       	brne	.+40     	; 0x2a4 <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
     27c:	a8 e3       	ldi	r26, 0x38	; 56
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	e8 e3       	ldi	r30, 0x38	; 56
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	48 2f       	mov	r20, r24
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	28 2f       	mov	r18, r24
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	02 2e       	mov	r0, r18
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_voidSetPinValue+0xa2>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_voidSetPinValue+0x9e>
     29e:	84 2b       	or	r24, r20
     2a0:	8c 93       	st	X, r24
     2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
     2a4:	a8 e3       	ldi	r26, 0x38	; 56
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e8 e3       	ldi	r30, 0x38	; 56
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	48 2f       	mov	r20, r24
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	28 2f       	mov	r18, r24
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 2e       	mov	r0, r18
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidSetPinValue+0xca>
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	0a 94       	dec	r0
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidSetPinValue+0xc6>
     2c6:	80 95       	com	r24
     2c8:	84 23       	and	r24, r20
     2ca:	8c 93       	st	X, r24
     2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	80 31       	cpi	r24, 0x10	; 16
     2d2:	90 f1       	brcs	.+100    	; 0x338 <DIO_voidSetPinValue+0x140>
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	88 31       	cpi	r24, 0x18	; 24
     2d8:	78 f5       	brcc	.+94     	; 0x338 <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	80 51       	subi	r24, 0x10	; 16
     2de:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
     2e0:	8a 81       	ldd	r24, Y+2	; 0x02
     2e2:	88 23       	and	r24, r24
     2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
     2e6:	a5 e3       	ldi	r26, 0x35	; 53
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e5 e3       	ldi	r30, 0x35	; 53
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	48 2f       	mov	r20, r24
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	28 2f       	mov	r18, r24
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	02 2e       	mov	r0, r18
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidSetPinValue+0x10c>
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidSetPinValue+0x108>
     308:	84 2b       	or	r24, r20
     30a:	8c 93       	st	X, r24
     30c:	49 c0       	rjmp	.+146    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
     30e:	a5 e3       	ldi	r26, 0x35	; 53
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	e5 e3       	ldi	r30, 0x35	; 53
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	48 2f       	mov	r20, r24
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	28 2f       	mov	r18, r24
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 2e       	mov	r0, r18
     326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x134>
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x130>
     330:	80 95       	com	r24
     332:	84 23       	and	r24, r20
     334:	8c 93       	st	X, r24
     336:	34 c0       	rjmp	.+104    	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 31       	cpi	r24, 0x18	; 24
     33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	80 32       	cpi	r24, 0x20	; 32
     342:	70 f5       	brcc	.+92     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	88 51       	subi	r24, 0x18	; 24
     348:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	88 23       	and	r24, r24
     34e:	a1 f4       	brne	.+40     	; 0x378 <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
     350:	a2 e3       	ldi	r26, 0x32	; 50
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e2 e3       	ldi	r30, 0x32	; 50
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	48 2f       	mov	r20, r24
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	02 2e       	mov	r0, r18
     368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0x176>
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	0a 94       	dec	r0
     370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0x172>
     372:	84 2b       	or	r24, r20
     374:	8c 93       	st	X, r24
     376:	14 c0       	rjmp	.+40     	; 0x3a0 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
     378:	a2 e3       	ldi	r26, 0x32	; 50
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e2 e3       	ldi	r30, 0x32	; 50
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	48 2f       	mov	r20, r24
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 2e       	mov	r0, r18
     390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x19e>
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	0a 94       	dec	r0
     398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x19a>
     39a:	80 95       	com	r24
     39c:	84 23       	and	r24, r20
     39e:	8c 93       	st	X, r24
		}			
	}
}
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	cf 91       	pop	r28
     3a6:	df 91       	pop	r29
     3a8:	08 95       	ret

000003aa <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
     3aa:	df 93       	push	r29
     3ac:	cf 93       	push	r28
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8GetPinValue+0x6>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8GetPinValue+0x8>
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	88 30       	cpi	r24, 0x08	; 8
     3bc:	00 f5       	brcc	.+64     	; 0x3fe <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
     3be:	8c 81       	ldd	r24, Y+4	; 0x04
     3c0:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
     3c2:	e9 e3       	ldi	r30, 0x39	; 57
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	48 2f       	mov	r20, r24
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8GetPinValue+0x32>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	2a 95       	dec	r18
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8GetPinValue+0x2e>
     3e0:	9a 01       	movw	r18, r20
     3e2:	28 23       	and	r18, r24
     3e4:	39 23       	and	r19, r25
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	88 2f       	mov	r24, r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	a9 01       	movw	r20, r18
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPinValue+0x4a>
     3f0:	55 95       	asr	r21
     3f2:	47 95       	ror	r20
     3f4:	8a 95       	dec	r24
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPinValue+0x46>
     3f8:	ca 01       	movw	r24, r20
     3fa:	8a 83       	std	Y+2, r24	; 0x02
     3fc:	74 c0       	rjmp	.+232    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
     3fe:	8c 81       	ldd	r24, Y+4	; 0x04
     400:	80 31       	cpi	r24, 0x10	; 16
     402:	20 f1       	brcs	.+72     	; 0x44c <DIO_u8GetPinValue+0xa2>
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	88 31       	cpi	r24, 0x18	; 24
     408:	08 f5       	brcc	.+66     	; 0x44c <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	88 50       	subi	r24, 0x08	; 8
     40e:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
     410:	e6 e3       	ldi	r30, 0x36	; 54
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	48 2f       	mov	r20, r24
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	8b 81       	ldd	r24, Y+3	; 0x03
     41c:	28 2f       	mov	r18, r24
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8GetPinValue+0x80>
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	2a 95       	dec	r18
     42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8GetPinValue+0x7c>
     42e:	9a 01       	movw	r18, r20
     430:	28 23       	and	r18, r24
     432:	39 23       	and	r19, r25
     434:	8b 81       	ldd	r24, Y+3	; 0x03
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	a9 01       	movw	r20, r18
     43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0x98>
     43e:	55 95       	asr	r21
     440:	47 95       	ror	r20
     442:	8a 95       	dec	r24
     444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0x94>
     446:	ca 01       	movw	r24, r20
     448:	8a 83       	std	Y+2, r24	; 0x02
     44a:	4d c0       	rjmp	.+154    	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	80 31       	cpi	r24, 0x10	; 16
     450:	20 f1       	brcs	.+72     	; 0x49a <DIO_u8GetPinValue+0xf0>
     452:	8c 81       	ldd	r24, Y+4	; 0x04
     454:	88 31       	cpi	r24, 0x18	; 24
     456:	08 f5       	brcc	.+66     	; 0x49a <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
     458:	8c 81       	ldd	r24, Y+4	; 0x04
     45a:	80 51       	subi	r24, 0x10	; 16
     45c:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
     45e:	e6 e3       	ldi	r30, 0x36	; 54
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	48 2f       	mov	r20, r24
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	28 2f       	mov	r18, r24
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8GetPinValue+0xce>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	2a 95       	dec	r18
     47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8GetPinValue+0xca>
     47c:	9a 01       	movw	r18, r20
     47e:	28 23       	and	r18, r24
     480:	39 23       	and	r19, r25
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	88 2f       	mov	r24, r24
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	a9 01       	movw	r20, r18
     48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8GetPinValue+0xe6>
     48c:	55 95       	asr	r21
     48e:	47 95       	ror	r20
     490:	8a 95       	dec	r24
     492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8GetPinValue+0xe2>
     494:	ca 01       	movw	r24, r20
     496:	8a 83       	std	Y+2, r24	; 0x02
     498:	26 c0       	rjmp	.+76     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
     49a:	8c 81       	ldd	r24, Y+4	; 0x04
     49c:	88 31       	cpi	r24, 0x18	; 24
     49e:	18 f1       	brcs	.+70     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
     4a0:	8c 81       	ldd	r24, Y+4	; 0x04
     4a2:	80 32       	cpi	r24, 0x20	; 32
     4a4:	00 f5       	brcc	.+64     	; 0x4e6 <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
     4a6:	8c 81       	ldd	r24, Y+4	; 0x04
     4a8:	88 51       	subi	r24, 0x18	; 24
     4aa:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
     4ac:	e0 e3       	ldi	r30, 0x30	; 48
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	48 2f       	mov	r20, r24
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	8b 81       	ldd	r24, Y+3	; 0x03
     4b8:	28 2f       	mov	r18, r24
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0x11c>
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	2a 95       	dec	r18
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0x118>
     4ca:	9a 01       	movw	r18, r20
     4cc:	28 23       	and	r18, r24
     4ce:	39 23       	and	r19, r25
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	88 2f       	mov	r24, r24
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	a9 01       	movw	r20, r18
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8GetPinValue+0x134>
     4da:	55 95       	asr	r21
     4dc:	47 95       	ror	r20
     4de:	8a 95       	dec	r24
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8GetPinValue+0x130>
     4e2:	ca 01       	movw	r24, r20
     4e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	88 23       	and	r24, r24
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	89 83       	std	Y+1, r24	; 0x01
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
     4f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	cf 91       	pop	r28
     506:	df 91       	pop	r29
     508:	08 95       	ret

0000050a <EXTI_voidInit>:
#include"EXTI_config.h"
#include "EXTI_int.h"
/*this function shall intialize the EXTI and*/
/*Set its ooperation initially disabled*/
void EXTI_voidInit(void)
{
     50a:	df 93       	push	r29
     50c:	cf 93       	push	r28
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
	/*set EXTI 0 mode to Interrupt on change*/
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif EXTI_INT0_MODE == EXTI_MODE_FALLING_EDGE
	/*set EXTI 0 mode to Interrupt on change*/
	CLR_BIT(MCUCR,0);
     512:	a5 e5       	ldi	r26, 0x55	; 85
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	e5 e5       	ldi	r30, 0x55	; 85
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	8e 7f       	andi	r24, 0xFE	; 254
     51e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
     520:	a5 e5       	ldi	r26, 0x55	; 85
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	e5 e5       	ldi	r30, 0x55	; 85
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	82 60       	ori	r24, 0x02	; 2
     52c:	8c 93       	st	X, r24
#endif
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
     52e:	ab e5       	ldi	r26, 0x5B	; 91
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	eb e5       	ldi	r30, 0x5B	; 91
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	8f 7b       	andi	r24, 0xBF	; 191
     53a:	8c 93       	st	X, r24

	/*Clear Flag*/
	SET_BIT(GIFR,6);
     53c:	aa e5       	ldi	r26, 0x5A	; 90
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	ea e5       	ldi	r30, 0x5A	; 90
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	80 64       	ori	r24, 0x40	; 64
     548:	8c 93       	st	X, r24
	CLR_BIT(GICR,7);

	/*Clear Flag*/
	SET_BIT(GIFR,7);
#endif
}
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	08 95       	ret

00000550 <EXTI_voidSetCallback_EXT0>:

/*this function shall set the callback pointer*/
/*to the recieved address*/
void EXTI_voidSetCallback_EXT0(void (*ptrCpy)(void))
{
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	00 d0       	rcall	.+0      	; 0x556 <EXTI_voidSetCallback_EXT0+0x6>
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	9a 83       	std	Y+2, r25	; 0x02
     55c:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidCallback_INT0=ptrCpy;
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	9a 81       	ldd	r25, Y+2	; 0x02
     562:	90 93 a3 00 	sts	0x00A3, r25
     566:	80 93 a2 00 	sts	0x00A2, r24
}
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	cf 91       	pop	r28
     570:	df 91       	pop	r29
     572:	08 95       	ret

00000574 <EXTI_voidSetCallback_EXT1>:

void EXTI_voidSetCallback_EXT1(void (*ptrCpy)(void))
{
     574:	df 93       	push	r29
     576:	cf 93       	push	r28
     578:	00 d0       	rcall	.+0      	; 0x57a <EXTI_voidSetCallback_EXT1+0x6>
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	9a 83       	std	Y+2, r25	; 0x02
     580:	89 83       	std	Y+1, r24	; 0x01
	EXTI_voidCallback_INT1=ptrCpy;
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	90 93 a5 00 	sts	0x00A5, r25
     58a:	80 93 a4 00 	sts	0x00A4, r24
}
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <EXTI_voidEnable_EXT0>:
/*this function shall enable the external interrupt*/
void EXTI_voidEnable_EXT0(void)
{
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
     5a0:	ab e5       	ldi	r26, 0x5B	; 91
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	eb e5       	ldi	r30, 0x5B	; 91
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	80 64       	ori	r24, 0x40	; 64
     5ac:	8c 93       	st	X, r24

}
     5ae:	cf 91       	pop	r28
     5b0:	df 91       	pop	r29
     5b2:	08 95       	ret

000005b4 <EXTI_voidEnable_EXT1>:

void EXTI_voidEnable_EXT1(void)
{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
	/*Enable EXTI 1*/
	SET_BIT(GICR,7);
     5bc:	ab e5       	ldi	r26, 0x5B	; 91
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	eb e5       	ldi	r30, 0x5B	; 91
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	80 68       	ori	r24, 0x80	; 128
     5c8:	8c 93       	st	X, r24

}
     5ca:	cf 91       	pop	r28
     5cc:	df 91       	pop	r29
     5ce:	08 95       	ret

000005d0 <EXTI_voidDisable_EXT0>:
/*this function shall disable the external interrupt*/
void EXTI_voidDisable_EXT0(void)
{
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
	/*Disable EXTI 0*/
	CLR_BIT(GICR,6);
     5d8:	ab e5       	ldi	r26, 0x5B	; 91
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	eb e5       	ldi	r30, 0x5B	; 91
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	8f 7b       	andi	r24, 0xBF	; 191
     5e4:	8c 93       	st	X, r24
}
     5e6:	cf 91       	pop	r28
     5e8:	df 91       	pop	r29
     5ea:	08 95       	ret

000005ec <EXTI_voidDisable_EXT1>:

void EXTI_voidDisable_EXT1(void)
{
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
	/*Disable EXTI 1*/
	CLR_BIT(GICR,7);
     5f4:	ab e5       	ldi	r26, 0x5B	; 91
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	eb e5       	ldi	r30, 0x5B	; 91
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	8f 77       	andi	r24, 0x7F	; 127
     600:	8c 93       	st	X, r24
}
     602:	cf 91       	pop	r28
     604:	df 91       	pop	r29
     606:	08 95       	ret

00000608 <__vector_1>:
void  __vector_1  (void) __attribute__((signal,used));
void  __vector_1  (void)
{
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	11 24       	eor	r1, r1
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallback_INT0();
     632:	e0 91 a2 00 	lds	r30, 0x00A2
     636:	f0 91 a3 00 	lds	r31, 0x00A3
     63a:	09 95       	icall
}
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	ff 91       	pop	r31
     642:	ef 91       	pop	r30
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <__vector_2>:

void  __vector_2  (void) __attribute__((signal,used));
void  __vector_2  (void)
{
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	2f 93       	push	r18
     66e:	3f 93       	push	r19
     670:	4f 93       	push	r20
     672:	5f 93       	push	r21
     674:	6f 93       	push	r22
     676:	7f 93       	push	r23
     678:	8f 93       	push	r24
     67a:	9f 93       	push	r25
     67c:	af 93       	push	r26
     67e:	bf 93       	push	r27
     680:	ef 93       	push	r30
     682:	ff 93       	push	r31
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallback_INT1();
     68c:	e0 91 a4 00 	lds	r30, 0x00A4
     690:	f0 91 a5 00 	lds	r31, 0x00A5
     694:	09 95       	icall
}
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	ff 91       	pop	r31
     69c:	ef 91       	pop	r30
     69e:	bf 91       	pop	r27
     6a0:	af 91       	pop	r26
     6a2:	9f 91       	pop	r25
     6a4:	8f 91       	pop	r24
     6a6:	7f 91       	pop	r23
     6a8:	6f 91       	pop	r22
     6aa:	5f 91       	pop	r21
     6ac:	4f 91       	pop	r20
     6ae:	3f 91       	pop	r19
     6b0:	2f 91       	pop	r18
     6b2:	0f 90       	pop	r0
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	0f 90       	pop	r0
     6b8:	1f 90       	pop	r1
     6ba:	18 95       	reti

000006bc <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     6c4:	af e5       	ldi	r26, 0x5F	; 95
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	ef e5       	ldi	r30, 0x5F	; 95
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	80 68       	ori	r24, 0x80	; 128
     6d0:	8c 93       	st	X, r24
}
     6d2:	cf 91       	pop	r28
     6d4:	df 91       	pop	r29
     6d6:	08 95       	ret

000006d8 <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
     6d8:	df 93       	push	r29
     6da:	cf 93       	push	r28
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     6e0:	af e5       	ldi	r26, 0x5F	; 95
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	ef e5       	ldi	r30, 0x5F	; 95
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	8f 77       	andi	r24, 0x7F	; 127
     6ec:	8c 93       	st	X, r24
}
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <LCD_voidInitialize>:
/**********************************************/
/*Description: This function is used to  */
/* Initialise LCD parameters             */
/*********************************************/
extern void LCD_voidInitialize(void)
{
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
	Delay_ms(50);
     6fc:	62 e3       	ldi	r22, 0x32	; 50
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*Write Function Set command*/
	voidWriteCmd(0b00110000 | (LCD_u8_FONT<<2) | (LCD_u8_NUM_OF_LINES<<3));
     708:	88 e3       	ldi	r24, 0x38	; 56
     70a:	0e 94 b3 03 	call	0x766	; 0x766 <voidWriteCmd>

	Delay_ms(1);
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write Display on command*/
	voidWriteCmd(0b00001000 | (LCD_u8_BLINK_ON_OFF<<0) | (LCD_u8_CURSOR_ON_OFF<<1) | (LCD_u8_DISPLAY_ON_OFF<<2));
     71a:	8c e0       	ldi	r24, 0x0C	; 12
     71c:	0e 94 b3 03 	call	0x766	; 0x766 <voidWriteCmd>

	Delay_ms(1);
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

	/*Write command clear display*/
	voidWriteCmd(0b00000001);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	0e 94 b3 03 	call	0x766	; 0x766 <voidWriteCmd>

	Delay_ms(2);
     732:	62 e0       	ldi	r22, 0x02	; 2
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
     73e:	cf 91       	pop	r28
     740:	df 91       	pop	r29
     742:	08 95       	ret

00000744 <voidWriteData>:
/*********************************************/
/*Description: This function is used to  */
/* write data to LCD             */
/*********************************************/
static void voidWriteData(u8 u8DataCpy)
{
     744:	df 93       	push	r29
     746:	cf 93       	push	r28
     748:	0f 92       	push	r0
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	89 83       	std	Y+1, r24	; 0x01
/*Set RS to high*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_HIGH);
     750:	80 e1       	ldi	r24, 0x10	; 16
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
/*Execute Command */
	voidLcdExecute(u8DataCpy);
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	0e 94 c4 03 	call	0x788	; 0x788 <voidLcdExecute>
}
     75e:	0f 90       	pop	r0
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	08 95       	ret

00000766 <voidWriteCmd>:
/*Description: This function is used to  */
/* Execute LCD commands            */
/*********************************************/
static void voidWriteCmd(u8 u8CommandCpy)
{
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	0f 92       	push	r0
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to Low*/
	DIO_voidSetPinValue(LCD_u8_RS_PIN,DIO_u8_LOW);
     772:	80 e1       	ldi	r24, 0x10	; 16
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Execute Command */
	voidLcdExecute(u8CommandCpy);
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	0e 94 c4 03 	call	0x788	; 0x788 <voidLcdExecute>
}
     780:	0f 90       	pop	r0
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	08 95       	ret

00000788 <voidLcdExecute>:
/*********************************************/
/*Description: This function is used to  */
/* Execute data on LCD lines             */
/*********************************************/
static void voidLcdExecute(u8 u8ValueCpy)
{
     788:	df 93       	push	r29
     78a:	cf 93       	push	r28
     78c:	00 d0       	rcall	.+0      	; 0x78e <voidLcdExecute+0x6>
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	8a 83       	std	Y+2, r24	; 0x02
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
     794:	81 e1       	ldi	r24, 0x11	; 17
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
     79c:	19 82       	std	Y+1, r1	; 0x01
     79e:	34 c0       	rjmp	.+104    	; 0x808 <voidLcdExecute+0x80>
	{
		if(GET_BIT(u8ValueCpy,u8PinsCounterLocal))
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	48 2f       	mov	r20, r24
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	28 2f       	mov	r18, r24
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <voidLcdExecute+0x2e>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	2a 95       	dec	r18
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <voidLcdExecute+0x2a>
     7ba:	9a 01       	movw	r18, r20
     7bc:	28 23       	and	r18, r24
     7be:	39 23       	and	r19, r25
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	88 2f       	mov	r24, r24
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a9 01       	movw	r20, r18
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <voidLcdExecute+0x46>
     7ca:	55 95       	asr	r21
     7cc:	47 95       	ror	r20
     7ce:	8a 95       	dec	r24
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <voidLcdExecute+0x42>
     7d2:	ca 01       	movw	r24, r20
     7d4:	00 97       	sbiw	r24, 0x00	; 0
     7d6:	59 f0       	breq	.+22     	; 0x7ee <voidLcdExecute+0x66>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_HIGH);
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	88 2f       	mov	r24, r24
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	fc 01       	movw	r30, r24
     7e0:	e5 58       	subi	r30, 0x85	; 133
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	80 81       	ld	r24, Z
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
     7ec:	0a c0       	rjmp	.+20     	; 0x802 <voidLcdExecute+0x7a>
		}
			else
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	88 2f       	mov	r24, r24
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	e5 58       	subi	r30, 0x85	; 133
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	80 81       	ld	r24, Z
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
static void voidLcdExecute(u8 u8ValueCpy)
{
	/*Set RW to LOW*/
	DIO_voidSetPinValue(LCD_u8_RW_PIN,DIO_u8_LOW);
    /*Set Received data to LCD Lines*/
	for(u8 u8PinsCounterLocal=0;u8PinsCounterLocal<8;u8PinsCounterLocal++)
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	8f 5f       	subi	r24, 0xFF	; 255
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	88 30       	cpi	r24, 0x08	; 8
     80c:	48 f2       	brcs	.-110    	; 0x7a0 <voidLcdExecute+0x18>
		{
				DIO_voidSetPinValue(u8LCDDataPins[u8PinsCounterLocal],DIO_u8_LOW);
		}
	}
		/*set Enable high*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_HIGH);
     80e:	82 e1       	ldi	r24, 0x12	; 18
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*Delay 1 Ms*/
	Delay_ms(1);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
	/*set Enable low*/
	DIO_voidSetPinValue(LCD_u8_E_PIN,DIO_u8_LOW);
     822:	82 e1       	ldi	r24, 0x12	; 18
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
}
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	cf 91       	pop	r28
     830:	df 91       	pop	r29
     832:	08 95       	ret

00000834 <LCD_voidWriteStringXY>:


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	00 d0       	rcall	.+0      	; 0x83a <LCD_voidWriteStringXY+0x6>
     83a:	00 d0       	rcall	.+0      	; 0x83c <LCD_voidWriteStringXY+0x8>
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	6b 83       	std	Y+3, r22	; 0x03
     846:	4c 83       	std	Y+4, r20	; 0x04
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
     848:	8c 81       	ldd	r24, Y+4	; 0x04
     84a:	88 2f       	mov	r24, r24
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	00 24       	eor	r0, r0
     850:	96 95       	lsr	r25
     852:	87 95       	ror	r24
     854:	07 94       	ror	r0
     856:	96 95       	lsr	r25
     858:	87 95       	ror	r24
     85a:	07 94       	ror	r0
     85c:	98 2f       	mov	r25, r24
     85e:	80 2d       	mov	r24, r0
     860:	98 2f       	mov	r25, r24
     862:	90 68       	ori	r25, 0x80	; 128
     864:	8b 81       	ldd	r24, Y+3	; 0x03
     866:	89 2b       	or	r24, r25
     868:	0e 94 b3 03 	call	0x766	; 0x766 <voidWriteCmd>
     86c:	0a c0       	rjmp	.+20     	; 0x882 <__stack+0x23>
	while(*u8PtrCpy)
	{
		voidWriteData(*u8PtrCpy);
     86e:	e9 81       	ldd	r30, Y+1	; 0x01
     870:	fa 81       	ldd	r31, Y+2	; 0x02
     872:	80 81       	ld	r24, Z
     874:	0e 94 a2 03 	call	0x744	; 0x744 <voidWriteData>
		u8PtrCpy++;
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	89 83       	std	Y+1, r24	; 0x01


extern void LCD_voidWriteStringXY(u8 * u8PtrCpy,u8 u8XposCpy,u8 u8YposCpy)
{
	voidWriteCmd((0x80 | (u8YposCpy<<6) | u8XposCpy));
	while(*u8PtrCpy)
     882:	e9 81       	ldd	r30, Y+1	; 0x01
     884:	fa 81       	ldd	r31, Y+2	; 0x02
     886:	80 81       	ld	r24, Z
     888:	88 23       	and	r24, r24
     88a:	89 f7       	brne	.-30     	; 0x86e <__stack+0xf>
	{
		voidWriteData(*u8PtrCpy);
		u8PtrCpy++;
	}
}
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	cf 91       	pop	r28
     896:	df 91       	pop	r29
     898:	08 95       	ret

0000089a <LCD_voidWriteStringCurrentPosition>:
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
     89a:	df 93       	push	r29
     89c:	cf 93       	push	r28
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <LCD_voidWriteStringCurrentPosition+0x6>
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <LCD_voidWriteStringCurrentPosition+0x24>
	while(*u8PtrCpy)
		{
			voidWriteData(*u8PtrCpy);
     8aa:	e9 81       	ldd	r30, Y+1	; 0x01
     8ac:	fa 81       	ldd	r31, Y+2	; 0x02
     8ae:	80 81       	ld	r24, Z
     8b0:	0e 94 a2 03 	call	0x744	; 0x744 <voidWriteData>
			u8PtrCpy++;
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	9a 83       	std	Y+2, r25	; 0x02
     8bc:	89 83       	std	Y+1, r24	; 0x01
		u8PtrCpy++;
	}
}
extern void LCD_voidWriteStringCurrentPosition(u8 * u8PtrCpy)
{
	while(*u8PtrCpy)
     8be:	e9 81       	ldd	r30, Y+1	; 0x01
     8c0:	fa 81       	ldd	r31, Y+2	; 0x02
     8c2:	80 81       	ld	r24, Z
     8c4:	88 23       	and	r24, r24
     8c6:	89 f7       	brne	.-30     	; 0x8aa <LCD_voidWriteStringCurrentPosition+0x10>
		{
			voidWriteData(*u8PtrCpy);
			u8PtrCpy++;
		}
}
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	cf 91       	pop	r28
     8ce:	df 91       	pop	r29
     8d0:	08 95       	ret

000008d2 <LCD_voidClearDisplay>:
extern void LCD_voidClearDisplay(void)
{
     8d2:	df 93       	push	r29
     8d4:	cf 93       	push	r28
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
	voidWriteCmd(0b00000001);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 b3 03 	call	0x766	; 0x766 <voidWriteCmd>
	Delay_ms(2);
     8e0:	62 e0       	ldi	r22, 0x02	; 2
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>
}
     8ec:	cf 91       	pop	r28
     8ee:	df 91       	pop	r29
     8f0:	08 95       	ret

000008f2 <LCD_voidDrawCustomChar>:

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <LCD_voidDrawCustomChar+0x6>
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <LCD_voidDrawCustomChar+0x8>
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	9b 83       	std	Y+3, r25	; 0x03
     900:	8a 83       	std	Y+2, r24	; 0x02
     902:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
     904:	8c 81       	ldd	r24, Y+4	; 0x04
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	80 64       	ori	r24, 0x40	; 64
     918:	0e 94 b3 03 	call	0x766	; 0x766 <voidWriteCmd>
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
     91c:	19 82       	std	Y+1, r1	; 0x01
     91e:	0e c0       	rjmp	.+28     	; 0x93c <LCD_voidDrawCustomChar+0x4a>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	8a 81       	ldd	r24, Y+2	; 0x02
     928:	9b 81       	ldd	r25, Y+3	; 0x03
     92a:	fc 01       	movw	r30, r24
     92c:	e2 0f       	add	r30, r18
     92e:	f3 1f       	adc	r31, r19
     930:	80 81       	ld	r24, Z
     932:	0e 94 a2 03 	call	0x744	; 0x744 <voidWriteData>
}

extern void LCD_voidDrawCustomChar(u8 * u8PtrCpy,u8 u8IndexCpy)
{
	voidWriteCmd(0b01000000 | (u8IndexCpy<<3));
	for(u8 u8BytesCounterLocal=0;u8BytesCounterLocal<8;u8BytesCounterLocal++)
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	8f 5f       	subi	r24, 0xFF	; 255
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	88 30       	cpi	r24, 0x08	; 8
     940:	78 f3       	brcs	.-34     	; 0x920 <LCD_voidDrawCustomChar+0x2e>
	{
		voidWriteData(u8PtrCpy[u8BytesCounterLocal]);
	}
}
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	08 95       	ret

00000950 <LCD_voidWriteCustomChar>:

extern void LCD_voidWriteCustomChar(u8 u8IndexCpy ,u8 u8XPositionCpy,u8 u8YPositionCpy)
{
     950:	df 93       	push	r29
     952:	cf 93       	push	r28
     954:	00 d0       	rcall	.+0      	; 0x956 <LCD_voidWriteCustomChar+0x6>
     956:	0f 92       	push	r0
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	6a 83       	std	Y+2, r22	; 0x02
     960:	4b 83       	std	Y+3, r20	; 0x03
	voidWriteCmd((0x80 | (u8YPositionCpy<<6) | u8XPositionCpy));
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	00 24       	eor	r0, r0
     96a:	96 95       	lsr	r25
     96c:	87 95       	ror	r24
     96e:	07 94       	ror	r0
     970:	96 95       	lsr	r25
     972:	87 95       	ror	r24
     974:	07 94       	ror	r0
     976:	98 2f       	mov	r25, r24
     978:	80 2d       	mov	r24, r0
     97a:	98 2f       	mov	r25, r24
     97c:	90 68       	ori	r25, 0x80	; 128
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	89 2b       	or	r24, r25
     982:	0e 94 b3 03 	call	0x766	; 0x766 <voidWriteCmd>
	voidWriteData(u8IndexCpy);
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	0e 94 a2 03 	call	0x744	; 0x744 <voidWriteData>
}
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	08 95       	ret

00000998 <LEDS_voidSetLedOn>:
#include "STD_TYPES.h"
#include "DIO_int.h"
#include "LEDS_priv.h"
#include "LEDS_int.h"
void LEDS_voidSetLedOn(u8 u8LedIndexCpy)
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	0f 92       	push	r0
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	89 83       	std	Y+1, r24	; 0x01

	if(u8LedIndexCpy < LEDS_u8_LEDS_NB)
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	f0 f4       	brcc	.+60     	; 0x9e6 <LEDS_voidSetLedOn+0x4e>
	{
		if (LEDS_u8LedMode[u8LedIndexCpy] == LEDS_u8_MODE_NORMAL)
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	88 2f       	mov	r24, r24
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	fc 01       	movw	r30, r24
     9b2:	eb 57       	subi	r30, 0x7B	; 123
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	80 81       	ld	r24, Z
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	59 f4       	brne	.+22     	; 0x9d2 <LEDS_voidSetLedOn+0x3a>
		{
			DIO_voidSetPinValue(LEDS_u8LedToDioLink[u8LedIndexCpy],DIO_u8_HIGH);
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	88 2f       	mov	r24, r24
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	fc 01       	movw	r30, r24
     9c4:	ed 57       	subi	r30, 0x7D	; 125
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	80 81       	ld	r24, Z
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
     9d0:	0a c0       	rjmp	.+20     	; 0x9e6 <LEDS_voidSetLedOn+0x4e>
		}
		else
		{
			DIO_voidSetPinValue(LEDS_u8LedToDioLink[u8LedIndexCpy],DIO_u8_LOW);
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	88 2f       	mov	r24, r24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	fc 01       	movw	r30, r24
     9da:	ed 57       	subi	r30, 0x7D	; 125
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	80 81       	ld	r24, Z
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	}
	else
	{

	}
}
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <LEDS_voidSetLedOff>:
void LEDS_voidSetLedOff(u8 u8LedIndexCpy)
{
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	0f 92       	push	r0
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	89 83       	std	Y+1, r24	; 0x01

	if(u8LedIndexCpy < LEDS_u8_LEDS_NB)
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	82 30       	cpi	r24, 0x02	; 2
     9fe:	f0 f4       	brcc	.+60     	; 0xa3c <LEDS_voidSetLedOff+0x4e>
	{
		if (LEDS_u8LedMode[u8LedIndexCpy] == LEDS_u8_MODE_NORMAL)
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	88 2f       	mov	r24, r24
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	fc 01       	movw	r30, r24
     a08:	eb 57       	subi	r30, 0x7B	; 123
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	59 f4       	brne	.+22     	; 0xa28 <LEDS_voidSetLedOff+0x3a>
		{
			DIO_voidSetPinValue(LEDS_u8LedToDioLink[u8LedIndexCpy],DIO_u8_LOW);
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	fc 01       	movw	r30, r24
     a1a:	ed 57       	subi	r30, 0x7D	; 125
     a1c:	ff 4f       	sbci	r31, 0xFF	; 255
     a1e:	80 81       	ld	r24, Z
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
     a26:	0a c0       	rjmp	.+20     	; 0xa3c <LEDS_voidSetLedOff+0x4e>
		}
		else
		{
			DIO_voidSetPinValue(LEDS_u8LedToDioLink[u8LedIndexCpy],DIO_u8_HIGH);
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	fc 01       	movw	r30, r24
     a30:	ed 57       	subi	r30, 0x7D	; 125
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	80 81       	ld	r24, Z
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	}
	else
	{

	}
}
     a3c:	0f 90       	pop	r0
     a3e:	cf 91       	pop	r28
     a40:	df 91       	pop	r29
     a42:	08 95       	ret

00000a44 <LED_MATRIX_voidCloseLedMatrix>:
#include"LED_MATRIX_priv.h"
#include "LED_MATRIX_int.h"
#include "LED_MATRIX_config.h"

void LED_MATRIX_voidCloseLedMatrix(void)
{
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
#if u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTA
		PORTA=0xff;
     a4c:	eb e3       	ldi	r30, 0x3B	; 59
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	80 83       	st	Z, r24
		PORTC=0xff;
#elif u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTD
		PORTD=0xff;
#endif

}
     a54:	cf 91       	pop	r28
     a56:	df 91       	pop	r29
     a58:	08 95       	ret

00000a5a <LED_MATRIX_voidLedMatrixOutputImage>:
void LED_MATRIX_voidLedMatrixOutputImage(u8* u8ImageCopy)
{
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	60 97       	sbiw	r28, 0x10	; 16
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	9b 87       	std	Y+11, r25	; 0x0b
     a70:	8a 87       	std	Y+10, r24	; 0x0a
	u8 u8ColsActivationLoc [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
     a72:	ce 01       	movw	r24, r28
     a74:	02 96       	adiw	r24, 0x02	; 2
     a76:	9d 87       	std	Y+13, r25	; 0x0d
     a78:	8c 87       	std	Y+12, r24	; 0x0c
     a7a:	e7 e8       	ldi	r30, 0x87	; 135
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ff 87       	std	Y+15, r31	; 0x0f
     a80:	ee 87       	std	Y+14, r30	; 0x0e
     a82:	f8 e0       	ldi	r31, 0x08	; 8
     a84:	f8 8b       	std	Y+16, r31	; 0x10
     a86:	ee 85       	ldd	r30, Y+14	; 0x0e
     a88:	ff 85       	ldd	r31, Y+15	; 0x0f
     a8a:	00 80       	ld	r0, Z
     a8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     a8e:	9f 85       	ldd	r25, Y+15	; 0x0f
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	9f 87       	std	Y+15, r25	; 0x0f
     a94:	8e 87       	std	Y+14, r24	; 0x0e
     a96:	ec 85       	ldd	r30, Y+12	; 0x0c
     a98:	fd 85       	ldd	r31, Y+13	; 0x0d
     a9a:	00 82       	st	Z, r0
     a9c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a9e:	9d 85       	ldd	r25, Y+13	; 0x0d
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	9d 87       	std	Y+13, r25	; 0x0d
     aa4:	8c 87       	std	Y+12, r24	; 0x0c
     aa6:	98 89       	ldd	r25, Y+16	; 0x10
     aa8:	91 50       	subi	r25, 0x01	; 1
     aaa:	98 8b       	std	Y+16, r25	; 0x10
     aac:	e8 89       	ldd	r30, Y+16	; 0x10
     aae:	ee 23       	and	r30, r30
     ab0:	51 f7       	brne	.-44     	; 0xa86 <LED_MATRIX_voidLedMatrixOutputImage+0x2c>
	for(u8 u8ColAndRowsLoc=0;u8ColAndRowsLoc<u8_LED_MATRIX_SIZE;u8ColAndRowsLoc++)
     ab2:	19 82       	std	Y+1, r1	; 0x01
     ab4:	21 c0       	rjmp	.+66     	; 0xaf8 <LED_MATRIX_voidLedMatrixOutputImage+0x9e>
	{
#if u8_LED_MATRIX_COL_PORT == u8_LED_MATRIX_PORTA
		PORTA=u8ColsActivationLoc[u8ColAndRowsLoc];
     ab6:	ab e3       	ldi	r26, 0x3B	; 59
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	ce 01       	movw	r24, r28
     ac2:	02 96       	adiw	r24, 0x02	; 2
     ac4:	fc 01       	movw	r30, r24
     ac6:	e2 0f       	add	r30, r18
     ac8:	f3 1f       	adc	r31, r19
     aca:	80 81       	ld	r24, Z
     acc:	8c 93       	st	X, r24
#endif

#if u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTA
		PORTA=u8ImageCopy[u8ColAndRowsLoc];
#elif u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTB
		PORTB=u8ImageCopy[u8ColAndRowsLoc];
     ace:	a8 e3       	ldi	r26, 0x38	; 56
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	28 2f       	mov	r18, r24
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
     ada:	9b 85       	ldd	r25, Y+11	; 0x0b
     adc:	fc 01       	movw	r30, r24
     ade:	e2 0f       	add	r30, r18
     ae0:	f3 1f       	adc	r31, r19
     ae2:	80 81       	ld	r24, Z
     ae4:	8c 93       	st	X, r24
#elif u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTC
		PORTC=u8ImageCopy[u8ColAndRowsLoc];
#elif u8_LED_MATRIX_ROW_PORT == u8_LED_MATRIX_PORTD
		PORTD=u8ImageCopy[u8ColAndRowsLoc];
#endif
		Delay_ms(u8_LED_MATRIX_POV_DELAY);
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 49 00 	call	0x92	; 0x92 <Delay_ms>

}
void LED_MATRIX_voidLedMatrixOutputImage(u8* u8ImageCopy)
{
	u8 u8ColsActivationLoc [8] ={0b11111110,0b11111101,0b11111011,0b11110111,0b11101111,0b11011111,0b10111111,0b01111111};
	for(u8 u8ColAndRowsLoc=0;u8ColAndRowsLoc<u8_LED_MATRIX_SIZE;u8ColAndRowsLoc++)
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	88 30       	cpi	r24, 0x08	; 8
     afc:	e0 f2       	brcs	.-72     	; 0xab6 <LED_MATRIX_voidLedMatrixOutputImage+0x5c>
		PORTD=u8ImageCopy[u8ColAndRowsLoc];
#endif
		Delay_ms(u8_LED_MATRIX_POV_DELAY);
	}

}
     afe:	60 96       	adiw	r28, 0x10	; 16
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	cf 91       	pop	r28
     b0c:	df 91       	pop	r29
     b0e:	08 95       	ret

00000b10 <SevenSeg_voidDisplayOnSeg>:
#include "SEVENSEG_int.h"
#include "SEVENSEG_priv.h"

/*Display on Seven segment take a u8 variable a display it on the seven segment */
void SevenSeg_voidDisplayOnSeg(u8 u8PaternCpy)
{
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	0f 92       	push	r0
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	89 83       	std	Y+1, r24	; 0x01
	/*if the seven segment type is Anode type*/
#if u8_SEVENSEG_TYPE == u8_SEVENSEG_ANODE
	/*then set the bit of the common with high value*/
	//DIO_voidSetPinValue(u8_SEVENSEG_SEG_COMMON,DIO_u8_HIGH);
	/*get bit 0 of the sent variable and out it on the seven segment A*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_A,GET_BIT(u8PaternCpy,0));
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	98 2f       	mov	r25, r24
     b20:	91 70       	andi	r25, 0x01	; 1
     b22:	88 e0       	ldi	r24, 0x08	; 8
     b24:	69 2f       	mov	r22, r25
     b26:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*get bit 1 of the sent variable and out it on the seven segment B*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_B,GET_BIT(u8PaternCpy,1));
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	88 2f       	mov	r24, r24
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	82 70       	andi	r24, 0x02	; 2
     b32:	90 70       	andi	r25, 0x00	; 0
     b34:	95 95       	asr	r25
     b36:	87 95       	ror	r24
     b38:	98 2f       	mov	r25, r24
     b3a:	89 e0       	ldi	r24, 0x09	; 9
     b3c:	69 2f       	mov	r22, r25
     b3e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*get bit 2 of the sent variable and out it on the seven segment C*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_C,GET_BIT(u8PaternCpy,2));
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	88 2f       	mov	r24, r24
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	84 70       	andi	r24, 0x04	; 4
     b4a:	90 70       	andi	r25, 0x00	; 0
     b4c:	95 95       	asr	r25
     b4e:	87 95       	ror	r24
     b50:	95 95       	asr	r25
     b52:	87 95       	ror	r24
     b54:	98 2f       	mov	r25, r24
     b56:	8a e0       	ldi	r24, 0x0A	; 10
     b58:	69 2f       	mov	r22, r25
     b5a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*get bit 3 of the sent variable and out it on the seven segment D*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_D,GET_BIT(u8PaternCpy,3));
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	88 70       	andi	r24, 0x08	; 8
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	95 95       	asr	r25
     b6a:	87 95       	ror	r24
     b6c:	95 95       	asr	r25
     b6e:	87 95       	ror	r24
     b70:	95 95       	asr	r25
     b72:	87 95       	ror	r24
     b74:	98 2f       	mov	r25, r24
     b76:	8b e0       	ldi	r24, 0x0B	; 11
     b78:	69 2f       	mov	r22, r25
     b7a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*get bit 4 of the sent variable and out it on the seven segment E*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_E,GET_BIT(u8PaternCpy,4));
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	80 71       	andi	r24, 0x10	; 16
     b86:	90 70       	andi	r25, 0x00	; 0
     b88:	95 95       	asr	r25
     b8a:	87 95       	ror	r24
     b8c:	95 95       	asr	r25
     b8e:	87 95       	ror	r24
     b90:	95 95       	asr	r25
     b92:	87 95       	ror	r24
     b94:	95 95       	asr	r25
     b96:	87 95       	ror	r24
     b98:	98 2f       	mov	r25, r24
     b9a:	8c e0       	ldi	r24, 0x0C	; 12
     b9c:	69 2f       	mov	r22, r25
     b9e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*get bit 5 of the sent variable and out it on the seven segment F*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_F,GET_BIT(u8PaternCpy,5));
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	80 72       	andi	r24, 0x20	; 32
     baa:	90 70       	andi	r25, 0x00	; 0
     bac:	95 95       	asr	r25
     bae:	87 95       	ror	r24
     bb0:	95 95       	asr	r25
     bb2:	87 95       	ror	r24
     bb4:	95 95       	asr	r25
     bb6:	87 95       	ror	r24
     bb8:	95 95       	asr	r25
     bba:	87 95       	ror	r24
     bbc:	95 95       	asr	r25
     bbe:	87 95       	ror	r24
     bc0:	98 2f       	mov	r25, r24
     bc2:	8d e0       	ldi	r24, 0x0D	; 13
     bc4:	69 2f       	mov	r22, r25
     bc6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*get bit 6 of the sent variable and out it on the seven segment G*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_G,GET_BIT(u8PaternCpy,6));
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	80 74       	andi	r24, 0x40	; 64
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	08 2e       	mov	r0, r24
     bd6:	89 2f       	mov	r24, r25
     bd8:	00 0c       	add	r0, r0
     bda:	88 1f       	adc	r24, r24
     bdc:	99 0b       	sbc	r25, r25
     bde:	00 0c       	add	r0, r0
     be0:	88 1f       	adc	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	98 2f       	mov	r25, r24
     be6:	8e e0       	ldi	r24, 0x0E	; 14
     be8:	69 2f       	mov	r22, r25
     bea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*get bit 7 of the sent variable and out it on the seven segment DOT*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_DOT,GET_BIT(u8PaternCpy,7));
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	98 2f       	mov	r25, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	99 27       	eor	r25, r25
     bf6:	99 1f       	adc	r25, r25
     bf8:	8f e0       	ldi	r24, 0x0F	; 15
     bfa:	69 2f       	mov	r22, r25
     bfc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*get bit 7 of the sent variable and out it on the seven segment DOT*/
	DIO_voidSetPinValue(u8_SEVENSEG_SEG_DOT,!GET_BIT(u8PaternCpy,7));
#endif


}
     c00:	0f 90       	pop	r0
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <int0_function>:
volatile static u8 counter=0;

/*this function set the counter to 99 when
 * the switch is pressed on interrupt*/
void int0_function(void)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
	counter=99;
     c10:	83 e6       	ldi	r24, 0x63	; 99
     c12:	80 93 a6 00 	sts	0x00A6, r24
}
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <main>:
void main (void)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	c4 55       	subi	r28, 0x54	; 84
     c26:	d0 40       	sbci	r29, 0x00	; 0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
	u8 Motoropen=0;
     c32:	1d 82       	std	Y+5, r1	; 0x05
	u8 words[][9]={"Welcome","Pepsi","Cocacola","Mac"};
     c34:	84 e2       	ldi	r24, 0x24	; 36
     c36:	fe 01       	movw	r30, r28
     c38:	36 96       	adiw	r30, 0x06	; 6
     c3a:	df 01       	movw	r26, r30
     c3c:	98 2f       	mov	r25, r24
     c3e:	1d 92       	st	X+, r1
     c40:	9a 95       	dec	r25
     c42:	e9 f7       	brne	.-6      	; 0xc3e <main+0x22>
     c44:	de 01       	movw	r26, r28
     c46:	16 96       	adiw	r26, 0x06	; 6
     c48:	bd af       	std	Y+61, r27	; 0x3d
     c4a:	ac af       	std	Y+60, r26	; 0x3c
     c4c:	e0 e6       	ldi	r30, 0x60	; 96
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	ff af       	std	Y+63, r31	; 0x3f
     c52:	ee af       	std	Y+62, r30	; 0x3e
     c54:	f8 e0       	ldi	r31, 0x08	; 8
     c56:	21 96       	adiw	r28, 0x01	; 1
     c58:	ff af       	std	Y+63, r31	; 0x3f
     c5a:	21 97       	sbiw	r28, 0x01	; 1
     c5c:	ae ad       	ldd	r26, Y+62	; 0x3e
     c5e:	bf ad       	ldd	r27, Y+63	; 0x3f
     c60:	0c 90       	ld	r0, X
     c62:	ee ad       	ldd	r30, Y+62	; 0x3e
     c64:	ff ad       	ldd	r31, Y+63	; 0x3f
     c66:	31 96       	adiw	r30, 0x01	; 1
     c68:	ff af       	std	Y+63, r31	; 0x3f
     c6a:	ee af       	std	Y+62, r30	; 0x3e
     c6c:	ac ad       	ldd	r26, Y+60	; 0x3c
     c6e:	bd ad       	ldd	r27, Y+61	; 0x3d
     c70:	0c 92       	st	X, r0
     c72:	ec ad       	ldd	r30, Y+60	; 0x3c
     c74:	fd ad       	ldd	r31, Y+61	; 0x3d
     c76:	31 96       	adiw	r30, 0x01	; 1
     c78:	fd af       	std	Y+61, r31	; 0x3d
     c7a:	ec af       	std	Y+60, r30	; 0x3c
     c7c:	21 96       	adiw	r28, 0x01	; 1
     c7e:	ff ad       	ldd	r31, Y+63	; 0x3f
     c80:	21 97       	sbiw	r28, 0x01	; 1
     c82:	f1 50       	subi	r31, 0x01	; 1
     c84:	21 96       	adiw	r28, 0x01	; 1
     c86:	ff af       	std	Y+63, r31	; 0x3f
     c88:	21 97       	sbiw	r28, 0x01	; 1
     c8a:	21 96       	adiw	r28, 0x01	; 1
     c8c:	8f ad       	ldd	r24, Y+63	; 0x3f
     c8e:	21 97       	sbiw	r28, 0x01	; 1
     c90:	88 23       	and	r24, r24
     c92:	21 f7       	brne	.-56     	; 0xc5c <main+0x40>
     c94:	1e 86       	std	Y+14, r1	; 0x0e
     c96:	de 01       	movw	r26, r28
     c98:	1f 96       	adiw	r26, 0x0f	; 15
     c9a:	23 96       	adiw	r28, 0x03	; 3
     c9c:	bf af       	std	Y+63, r27	; 0x3f
     c9e:	ae af       	std	Y+62, r26	; 0x3e
     ca0:	23 97       	sbiw	r28, 0x03	; 3
     ca2:	e9 e6       	ldi	r30, 0x69	; 105
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	25 96       	adiw	r28, 0x05	; 5
     ca8:	ff af       	std	Y+63, r31	; 0x3f
     caa:	ee af       	std	Y+62, r30	; 0x3e
     cac:	25 97       	sbiw	r28, 0x05	; 5
     cae:	f6 e0       	ldi	r31, 0x06	; 6
     cb0:	26 96       	adiw	r28, 0x06	; 6
     cb2:	ff af       	std	Y+63, r31	; 0x3f
     cb4:	26 97       	sbiw	r28, 0x06	; 6
     cb6:	25 96       	adiw	r28, 0x05	; 5
     cb8:	ae ad       	ldd	r26, Y+62	; 0x3e
     cba:	bf ad       	ldd	r27, Y+63	; 0x3f
     cbc:	25 97       	sbiw	r28, 0x05	; 5
     cbe:	0c 90       	ld	r0, X
     cc0:	25 96       	adiw	r28, 0x05	; 5
     cc2:	ee ad       	ldd	r30, Y+62	; 0x3e
     cc4:	ff ad       	ldd	r31, Y+63	; 0x3f
     cc6:	25 97       	sbiw	r28, 0x05	; 5
     cc8:	31 96       	adiw	r30, 0x01	; 1
     cca:	25 96       	adiw	r28, 0x05	; 5
     ccc:	ff af       	std	Y+63, r31	; 0x3f
     cce:	ee af       	std	Y+62, r30	; 0x3e
     cd0:	25 97       	sbiw	r28, 0x05	; 5
     cd2:	23 96       	adiw	r28, 0x03	; 3
     cd4:	ae ad       	ldd	r26, Y+62	; 0x3e
     cd6:	bf ad       	ldd	r27, Y+63	; 0x3f
     cd8:	23 97       	sbiw	r28, 0x03	; 3
     cda:	0c 92       	st	X, r0
     cdc:	23 96       	adiw	r28, 0x03	; 3
     cde:	ee ad       	ldd	r30, Y+62	; 0x3e
     ce0:	ff ad       	ldd	r31, Y+63	; 0x3f
     ce2:	23 97       	sbiw	r28, 0x03	; 3
     ce4:	31 96       	adiw	r30, 0x01	; 1
     ce6:	23 96       	adiw	r28, 0x03	; 3
     ce8:	ff af       	std	Y+63, r31	; 0x3f
     cea:	ee af       	std	Y+62, r30	; 0x3e
     cec:	23 97       	sbiw	r28, 0x03	; 3
     cee:	26 96       	adiw	r28, 0x06	; 6
     cf0:	ff ad       	ldd	r31, Y+63	; 0x3f
     cf2:	26 97       	sbiw	r28, 0x06	; 6
     cf4:	f1 50       	subi	r31, 0x01	; 1
     cf6:	26 96       	adiw	r28, 0x06	; 6
     cf8:	ff af       	std	Y+63, r31	; 0x3f
     cfa:	26 97       	sbiw	r28, 0x06	; 6
     cfc:	26 96       	adiw	r28, 0x06	; 6
     cfe:	8f ad       	ldd	r24, Y+63	; 0x3f
     d00:	26 97       	sbiw	r28, 0x06	; 6
     d02:	88 23       	and	r24, r24
     d04:	c1 f6       	brne	.-80     	; 0xcb6 <main+0x9a>
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	fe 01       	movw	r30, r28
     d0a:	75 96       	adiw	r30, 0x15	; 21
     d0c:	df 01       	movw	r26, r30
     d0e:	98 2f       	mov	r25, r24
     d10:	1d 92       	st	X+, r1
     d12:	9a 95       	dec	r25
     d14:	e9 f7       	brne	.-6      	; 0xd10 <main+0xf4>
     d16:	de 01       	movw	r26, r28
     d18:	58 96       	adiw	r26, 0x18	; 24
     d1a:	28 96       	adiw	r28, 0x08	; 8
     d1c:	bf af       	std	Y+63, r27	; 0x3f
     d1e:	ae af       	std	Y+62, r26	; 0x3e
     d20:	28 97       	sbiw	r28, 0x08	; 8
     d22:	e2 e7       	ldi	r30, 0x72	; 114
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	2a 96       	adiw	r28, 0x0a	; 10
     d28:	ff af       	std	Y+63, r31	; 0x3f
     d2a:	ee af       	std	Y+62, r30	; 0x3e
     d2c:	2a 97       	sbiw	r28, 0x0a	; 10
     d2e:	f9 e0       	ldi	r31, 0x09	; 9
     d30:	2b 96       	adiw	r28, 0x0b	; 11
     d32:	ff af       	std	Y+63, r31	; 0x3f
     d34:	2b 97       	sbiw	r28, 0x0b	; 11
     d36:	2a 96       	adiw	r28, 0x0a	; 10
     d38:	ae ad       	ldd	r26, Y+62	; 0x3e
     d3a:	bf ad       	ldd	r27, Y+63	; 0x3f
     d3c:	2a 97       	sbiw	r28, 0x0a	; 10
     d3e:	0c 90       	ld	r0, X
     d40:	2a 96       	adiw	r28, 0x0a	; 10
     d42:	ee ad       	ldd	r30, Y+62	; 0x3e
     d44:	ff ad       	ldd	r31, Y+63	; 0x3f
     d46:	2a 97       	sbiw	r28, 0x0a	; 10
     d48:	31 96       	adiw	r30, 0x01	; 1
     d4a:	2a 96       	adiw	r28, 0x0a	; 10
     d4c:	ff af       	std	Y+63, r31	; 0x3f
     d4e:	ee af       	std	Y+62, r30	; 0x3e
     d50:	2a 97       	sbiw	r28, 0x0a	; 10
     d52:	28 96       	adiw	r28, 0x08	; 8
     d54:	ae ad       	ldd	r26, Y+62	; 0x3e
     d56:	bf ad       	ldd	r27, Y+63	; 0x3f
     d58:	28 97       	sbiw	r28, 0x08	; 8
     d5a:	0c 92       	st	X, r0
     d5c:	28 96       	adiw	r28, 0x08	; 8
     d5e:	ee ad       	ldd	r30, Y+62	; 0x3e
     d60:	ff ad       	ldd	r31, Y+63	; 0x3f
     d62:	28 97       	sbiw	r28, 0x08	; 8
     d64:	31 96       	adiw	r30, 0x01	; 1
     d66:	28 96       	adiw	r28, 0x08	; 8
     d68:	ff af       	std	Y+63, r31	; 0x3f
     d6a:	ee af       	std	Y+62, r30	; 0x3e
     d6c:	28 97       	sbiw	r28, 0x08	; 8
     d6e:	2b 96       	adiw	r28, 0x0b	; 11
     d70:	ff ad       	ldd	r31, Y+63	; 0x3f
     d72:	2b 97       	sbiw	r28, 0x0b	; 11
     d74:	f1 50       	subi	r31, 0x01	; 1
     d76:	2b 96       	adiw	r28, 0x0b	; 11
     d78:	ff af       	std	Y+63, r31	; 0x3f
     d7a:	2b 97       	sbiw	r28, 0x0b	; 11
     d7c:	2b 96       	adiw	r28, 0x0b	; 11
     d7e:	8f ad       	ldd	r24, Y+63	; 0x3f
     d80:	2b 97       	sbiw	r28, 0x0b	; 11
     d82:	88 23       	and	r24, r24
     d84:	c1 f6       	brne	.-80     	; 0xd36 <main+0x11a>
     d86:	8d e4       	ldi	r24, 0x4D	; 77
     d88:	91 e6       	ldi	r25, 0x61	; 97
     d8a:	a3 e6       	ldi	r26, 0x63	; 99
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	89 a3       	std	Y+33, r24	; 0x21
     d90:	9a a3       	std	Y+34, r25	; 0x22
     d92:	ab a3       	std	Y+35, r26	; 0x23
     d94:	bc a3       	std	Y+36, r27	; 0x24
     d96:	85 e0       	ldi	r24, 0x05	; 5
     d98:	fe 01       	movw	r30, r28
     d9a:	b5 96       	adiw	r30, 0x25	; 37
     d9c:	df 01       	movw	r26, r30
     d9e:	98 2f       	mov	r25, r24
     da0:	1d 92       	st	X+, r1
     da2:	9a 95       	dec	r25
     da4:	e9 f7       	brne	.-6      	; 0xda0 <main+0x184>
	u8 whichword=0;
     da6:	1c 82       	std	Y+4, r1	; 0x04
	u8 attention[8]={112, 76, 66, 93, 93, 66, 76, 112};
     da8:	de 01       	movw	r26, r28
     daa:	9a 96       	adiw	r26, 0x2a	; 42
     dac:	2d 96       	adiw	r28, 0x0d	; 13
     dae:	bf af       	std	Y+63, r27	; 0x3f
     db0:	ae af       	std	Y+62, r26	; 0x3e
     db2:	2d 97       	sbiw	r28, 0x0d	; 13
     db4:	e9 e9       	ldi	r30, 0x99	; 153
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	2f 96       	adiw	r28, 0x0f	; 15
     dba:	ff af       	std	Y+63, r31	; 0x3f
     dbc:	ee af       	std	Y+62, r30	; 0x3e
     dbe:	2f 97       	sbiw	r28, 0x0f	; 15
     dc0:	f8 e0       	ldi	r31, 0x08	; 8
     dc2:	60 96       	adiw	r28, 0x10	; 16
     dc4:	ff af       	std	Y+63, r31	; 0x3f
     dc6:	60 97       	sbiw	r28, 0x10	; 16
     dc8:	2f 96       	adiw	r28, 0x0f	; 15
     dca:	ae ad       	ldd	r26, Y+62	; 0x3e
     dcc:	bf ad       	ldd	r27, Y+63	; 0x3f
     dce:	2f 97       	sbiw	r28, 0x0f	; 15
     dd0:	0c 90       	ld	r0, X
     dd2:	2f 96       	adiw	r28, 0x0f	; 15
     dd4:	ee ad       	ldd	r30, Y+62	; 0x3e
     dd6:	ff ad       	ldd	r31, Y+63	; 0x3f
     dd8:	2f 97       	sbiw	r28, 0x0f	; 15
     dda:	31 96       	adiw	r30, 0x01	; 1
     ddc:	2f 96       	adiw	r28, 0x0f	; 15
     dde:	ff af       	std	Y+63, r31	; 0x3f
     de0:	ee af       	std	Y+62, r30	; 0x3e
     de2:	2f 97       	sbiw	r28, 0x0f	; 15
     de4:	2d 96       	adiw	r28, 0x0d	; 13
     de6:	ae ad       	ldd	r26, Y+62	; 0x3e
     de8:	bf ad       	ldd	r27, Y+63	; 0x3f
     dea:	2d 97       	sbiw	r28, 0x0d	; 13
     dec:	0c 92       	st	X, r0
     dee:	2d 96       	adiw	r28, 0x0d	; 13
     df0:	ee ad       	ldd	r30, Y+62	; 0x3e
     df2:	ff ad       	ldd	r31, Y+63	; 0x3f
     df4:	2d 97       	sbiw	r28, 0x0d	; 13
     df6:	31 96       	adiw	r30, 0x01	; 1
     df8:	2d 96       	adiw	r28, 0x0d	; 13
     dfa:	ff af       	std	Y+63, r31	; 0x3f
     dfc:	ee af       	std	Y+62, r30	; 0x3e
     dfe:	2d 97       	sbiw	r28, 0x0d	; 13
     e00:	60 96       	adiw	r28, 0x10	; 16
     e02:	ff ad       	ldd	r31, Y+63	; 0x3f
     e04:	60 97       	sbiw	r28, 0x10	; 16
     e06:	f1 50       	subi	r31, 0x01	; 1
     e08:	60 96       	adiw	r28, 0x10	; 16
     e0a:	ff af       	std	Y+63, r31	; 0x3f
     e0c:	60 97       	sbiw	r28, 0x10	; 16
     e0e:	60 96       	adiw	r28, 0x10	; 16
     e10:	8f ad       	ldd	r24, Y+63	; 0x3f
     e12:	60 97       	sbiw	r28, 0x10	; 16
     e14:	88 23       	and	r24, r24
     e16:	c1 f6       	brne	.-80     	; 0xdc8 <main+0x1ac>
	/*Numbers for Seven Segment*/
	u8 segtable[10]={0b11000000,0b11111001,0b10100100,0b10110000,0b10011001,0b10010010,0b10000010,0b11111000,0b10000000,0b10010000};
     e18:	de 01       	movw	r26, r28
     e1a:	d2 96       	adiw	r26, 0x32	; 50
     e1c:	62 96       	adiw	r28, 0x12	; 18
     e1e:	bf af       	std	Y+63, r27	; 0x3f
     e20:	ae af       	std	Y+62, r26	; 0x3e
     e22:	62 97       	sbiw	r28, 0x12	; 18
     e24:	ef e8       	ldi	r30, 0x8F	; 143
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	64 96       	adiw	r28, 0x14	; 20
     e2a:	ff af       	std	Y+63, r31	; 0x3f
     e2c:	ee af       	std	Y+62, r30	; 0x3e
     e2e:	64 97       	sbiw	r28, 0x14	; 20
     e30:	fa e0       	ldi	r31, 0x0A	; 10
     e32:	65 96       	adiw	r28, 0x15	; 21
     e34:	ff af       	std	Y+63, r31	; 0x3f
     e36:	65 97       	sbiw	r28, 0x15	; 21
     e38:	64 96       	adiw	r28, 0x14	; 20
     e3a:	ae ad       	ldd	r26, Y+62	; 0x3e
     e3c:	bf ad       	ldd	r27, Y+63	; 0x3f
     e3e:	64 97       	sbiw	r28, 0x14	; 20
     e40:	0c 90       	ld	r0, X
     e42:	64 96       	adiw	r28, 0x14	; 20
     e44:	ee ad       	ldd	r30, Y+62	; 0x3e
     e46:	ff ad       	ldd	r31, Y+63	; 0x3f
     e48:	64 97       	sbiw	r28, 0x14	; 20
     e4a:	31 96       	adiw	r30, 0x01	; 1
     e4c:	64 96       	adiw	r28, 0x14	; 20
     e4e:	ff af       	std	Y+63, r31	; 0x3f
     e50:	ee af       	std	Y+62, r30	; 0x3e
     e52:	64 97       	sbiw	r28, 0x14	; 20
     e54:	62 96       	adiw	r28, 0x12	; 18
     e56:	ae ad       	ldd	r26, Y+62	; 0x3e
     e58:	bf ad       	ldd	r27, Y+63	; 0x3f
     e5a:	62 97       	sbiw	r28, 0x12	; 18
     e5c:	0c 92       	st	X, r0
     e5e:	62 96       	adiw	r28, 0x12	; 18
     e60:	ee ad       	ldd	r30, Y+62	; 0x3e
     e62:	ff ad       	ldd	r31, Y+63	; 0x3f
     e64:	62 97       	sbiw	r28, 0x12	; 18
     e66:	31 96       	adiw	r30, 0x01	; 1
     e68:	62 96       	adiw	r28, 0x12	; 18
     e6a:	ff af       	std	Y+63, r31	; 0x3f
     e6c:	ee af       	std	Y+62, r30	; 0x3e
     e6e:	62 97       	sbiw	r28, 0x12	; 18
     e70:	65 96       	adiw	r28, 0x15	; 21
     e72:	ff ad       	ldd	r31, Y+63	; 0x3f
     e74:	65 97       	sbiw	r28, 0x15	; 21
     e76:	f1 50       	subi	r31, 0x01	; 1
     e78:	65 96       	adiw	r28, 0x15	; 21
     e7a:	ff af       	std	Y+63, r31	; 0x3f
     e7c:	65 97       	sbiw	r28, 0x15	; 21
     e7e:	65 96       	adiw	r28, 0x15	; 21
     e80:	8f ad       	ldd	r24, Y+63	; 0x3f
     e82:	65 97       	sbiw	r28, 0x15	; 21
     e84:	88 23       	and	r24, r24
     e86:	c1 f6       	brne	.-80     	; 0xe38 <main+0x21c>
	/*initialie the DIO pins*/
	DIO_voidInitialize();
     e88:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidInitialize>
	/*initialize the LCD pins*/
	LCD_voidInitialize();
     e8c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_voidInitialize>
	/*initialize the externel interrupt*/
	EXTI_voidInit();
     e90:	0e 94 85 02 	call	0x50a	; 0x50a <EXTI_voidInit>
	/*make pull up resistor on pin 26 (Ext interrupt)*/
	DIO_voidSetPinValue(SWITCH,DIO_u8_HIGH);
     e94:	8a e1       	ldi	r24, 0x1A	; 26
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
	/*set Callback function for the externel int0*/
	EXTI_voidSetCallback_EXT0(int0_function);
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	96 e0       	ldi	r25, 0x06	; 6
     ea0:	0e 94 a8 02 	call	0x550	; 0x550 <EXTI_voidSetCallback_EXT0>
	/*Enable the externel int 0*/
	EXTI_voidEnable_EXT0();
     ea4:	0e 94 cc 02 	call	0x598	; 0x598 <EXTI_voidEnable_EXT0>
	/*enable the global interrupt*/
	GIE_EnableGlobalInterrupt();
     ea8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <GIE_EnableGlobalInterrupt>
	while(1)
	{
		/*check if the train is passing*/
		if(counter>1)
     eac:	80 91 a6 00 	lds	r24, 0x00A6
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <main+0x29a>
     eb4:	a8 c0       	rjmp	.+336    	; 0x1006 <main+0x3ea>
		{
			/*switch on the red led*/
			LEDS_voidSetLedOn(LEDS_u8_LED1);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	0e 94 cc 04 	call	0x998	; 0x998 <LEDS_voidSetLedOn>
			/*to display the counter on seven segment (POV)*/
			for(u8 i=0;i<30;i++){
     ebc:	1b 82       	std	Y+3, r1	; 0x03
     ebe:	99 c0       	rjmp	.+306    	; 0xff2 <main+0x3d6>

				DIO_voidSetPinValue(SEVEN_SEG_ONE_EN,DIO_u8_LOW);
     ec0:	8d e1       	ldi	r24, 0x1D	; 29
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*disable segment two for second digit*/
				DIO_voidSetPinValue(SEVEN_SEG_TWO_EN,DIO_u8_LOW);
     ec8:	8e e1       	ldi	r24, 0x1E	; 30
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*out the image on led matrix*/
				LED_MATRIX_voidLedMatrixOutputImage(attention);
     ed0:	ce 01       	movw	r24, r28
     ed2:	8a 96       	adiw	r24, 0x2a	; 42
     ed4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LED_MATRIX_voidLedMatrixOutputImage>
				/*close the led matrix before out on seven seg*/
				LED_MATRIX_voidCloseLedMatrix();
     ed8:	0e 94 22 05 	call	0xa44	; 0xa44 <LED_MATRIX_voidCloseLedMatrix>
				/*Enable Segment one for first digit*/
				DIO_voidSetPinValue(SEVEN_SEG_ONE_EN,DIO_u8_HIGH);
     edc:	8d e1       	ldi	r24, 0x1D	; 29
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*disable segment two for second digit*/
				DIO_voidSetPinValue(SEVEN_SEG_TWO_EN,DIO_u8_LOW);
     ee4:	8e e1       	ldi	r24, 0x1E	; 30
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*out the first digit data on the seven segment*/

				SevenSeg_voidDisplayOnSeg(~segtable[(counter%10)]);
     eec:	80 91 a6 00 	lds	r24, 0x00A6
     ef0:	9a e0       	ldi	r25, 0x0A	; 10
     ef2:	69 2f       	mov	r22, r25
     ef4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__udivmodqi4>
     ef8:	89 2f       	mov	r24, r25
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	ce 01       	movw	r24, r28
     f00:	c2 96       	adiw	r24, 0x32	; 50
     f02:	fc 01       	movw	r30, r24
     f04:	e2 0f       	add	r30, r18
     f06:	f3 1f       	adc	r31, r19
     f08:	80 81       	ld	r24, Z
     f0a:	80 95       	com	r24
     f0c:	0e 94 88 05 	call	0xb10	; 0xb10 <SevenSeg_voidDisplayOnSeg>
				/*move the motor and enable the buzzer for only 2 counts from the beginning*/
				if(counter>98)
     f10:	80 91 a6 00 	lds	r24, 0x00A6
     f14:	83 36       	cpi	r24, 0x63	; 99
     f16:	38 f1       	brcs	.+78     	; 0xf66 <main+0x34a>
				{
					/*Enable the moving of motor to the right*/
					DIO_voidSetPinValue(MOTOR_RIGHT,DIO_u8_HIGH);
     f18:	8b e1       	ldi	r24, 0x1B	; 27
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					/*Disable the moving of motor to the left*/
					DIO_voidSetPinValue(MOTOR_LEFT,DIO_u8_LOW);
     f20:	8c e1       	ldi	r24, 0x1C	; 28
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					/*Buzzer for*/
					for(u8 i=0;i<5;i++)
     f28:	1a 82       	std	Y+2, r1	; 0x02
     f2a:	17 c0       	rjmp	.+46     	; 0xf5a <main+0x33e>
					{
						/*Enable the buzzer*/
						DIO_voidSetPinValue(BUZZER,DIO_u8_HIGH);
     f2c:	88 e1       	ldi	r24, 0x18	; 24
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
						/*delay for the buzzer*/
						Delay_us(80);
     f34:	60 e5       	ldi	r22, 0x50	; 80
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>
						/*disable the buzzer*/
						DIO_voidSetPinValue(BUZZER,DIO_u8_LOW);
     f40:	88 e1       	ldi	r24, 0x18	; 24
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
						/*delay for the buzzer*/
						Delay_us(80);
     f48:	60 e5       	ldi	r22, 0x50	; 80
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>
					/*Enable the moving of motor to the right*/
					DIO_voidSetPinValue(MOTOR_RIGHT,DIO_u8_HIGH);
					/*Disable the moving of motor to the left*/
					DIO_voidSetPinValue(MOTOR_LEFT,DIO_u8_LOW);
					/*Buzzer for*/
					for(u8 i=0;i<5;i++)
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	85 30       	cpi	r24, 0x05	; 5
     f5e:	30 f3       	brcs	.-52     	; 0xf2c <main+0x310>
						/*disable the buzzer*/
						DIO_voidSetPinValue(BUZZER,DIO_u8_LOW);
						/*delay for the buzzer*/
						Delay_us(80);
					}
					Motoropen=1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	12 c0       	rjmp	.+36     	; 0xf8a <main+0x36e>
				}
				/*if the counter is less than 97*/
				else
				{
					/*switch off the motor*/
					DIO_voidSetPinValue(MOTOR_RIGHT,DIO_u8_LOW);
     f66:	8b e1       	ldi	r24, 0x1B	; 27
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					DIO_voidSetPinValue(MOTOR_LEFT,DIO_u8_LOW);
     f6e:	8c e1       	ldi	r24, 0x1C	; 28
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					/*switch off the buzzer*/
					DIO_voidSetPinValue(BUZZER,DIO_u8_LOW);
     f76:	88 e1       	ldi	r24, 0x18	; 24
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
					/*delay for seven segment*/
					Delay_us(800);
     f7e:	60 e2       	ldi	r22, 0x20	; 32
     f80:	73 e0       	ldi	r23, 0x03	; 3
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>
				}
				DIO_voidSetPinValue(SEVEN_SEG_ONE_EN,DIO_u8_LOW);
     f8a:	8d e1       	ldi	r24, 0x1D	; 29
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*disable segment two for second digit*/
				DIO_voidSetPinValue(SEVEN_SEG_TWO_EN,DIO_u8_LOW);
     f92:	8e e1       	ldi	r24, 0x1E	; 30
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*out the image on led matrix*/
				LED_MATRIX_voidLedMatrixOutputImage(attention);
     f9a:	ce 01       	movw	r24, r28
     f9c:	8a 96       	adiw	r24, 0x2a	; 42
     f9e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LED_MATRIX_voidLedMatrixOutputImage>
				/*close the led matrix before out on seven seg*/
				LED_MATRIX_voidCloseLedMatrix();
     fa2:	0e 94 22 05 	call	0xa44	; 0xa44 <LED_MATRIX_voidCloseLedMatrix>
				/*disable the first seven segment*/
				DIO_voidSetPinValue(SEVEN_SEG_ONE_EN,DIO_u8_LOW);
     fa6:	8d e1       	ldi	r24, 0x1D	; 29
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*enable the second seven segment*/
				DIO_voidSetPinValue(SEVEN_SEG_TWO_EN,DIO_u8_HIGH);
     fae:	8e e1       	ldi	r24, 0x1E	; 30
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*out the second digit on the second seven segment*/

				SevenSeg_voidDisplayOnSeg(~segtable[(counter/10)]);
     fb6:	80 91 a6 00 	lds	r24, 0x00A6
     fba:	9a e0       	ldi	r25, 0x0A	; 10
     fbc:	69 2f       	mov	r22, r25
     fbe:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__udivmodqi4>
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	ce 01       	movw	r24, r28
     fc8:	c2 96       	adiw	r24, 0x32	; 50
     fca:	fc 01       	movw	r30, r24
     fcc:	e2 0f       	add	r30, r18
     fce:	f3 1f       	adc	r31, r19
     fd0:	80 81       	ld	r24, Z
     fd2:	80 95       	com	r24
     fd4:	0e 94 88 05 	call	0xb10	; 0xb10 <SevenSeg_voidDisplayOnSeg>
				/*ensure that the buzzer is disabled*/
				DIO_voidSetPinValue(BUZZER,DIO_u8_LOW);
     fd8:	88 e1       	ldi	r24, 0x18	; 24
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*delay for the seven segment*/
				Delay_us(800);
     fe0:	60 e2       	ldi	r22, 0x20	; 32
     fe2:	73 e0       	ldi	r23, 0x03	; 3
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 90 00 	call	0x120	; 0x120 <Delay_us>
		if(counter>1)
		{
			/*switch on the red led*/
			LEDS_voidSetLedOn(LEDS_u8_LED1);
			/*to display the counter on seven segment (POV)*/
			for(u8 i=0;i<30;i++){
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	8e 31       	cpi	r24, 0x1E	; 30
     ff6:	08 f4       	brcc	.+2      	; 0xffa <main+0x3de>
     ff8:	63 cf       	rjmp	.-314    	; 0xec0 <main+0x2a4>
				DIO_voidSetPinValue(BUZZER,DIO_u8_LOW);
				/*delay for the seven segment*/
				Delay_us(800);
			}
			/*decrease the counter*/
			counter--;
     ffa:	80 91 a6 00 	lds	r24, 0x00A6
     ffe:	81 50       	subi	r24, 0x01	; 1
    1000:	80 93 a6 00 	sts	0x00A6, r24
    1004:	32 c0       	rjmp	.+100    	; 0x106a <main+0x44e>
		}
		/*if the counter is less than 1*/
		else
		{
			if(Motoropen==1){
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	61 f4       	brne	.+24     	; 0x1024 <main+0x408>
				/*Enable the moving of motor to the right*/
				DIO_voidSetPinValue(MOTOR_RIGHT,DIO_u8_LOW);
    100c:	8b e1       	ldi	r24, 0x1B	; 27
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				/*Disable the moving of motor to the left*/
				DIO_voidSetPinValue(MOTOR_LEFT,DIO_u8_HIGH);
    1014:	8c e1       	ldi	r24, 0x1C	; 28
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				Motoropen=0;
    101c:	1d 82       	std	Y+5, r1	; 0x05
				LCD_voidClearDisplay();
    101e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_voidClearDisplay>
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <main+0x418>
			}
			else
			{
				/*disable the motor*/
				DIO_voidSetPinValue(MOTOR_RIGHT,DIO_u8_LOW);
    1024:	8b e1       	ldi	r24, 0x1B	; 27
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(MOTOR_LEFT,DIO_u8_LOW);
    102c:	8c e1       	ldi	r24, 0x1C	; 28
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			}
			/*enable the green led*/
			LEDS_voidSetLedOn(LEDS_u8_LED2);
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0e 94 cc 04 	call	0x998	; 0x998 <LEDS_voidSetLedOn>

			/*disable the seven segment*/
			DIO_voidSetPinValue(SEVEN_SEG_ONE_EN,DIO_u8_LOW);
    103a:	8d e1       	ldi	r24, 0x1D	; 29
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(SEVEN_SEG_TWO_EN,DIO_u8_LOW);
    1042:	8e e1       	ldi	r24, 0x1E	; 30
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			/*disable the buzzer*/
			DIO_voidSetPinValue(BUZZER,DIO_u8_LOW);
    104a:	88 e1       	ldi	r24, 0x18	; 24
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
			/*out the image on led matrix*/
			for(u8 i=0;i<50;i++)
    1052:	19 82       	std	Y+1, r1	; 0x01
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <main+0x448>
				LED_MATRIX_voidLedMatrixOutputImage(attention);
    1056:	ce 01       	movw	r24, r28
    1058:	8a 96       	adiw	r24, 0x2a	; 42
    105a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LED_MATRIX_voidLedMatrixOutputImage>
			DIO_voidSetPinValue(SEVEN_SEG_ONE_EN,DIO_u8_LOW);
			DIO_voidSetPinValue(SEVEN_SEG_TWO_EN,DIO_u8_LOW);
			/*disable the buzzer*/
			DIO_voidSetPinValue(BUZZER,DIO_u8_LOW);
			/*out the image on led matrix*/
			for(u8 i=0;i<50;i++)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	82 33       	cpi	r24, 0x32	; 50
    1068:	b0 f3       	brcs	.-20     	; 0x1056 <main+0x43a>
				LED_MATRIX_voidLedMatrixOutputImage(attention);
		}
		LED_MATRIX_voidCloseLedMatrix();
    106a:	0e 94 22 05 	call	0xa44	; 0xa44 <LED_MATRIX_voidCloseLedMatrix>
		DIO_voidSetPinValue(SEVEN_SEG_ONE_EN,DIO_u8_LOW);
    106e:	8d e1       	ldi	r24, 0x1D	; 29
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEVEN_SEG_TWO_EN,DIO_u8_LOW);
    1076:	8e e1       	ldi	r24, 0x1E	; 30
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_voidSetPinValue>
		LCD_voidClearDisplay();
    107e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_voidClearDisplay>
		LCD_voidWriteStringCurrentPosition(words[whichword]);
    1082:	ae 01       	movw	r20, r28
    1084:	4a 5f       	subi	r20, 0xFA	; 250
    1086:	5f 4f       	sbci	r21, 0xFF	; 255
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	c9 01       	movw	r24, r18
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	82 0f       	add	r24, r18
    109e:	93 1f       	adc	r25, r19
    10a0:	84 0f       	add	r24, r20
    10a2:	95 1f       	adc	r25, r21
    10a4:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_voidWriteStringCurrentPosition>
		whichword++;
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	8c 83       	std	Y+4, r24	; 0x04
		if(whichword==4)
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	84 30       	cpi	r24, 0x04	; 4
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <main+0x49a>
    10b4:	fb ce       	rjmp	.-522    	; 0xeac <main+0x290>
		{
			whichword=0;
    10b6:	1c 82       	std	Y+4, r1	; 0x04
    10b8:	f9 ce       	rjmp	.-526    	; 0xeac <main+0x290>

000010ba <__mulsi3>:
    10ba:	62 9f       	mul	r22, r18
    10bc:	d0 01       	movw	r26, r0
    10be:	73 9f       	mul	r23, r19
    10c0:	f0 01       	movw	r30, r0
    10c2:	82 9f       	mul	r24, r18
    10c4:	e0 0d       	add	r30, r0
    10c6:	f1 1d       	adc	r31, r1
    10c8:	64 9f       	mul	r22, r20
    10ca:	e0 0d       	add	r30, r0
    10cc:	f1 1d       	adc	r31, r1
    10ce:	92 9f       	mul	r25, r18
    10d0:	f0 0d       	add	r31, r0
    10d2:	83 9f       	mul	r24, r19
    10d4:	f0 0d       	add	r31, r0
    10d6:	74 9f       	mul	r23, r20
    10d8:	f0 0d       	add	r31, r0
    10da:	65 9f       	mul	r22, r21
    10dc:	f0 0d       	add	r31, r0
    10de:	99 27       	eor	r25, r25
    10e0:	72 9f       	mul	r23, r18
    10e2:	b0 0d       	add	r27, r0
    10e4:	e1 1d       	adc	r30, r1
    10e6:	f9 1f       	adc	r31, r25
    10e8:	63 9f       	mul	r22, r19
    10ea:	b0 0d       	add	r27, r0
    10ec:	e1 1d       	adc	r30, r1
    10ee:	f9 1f       	adc	r31, r25
    10f0:	bd 01       	movw	r22, r26
    10f2:	cf 01       	movw	r24, r30
    10f4:	11 24       	eor	r1, r1
    10f6:	08 95       	ret

000010f8 <__udivmodqi4>:
    10f8:	99 1b       	sub	r25, r25
    10fa:	79 e0       	ldi	r23, 0x09	; 9
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <__udivmodqi4_ep>

000010fe <__udivmodqi4_loop>:
    10fe:	99 1f       	adc	r25, r25
    1100:	96 17       	cp	r25, r22
    1102:	08 f0       	brcs	.+2      	; 0x1106 <__udivmodqi4_ep>
    1104:	96 1b       	sub	r25, r22

00001106 <__udivmodqi4_ep>:
    1106:	88 1f       	adc	r24, r24
    1108:	7a 95       	dec	r23
    110a:	c9 f7       	brne	.-14     	; 0x10fe <__udivmodqi4_loop>
    110c:	80 95       	com	r24
    110e:	08 95       	ret

00001110 <__udivmodsi4>:
    1110:	a1 e2       	ldi	r26, 0x21	; 33
    1112:	1a 2e       	mov	r1, r26
    1114:	aa 1b       	sub	r26, r26
    1116:	bb 1b       	sub	r27, r27
    1118:	fd 01       	movw	r30, r26
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <__udivmodsi4_ep>

0000111c <__udivmodsi4_loop>:
    111c:	aa 1f       	adc	r26, r26
    111e:	bb 1f       	adc	r27, r27
    1120:	ee 1f       	adc	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	a2 17       	cp	r26, r18
    1126:	b3 07       	cpc	r27, r19
    1128:	e4 07       	cpc	r30, r20
    112a:	f5 07       	cpc	r31, r21
    112c:	20 f0       	brcs	.+8      	; 0x1136 <__udivmodsi4_ep>
    112e:	a2 1b       	sub	r26, r18
    1130:	b3 0b       	sbc	r27, r19
    1132:	e4 0b       	sbc	r30, r20
    1134:	f5 0b       	sbc	r31, r21

00001136 <__udivmodsi4_ep>:
    1136:	66 1f       	adc	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	1a 94       	dec	r1
    1140:	69 f7       	brne	.-38     	; 0x111c <__udivmodsi4_loop>
    1142:	60 95       	com	r22
    1144:	70 95       	com	r23
    1146:	80 95       	com	r24
    1148:	90 95       	com	r25
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	bd 01       	movw	r22, r26
    1150:	cf 01       	movw	r24, r30
    1152:	08 95       	ret

00001154 <_exit>:
    1154:	f8 94       	cli

00001156 <__stop_program>:
    1156:	ff cf       	rjmp	.-2      	; 0x1156 <__stop_program>
