
digital_piano_RTO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b10  00000ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080006a  0080006a  00000bae  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007f9  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 04 	call	0x99a	; 0x99a <main>
  8a:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialize>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTION;
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTION;
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTION;
  aa:	e4 e3       	ldi	r30, 0x34	; 52
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTION;
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
}
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 u8PinIndexCpy,u8 u8PinValueCpy)
{	
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <DIO_voidSetPinValue+0x6>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	6a 83       	std	Y+2, r22	; 0x02
	/*Check if the PIN index in PORTA range */
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END) )
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	60 f5       	brcc	.+88     	; 0x12a <DIO_voidSetPinValue+0x6c>
	{
		if(u8PinValueCpy == DIO_u8_HIGH)
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	88 23       	and	r24, r24
  d6:	a1 f4       	brne	.+40     	; 0x100 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA,u8PinIndexCpy);
  d8:	ab e3       	ldi	r26, 0x3B	; 59
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	eb e3       	ldi	r30, 0x3B	; 59
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_voidSetPinValue+0x38>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_voidSetPinValue+0x34>
  fa:	84 2b       	or	r24, r20
  fc:	8c 93       	st	X, r24
  fe:	b3 c0       	rjmp	.+358    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTA,u8PinIndexCpy);
 100:	ab e3       	ldi	r26, 0x3B	; 59
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	eb e3       	ldi	r30, 0x3B	; 59
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	48 2f       	mov	r20, r24
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinValue+0x60>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinValue+0x5c>
 122:	80 95       	com	r24
 124:	84 23       	and	r24, r20
 126:	8c 93       	st	X, r24
 128:	9e c0       	rjmp	.+316    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTB range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END) )
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	90 f1       	brcs	.+100    	; 0x194 <DIO_voidSetPinValue+0xd6>
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	80 31       	cpi	r24, 0x10	; 16
 134:	78 f5       	brcc	.+94     	; 0x194 <DIO_voidSetPinValue+0xd6>
	{
		u8PinIndexCpy -= DIO_u8_PORTA_SIZE;	
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	88 50       	subi	r24, 0x08	; 8
 13a:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	88 23       	and	r24, r24
 140:	a1 f4       	brne	.+40     	; 0x16a <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB,u8PinIndexCpy);
 142:	a8 e3       	ldi	r26, 0x38	; 56
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e8 e3       	ldi	r30, 0x38	; 56
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	48 2f       	mov	r20, r24
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	28 2f       	mov	r18, r24
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinValue+0xa2>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinValue+0x9e>
 164:	84 2b       	or	r24, r20
 166:	8c 93       	st	X, r24
 168:	7e c0       	rjmp	.+252    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTB,u8PinIndexCpy);
 16a:	a8 e3       	ldi	r26, 0x38	; 56
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e8 e3       	ldi	r30, 0x38	; 56
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_voidSetPinValue+0xca>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_voidSetPinValue+0xc6>
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	8c 93       	st	X, r24
 192:	69 c0       	rjmp	.+210    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTC range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END) )
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	80 31       	cpi	r24, 0x10	; 16
 198:	90 f1       	brcs	.+100    	; 0x1fe <DIO_voidSetPinValue+0x140>
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	88 31       	cpi	r24, 0x18	; 24
 19e:	78 f5       	brcc	.+94     	; 0x1fe <DIO_voidSetPinValue+0x140>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE);	
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	80 51       	subi	r24, 0x10	; 16
 1a4:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	88 23       	and	r24, r24
 1aa:	a1 f4       	brne	.+40     	; 0x1d4 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC,u8PinIndexCpy);
 1ac:	a5 e3       	ldi	r26, 0x35	; 53
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e5 e3       	ldi	r30, 0x35	; 53
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 2e       	mov	r0, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPinValue+0x10c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_voidSetPinValue+0x108>
 1ce:	84 2b       	or	r24, r20
 1d0:	8c 93       	st	X, r24
 1d2:	49 c0       	rjmp	.+146    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTC,u8PinIndexCpy);
 1d4:	a5 e3       	ldi	r26, 0x35	; 53
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e5 e3       	ldi	r30, 0x35	; 53
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_voidSetPinValue+0x134>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_voidSetPinValue+0x130>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	34 c0       	rjmp	.+104    	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}			
	}
	
	/*Check if the PIN index in PORTD range */
	else if( (u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END) )
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	88 31       	cpi	r24, 0x18	; 24
 202:	88 f1       	brcs	.+98     	; 0x266 <DIO_voidSetPinValue+0x1a8>
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	80 32       	cpi	r24, 0x20	; 32
 208:	70 f5       	brcc	.+92     	; 0x266 <DIO_voidSetPinValue+0x1a8>
	{
		u8PinIndexCpy -= (DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE);	
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	88 51       	subi	r24, 0x18	; 24
 20e:	89 83       	std	Y+1, r24	; 0x01
		if(u8PinValueCpy == DIO_u8_HIGH)
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	88 23       	and	r24, r24
 214:	a1 f4       	brne	.+40     	; 0x23e <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD,u8PinIndexCpy);
 216:	a2 e3       	ldi	r26, 0x32	; 50
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e2 e3       	ldi	r30, 0x32	; 50
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	48 2f       	mov	r20, r24
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 2e       	mov	r0, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_voidSetPinValue+0x176>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_voidSetPinValue+0x172>
 238:	84 2b       	or	r24, r20
 23a:	8c 93       	st	X, r24
 23c:	14 c0       	rjmp	.+40     	; 0x266 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLR_BIT(PORTD,u8PinIndexCpy);
 23e:	a2 e3       	ldi	r26, 0x32	; 50
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e2 e3       	ldi	r30, 0x32	; 50
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	48 2f       	mov	r20, r24
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	28 2f       	mov	r18, r24
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 2e       	mov	r0, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_voidSetPinValue+0x19e>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_voidSetPinValue+0x19a>
 260:	80 95       	com	r24
 262:	84 23       	and	r24, r20
 264:	8c 93       	st	X, r24
		}			
	}
}
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 u8PinIndexCpy)
{
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	00 d0       	rcall	.+0      	; 0x276 <DIO_u8GetPinValue+0x6>
 276:	00 d0       	rcall	.+0      	; 0x278 <DIO_u8GetPinValue+0x8>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	8c 83       	std	Y+4, r24	; 0x04
	u8 actualIndexLoc;
	u8 digitalPinValue;
	u8 HighOrLow;
	if( (u8PinIndexCpy >= DIO_u8_PORTA_START) && (u8PinIndexCpy <= DIO_u8_PORTA_END))
 27e:	8c 81       	ldd	r24, Y+4	; 0x04
 280:	88 30       	cpi	r24, 0x08	; 8
 282:	00 f5       	brcc	.+64     	; 0x2c4 <DIO_u8GetPinValue+0x54>
	{
		actualIndexLoc=u8PinIndexCpy;
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINA,actualIndexLoc);
 288:	e9 e3       	ldi	r30, 0x39	; 57
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	48 2f       	mov	r20, r24
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8GetPinValue+0x32>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	2a 95       	dec	r18
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8GetPinValue+0x2e>
 2a6:	9a 01       	movw	r18, r20
 2a8:	28 23       	and	r18, r24
 2aa:	39 23       	and	r19, r25
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	a9 01       	movw	r20, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_u8GetPinValue+0x4a>
 2b6:	55 95       	asr	r21
 2b8:	47 95       	ror	r20
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_u8GetPinValue+0x46>
 2be:	ca 01       	movw	r24, r20
 2c0:	8a 83       	std	Y+2, r24	; 0x02
 2c2:	74 c0       	rjmp	.+232    	; 0x3ac <DIO_u8GetPinValue+0x13c>
	}
	else if( (u8PinIndexCpy >= DIO_u8_PORTB_START) && (u8PinIndexCpy <= DIO_u8_PORTB_END))
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	20 f1       	brcs	.+72     	; 0x312 <DIO_u8GetPinValue+0xa2>
 2ca:	8c 81       	ldd	r24, Y+4	; 0x04
 2cc:	80 31       	cpi	r24, 0x10	; 16
 2ce:	08 f5       	brcc	.+66     	; 0x312 <DIO_u8GetPinValue+0xa2>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE;
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	88 50       	subi	r24, 0x08	; 8
 2d4:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 2d6:	e6 e3       	ldi	r30, 0x36	; 54
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	8b 81       	ldd	r24, Y+3	; 0x03
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8GetPinValue+0x80>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8GetPinValue+0x7c>
 2f4:	9a 01       	movw	r18, r20
 2f6:	28 23       	and	r18, r24
 2f8:	39 23       	and	r19, r25
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	a9 01       	movw	r20, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_u8GetPinValue+0x98>
 304:	55 95       	asr	r21
 306:	47 95       	ror	r20
 308:	8a 95       	dec	r24
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_u8GetPinValue+0x94>
 30c:	ca 01       	movw	r24, r20
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	4d c0       	rjmp	.+154    	; 0x3ac <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTC_START) && (u8PinIndexCpy <= DIO_u8_PORTC_END))
 312:	8c 81       	ldd	r24, Y+4	; 0x04
 314:	80 31       	cpi	r24, 0x10	; 16
 316:	20 f1       	brcs	.+72     	; 0x360 <DIO_u8GetPinValue+0xf0>
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	88 31       	cpi	r24, 0x18	; 24
 31c:	08 f5       	brcc	.+66     	; 0x360 <DIO_u8GetPinValue+0xf0>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE;
 31e:	8c 81       	ldd	r24, Y+4	; 0x04
 320:	80 51       	subi	r24, 0x10	; 16
 322:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PINB,actualIndexLoc);
 324:	e6 e3       	ldi	r30, 0x36	; 54
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	48 2f       	mov	r20, r24
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_u8GetPinValue+0xce>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	2a 95       	dec	r18
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_u8GetPinValue+0xca>
 342:	9a 01       	movw	r18, r20
 344:	28 23       	and	r18, r24
 346:	39 23       	and	r19, r25
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	88 2f       	mov	r24, r24
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	a9 01       	movw	r20, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_u8GetPinValue+0xe6>
 352:	55 95       	asr	r21
 354:	47 95       	ror	r20
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_u8GetPinValue+0xe2>
 35a:	ca 01       	movw	r24, r20
 35c:	8a 83       	std	Y+2, r24	; 0x02
 35e:	26 c0       	rjmp	.+76     	; 0x3ac <DIO_u8GetPinValue+0x13c>
	}
	else if((u8PinIndexCpy >= DIO_u8_PORTD_START) && (u8PinIndexCpy <= DIO_u8_PORTD_END))
 360:	8c 81       	ldd	r24, Y+4	; 0x04
 362:	88 31       	cpi	r24, 0x18	; 24
 364:	18 f1       	brcs	.+70     	; 0x3ac <DIO_u8GetPinValue+0x13c>
 366:	8c 81       	ldd	r24, Y+4	; 0x04
 368:	80 32       	cpi	r24, 0x20	; 32
 36a:	00 f5       	brcc	.+64     	; 0x3ac <DIO_u8GetPinValue+0x13c>
	{
		actualIndexLoc=u8PinIndexCpy-DIO_u8_PORTA_SIZE-DIO_u8_PORTB_SIZE-DIO_u8_PORTC_SIZE;
 36c:	8c 81       	ldd	r24, Y+4	; 0x04
 36e:	88 51       	subi	r24, 0x18	; 24
 370:	8b 83       	std	Y+3, r24	; 0x03
		digitalPinValue=GET_BIT(PIND,actualIndexLoc);
 372:	e0 e3       	ldi	r30, 0x30	; 48
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_u8GetPinValue+0x11c>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_u8GetPinValue+0x118>
 390:	9a 01       	movw	r18, r20
 392:	28 23       	and	r18, r24
 394:	39 23       	and	r19, r25
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	88 2f       	mov	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	a9 01       	movw	r20, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8GetPinValue+0x134>
 3a0:	55 95       	asr	r21
 3a2:	47 95       	ror	r20
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8GetPinValue+0x130>
 3a8:	ca 01       	movw	r24, r20
 3aa:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(digitalPinValue == 0)
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	88 23       	and	r24, r24
 3b0:	19 f4       	brne	.+6      	; 0x3b8 <DIO_u8GetPinValue+0x148>
	{
		HighOrLow=DIO_u8_LOW;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <DIO_u8GetPinValue+0x150>
	}
	else if(digitalPinValue ==1)
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <DIO_u8GetPinValue+0x150>
	{
		HighOrLow=DIO_u8_HIGH;
 3be:	19 82       	std	Y+1, r1	; 0x01
	}
	return HighOrLow;
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <GIE_EnableGlobalInterrupt>:
#include "GIE_reg.h"
#include "GIE_priv.h"
#include "GIE_config.h"
#include "GIE_int.h"
void GIE_EnableGlobalInterrupt(void)
{
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 3d8:	af e5       	ldi	r26, 0x5F	; 95
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	ef e5       	ldi	r30, 0x5F	; 95
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	8c 93       	st	X, r24
}
 3e6:	cf 91       	pop	r28
 3e8:	df 91       	pop	r29
 3ea:	08 95       	ret

000003ec <GIE_DisableGlobalInterrupt>:

void GIE_DisableGlobalInterrupt(void)
{
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 3f4:	af e5       	ldi	r26, 0x5F	; 95
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	ef e5       	ldi	r30, 0x5F	; 95
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	8f 77       	andi	r24, 0x7F	; 127
 400:	8c 93       	st	X, r24
}
 402:	cf 91       	pop	r28
 404:	df 91       	pop	r29
 406:	08 95       	ret

00000408 <KEYPAD_u16GetStatus>:
#include "KEYPAD_int.h"

static u16 u16ResultLoc=0;

u16 KEYPAD_u16GetStatus(void)
{
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
	/*Clear previous status*/
	u16ResultLoc=0;
 410:	10 92 6b 00 	sts	0x006B, r1
 414:	10 92 6a 00 	sts	0x006A, r1

	/*Phase 1*/
	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_LOW);
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 420:	85 e0       	ldi	r24, 0x05	; 5
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 428:	86 e0       	ldi	r24, 0x06	; 6
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 430:	87 e0       	ldi	r24, 0x07	; 7
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	voidSetSwitchresult(0);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 5f 02 	call	0x4be	; 0x4be <voidSetSwitchresult>

	/*Phase 2*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_LOW);
 446:	85 e0       	ldi	r24, 0x05	; 5
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 44e:	86 e0       	ldi	r24, 0x06	; 6
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 456:	87 e0       	ldi	r24, 0x07	; 7
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	voidSetSwitchresult(1);
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 5f 02 	call	0x4be	; 0x4be <voidSetSwitchresult>

	/*Phase 3*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 464:	84 e0       	ldi	r24, 0x04	; 4
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 46c:	85 e0       	ldi	r24, 0x05	; 5
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_LOW);
 474:	86 e0       	ldi	r24, 0x06	; 6
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_HIGH);
 47c:	87 e0       	ldi	r24, 0x07	; 7
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	voidSetSwitchresult(2);
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	0e 94 5f 02 	call	0x4be	; 0x4be <voidSetSwitchresult>

	/*Phase 4*/

	DIO_voidSetPinValue(KEYOAD_u8_OUT_1,DIO_u8_HIGH);
 48a:	84 e0       	ldi	r24, 0x04	; 4
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_2,DIO_u8_HIGH);
 492:	85 e0       	ldi	r24, 0x05	; 5
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_3,DIO_u8_HIGH);
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYOAD_u8_OUT_4,DIO_u8_LOW);
 4a2:	87 e0       	ldi	r24, 0x07	; 7
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	voidSetSwitchresult(3);
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	0e 94 5f 02 	call	0x4be	; 0x4be <voidSetSwitchresult>

	return u16ResultLoc;
 4b0:	80 91 6a 00 	lds	r24, 0x006A
 4b4:	90 91 6b 00 	lds	r25, 0x006B
}
 4b8:	cf 91       	pop	r28
 4ba:	df 91       	pop	r29
 4bc:	08 95       	ret

000004be <voidSetSwitchresult>:

static void voidSetSwitchresult(u8 u8ColumnCpy)
{
 4be:	df 93       	push	r29
 4c0:	cf 93       	push	r28
 4c2:	0f 92       	push	r0
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_1) == DIO_u8_LOW)
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 38 01 	call	0x270	; 0x270 <DIO_u8GetPinValue>
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	a9 f4       	brne	.+42     	; 0x4fe <voidSetSwitchresult+0x40>
	{
		SET_BIT(u16ResultLoc,u8ColumnCpy);
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <voidSetSwitchresult+0x26>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	2a 95       	dec	r18
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <voidSetSwitchresult+0x22>
 4e8:	9c 01       	movw	r18, r24
 4ea:	80 91 6a 00 	lds	r24, 0x006A
 4ee:	90 91 6b 00 	lds	r25, 0x006B
 4f2:	82 2b       	or	r24, r18
 4f4:	93 2b       	or	r25, r19
 4f6:	90 93 6b 00 	sts	0x006B, r25
 4fa:	80 93 6a 00 	sts	0x006A, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_2) == DIO_u8_LOW)
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	0e 94 38 01 	call	0x270	; 0x270 <DIO_u8GetPinValue>
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	c1 f4       	brne	.+48     	; 0x538 <voidSetSwitchresult+0x7a>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+4));
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 2f       	mov	r24, r24
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	9c 01       	movw	r18, r24
 510:	2c 5f       	subi	r18, 0xFC	; 252
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <voidSetSwitchresult+0x60>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	2a 95       	dec	r18
 520:	e2 f7       	brpl	.-8      	; 0x51a <voidSetSwitchresult+0x5c>
 522:	9c 01       	movw	r18, r24
 524:	80 91 6a 00 	lds	r24, 0x006A
 528:	90 91 6b 00 	lds	r25, 0x006B
 52c:	82 2b       	or	r24, r18
 52e:	93 2b       	or	r25, r19
 530:	90 93 6b 00 	sts	0x006B, r25
 534:	80 93 6a 00 	sts	0x006A, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_3) == DIO_u8_LOW)
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 38 01 	call	0x270	; 0x270 <DIO_u8GetPinValue>
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	c1 f4       	brne	.+48     	; 0x572 <voidSetSwitchresult+0xb4>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+8));
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	88 2f       	mov	r24, r24
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	9c 01       	movw	r18, r24
 54a:	28 5f       	subi	r18, 0xF8	; 248
 54c:	3f 4f       	sbci	r19, 0xFF	; 255
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <voidSetSwitchresult+0x9a>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	2a 95       	dec	r18
 55a:	e2 f7       	brpl	.-8      	; 0x554 <voidSetSwitchresult+0x96>
 55c:	9c 01       	movw	r18, r24
 55e:	80 91 6a 00 	lds	r24, 0x006A
 562:	90 91 6b 00 	lds	r25, 0x006B
 566:	82 2b       	or	r24, r18
 568:	93 2b       	or	r25, r19
 56a:	90 93 6b 00 	sts	0x006B, r25
 56e:	80 93 6a 00 	sts	0x006A, r24
	}
	if(DIO_u8GetPinValue(KEYOAD_u8_INP_4) == DIO_u8_LOW)
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	0e 94 38 01 	call	0x270	; 0x270 <DIO_u8GetPinValue>
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	c1 f4       	brne	.+48     	; 0x5ac <voidSetSwitchresult+0xee>
	{
		SET_BIT(u16ResultLoc,(u8ColumnCpy+12));
 57c:	89 81       	ldd	r24, Y+1	; 0x01
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	9c 01       	movw	r18, r24
 584:	24 5f       	subi	r18, 0xF4	; 244
 586:	3f 4f       	sbci	r19, 0xFF	; 255
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <voidSetSwitchresult+0xd4>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	2a 95       	dec	r18
 594:	e2 f7       	brpl	.-8      	; 0x58e <voidSetSwitchresult+0xd0>
 596:	9c 01       	movw	r18, r24
 598:	80 91 6a 00 	lds	r24, 0x006A
 59c:	90 91 6b 00 	lds	r25, 0x006B
 5a0:	82 2b       	or	r24, r18
 5a2:	93 2b       	or	r25, r19
 5a4:	90 93 6b 00 	sts	0x006B, r25
 5a8:	80 93 6a 00 	sts	0x006A, r24
	}
}
 5ac:	0f 90       	pop	r0
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <RTO_voidSchedular>:
u32 RTO_u32OvfCount=0;
u8  RTO_u8_INITValue=0;
u32 RTO_u32OvfIncreament=0;
Task* RTO_SYSTASKS[RTO_u8_NUM_OF_TASKS]={(Task *)0};
static void RTO_voidSchedular(void)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	0f 92       	push	r0
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62

	RTO_u32OvfIncreament ++;
 5be:	80 91 71 00 	lds	r24, 0x0071
 5c2:	90 91 72 00 	lds	r25, 0x0072
 5c6:	a0 91 73 00 	lds	r26, 0x0073
 5ca:	b0 91 74 00 	lds	r27, 0x0074
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	a1 1d       	adc	r26, r1
 5d2:	b1 1d       	adc	r27, r1
 5d4:	80 93 71 00 	sts	0x0071, r24
 5d8:	90 93 72 00 	sts	0x0072, r25
 5dc:	a0 93 73 00 	sts	0x0073, r26
 5e0:	b0 93 74 00 	sts	0x0074, r27
	if(RTO_u32OvfIncreament == RTO_u32OvfCount)
 5e4:	20 91 71 00 	lds	r18, 0x0071
 5e8:	30 91 72 00 	lds	r19, 0x0072
 5ec:	40 91 73 00 	lds	r20, 0x0073
 5f0:	50 91 74 00 	lds	r21, 0x0074
 5f4:	80 91 6c 00 	lds	r24, 0x006C
 5f8:	90 91 6d 00 	lds	r25, 0x006D
 5fc:	a0 91 6e 00 	lds	r26, 0x006E
 600:	b0 91 6f 00 	lds	r27, 0x006F
 604:	28 17       	cp	r18, r24
 606:	39 07       	cpc	r19, r25
 608:	4a 07       	cpc	r20, r26
 60a:	5b 07       	cpc	r21, r27
 60c:	09 f0       	breq	.+2      	; 0x610 <RTO_voidSchedular+0x5c>
 60e:	76 c0       	rjmp	.+236    	; 0x6fc <RTO_voidSchedular+0x148>
	{
		RTO_u32OvfIncreament=0;
 610:	10 92 71 00 	sts	0x0071, r1
 614:	10 92 72 00 	sts	0x0072, r1
 618:	10 92 73 00 	sts	0x0073, r1
 61c:	10 92 74 00 	sts	0x0074, r1
		TIM_voidInitRegister(RTO_u8_INITValue);
 620:	80 91 70 00 	lds	r24, 0x0070
 624:	0e 94 92 04 	call	0x924	; 0x924 <TIM_voidInitRegister>
		/*Schedular code*/
		/*Loop on all Tasks*/
		for(u8 RTO_u8LoopCounter=0;RTO_u8LoopCounter<RTO_u8_NUM_OF_TASKS;RTO_u8LoopCounter++)
 628:	19 82       	std	Y+1, r1	; 0x01
 62a:	64 c0       	rjmp	.+200    	; 0x6f4 <RTO_voidSchedular+0x140>
		{
			/*check that a task is created at this location*/
			if(RTO_SYSTASKS[RTO_u8LoopCounter] !=(Task*) 0)
 62c:	89 81       	ldd	r24, Y+1	; 0x01
 62e:	88 2f       	mov	r24, r24
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	fc 01       	movw	r30, r24
 638:	eb 58       	subi	r30, 0x8B	; 139
 63a:	ff 4f       	sbci	r31, 0xFF	; 255
 63c:	80 81       	ld	r24, Z
 63e:	91 81       	ldd	r25, Z+1	; 0x01
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	09 f4       	brne	.+2      	; 0x646 <RTO_voidSchedular+0x92>
 644:	54 c0       	rjmp	.+168    	; 0x6ee <RTO_voidSchedular+0x13a>
			{
				if(RTO_SYSTASKS[RTO_u8LoopCounter]->u8State == RTO_u8_ACTIVE_STATE)
 646:	89 81       	ldd	r24, Y+1	; 0x01
 648:	88 2f       	mov	r24, r24
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	fc 01       	movw	r30, r24
 652:	eb 58       	subi	r30, 0x8B	; 139
 654:	ff 4f       	sbci	r31, 0xFF	; 255
 656:	01 90       	ld	r0, Z+
 658:	f0 81       	ld	r31, Z
 65a:	e0 2d       	mov	r30, r0
 65c:	82 81       	ldd	r24, Z+2	; 0x02
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	09 f0       	breq	.+2      	; 0x664 <RTO_voidSchedular+0xb0>
 662:	45 c0       	rjmp	.+138    	; 0x6ee <RTO_voidSchedular+0x13a>
				{

					if(RTO_SYSTASKS[RTO_u8LoopCounter]->u8FirstDelay ==0)
 664:	89 81       	ldd	r24, Y+1	; 0x01
 666:	88 2f       	mov	r24, r24
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	fc 01       	movw	r30, r24
 670:	eb 58       	subi	r30, 0x8B	; 139
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	01 90       	ld	r0, Z+
 676:	f0 81       	ld	r31, Z
 678:	e0 2d       	mov	r30, r0
 67a:	81 81       	ldd	r24, Z+1	; 0x01
 67c:	88 23       	and	r24, r24
 67e:	49 f5       	brne	.+82     	; 0x6d2 <RTO_voidSchedular+0x11e>
					{
						RTO_SYSTASKS[RTO_u8LoopCounter]->u8FirstDelay=RTO_SYSTASKS[RTO_u8LoopCounter]->u8periodicity-1;
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	fc 01       	movw	r30, r24
 68c:	eb 58       	subi	r30, 0x8B	; 139
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	a0 81       	ld	r26, Z
 692:	b1 81       	ldd	r27, Z+1	; 0x01
 694:	89 81       	ldd	r24, Y+1	; 0x01
 696:	88 2f       	mov	r24, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	fc 01       	movw	r30, r24
 6a0:	eb 58       	subi	r30, 0x8B	; 139
 6a2:	ff 4f       	sbci	r31, 0xFF	; 255
 6a4:	01 90       	ld	r0, Z+
 6a6:	f0 81       	ld	r31, Z
 6a8:	e0 2d       	mov	r30, r0
 6aa:	80 81       	ld	r24, Z
 6ac:	81 50       	subi	r24, 0x01	; 1
 6ae:	11 96       	adiw	r26, 0x01	; 1
 6b0:	8c 93       	st	X, r24
						(RTO_SYSTASKS[RTO_u8LoopCounter]->TaskHandler) ();
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	88 2f       	mov	r24, r24
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	fc 01       	movw	r30, r24
 6be:	eb 58       	subi	r30, 0x8B	; 139
 6c0:	ff 4f       	sbci	r31, 0xFF	; 255
 6c2:	01 90       	ld	r0, Z+
 6c4:	f0 81       	ld	r31, Z
 6c6:	e0 2d       	mov	r30, r0
 6c8:	03 80       	ldd	r0, Z+3	; 0x03
 6ca:	f4 81       	ldd	r31, Z+4	; 0x04
 6cc:	e0 2d       	mov	r30, r0
 6ce:	09 95       	icall
 6d0:	0e c0       	rjmp	.+28     	; 0x6ee <RTO_voidSchedular+0x13a>
					}
					else
					{
						RTO_SYSTASKS[RTO_u8LoopCounter]->u8FirstDelay--;
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	88 2f       	mov	r24, r24
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	fc 01       	movw	r30, r24
 6de:	eb 58       	subi	r30, 0x8B	; 139
 6e0:	ff 4f       	sbci	r31, 0xFF	; 255
 6e2:	01 90       	ld	r0, Z+
 6e4:	f0 81       	ld	r31, Z
 6e6:	e0 2d       	mov	r30, r0
 6e8:	81 81       	ldd	r24, Z+1	; 0x01
 6ea:	81 50       	subi	r24, 0x01	; 1
 6ec:	81 83       	std	Z+1, r24	; 0x01
	{
		RTO_u32OvfIncreament=0;
		TIM_voidInitRegister(RTO_u8_INITValue);
		/*Schedular code*/
		/*Loop on all Tasks*/
		for(u8 RTO_u8LoopCounter=0;RTO_u8LoopCounter<RTO_u8_NUM_OF_TASKS;RTO_u8LoopCounter++)
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	8f 5f       	subi	r24, 0xFF	; 255
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	08 f4       	brcc	.+2      	; 0x6fc <RTO_voidSchedular+0x148>
 6fa:	98 cf       	rjmp	.-208    	; 0x62c <RTO_voidSchedular+0x78>
			{
				/*No Task created at this location*/
			}
		}
	}
}
 6fc:	0f 90       	pop	r0
 6fe:	cf 91       	pop	r28
 700:	df 91       	pop	r29
 702:	08 95       	ret

00000704 <RTO_voidInitialize>:

/*This function initialize the RTO driver*/
void RTO_voidInitialize(void)
{
 704:	df 93       	push	r29
 706:	cf 93       	push	r28
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	28 97       	sbiw	r28, 0x08	; 8
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	f8 94       	cli
 712:	de bf       	out	0x3e, r29	; 62
 714:	0f be       	out	0x3f, r0	; 63
 716:	cd bf       	out	0x3d, r28	; 61
	u32 Local_Tovf;
	u32 Local_OvfFrac;
	//	/*Set Call Back of timer to schedular function*/
	TIM_voidSetCallBack(RTO_voidSchedular);
 718:	8a ed       	ldi	r24, 0xDA	; 218
 71a:	92 e0       	ldi	r25, 0x02	; 2
 71c:	0e 94 80 04 	call	0x900	; 0x900 <TIM_voidSetCallBack>
	//	/*Calculate number of OVF for tick*/
	Local_Tovf=(u32)((u32)((u32)(1<<TIM_u8_TIM_RES) * (u16)(TIM_u16_PRESCALER)) /(u8) RTO_u8_SYS_FREQ_MHZ);
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e4       	ldi	r25, 0x40	; 64
 724:	a0 e0       	ldi	r26, 0x00	; 0
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	8d 83       	std	Y+5, r24	; 0x05
 72a:	9e 83       	std	Y+6, r25	; 0x06
 72c:	af 83       	std	Y+7, r26	; 0x07
 72e:	b8 87       	std	Y+8, r27	; 0x08
	RTO_u32OvfCount=(u32)((u32)((u8) RTO_u8_TICK_TIME_MS * (u32)RTO_u16_MS_TO_US) / (u32)Local_Tovf);
 730:	88 ee       	ldi	r24, 0xE8	; 232
 732:	93 e0       	ldi	r25, 0x03	; 3
 734:	a0 e0       	ldi	r26, 0x00	; 0
 736:	b0 e0       	ldi	r27, 0x00	; 0
 738:	2d 81       	ldd	r18, Y+5	; 0x05
 73a:	3e 81       	ldd	r19, Y+6	; 0x06
 73c:	4f 81       	ldd	r20, Y+7	; 0x07
 73e:	58 85       	ldd	r21, Y+8	; 0x08
 740:	bc 01       	movw	r22, r24
 742:	cd 01       	movw	r24, r26
 744:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodsi4>
 748:	da 01       	movw	r26, r20
 74a:	c9 01       	movw	r24, r18
 74c:	80 93 6c 00 	sts	0x006C, r24
 750:	90 93 6d 00 	sts	0x006D, r25
 754:	a0 93 6e 00 	sts	0x006E, r26
 758:	b0 93 6f 00 	sts	0x006F, r27
	Local_OvfFrac=(u32)((u32)((u8)RTO_u8_TICK_TIME_MS * (u32)RTO_u16_MS_TO_US) % (u32)Local_Tovf);
 75c:	88 ee       	ldi	r24, 0xE8	; 232
 75e:	93 e0       	ldi	r25, 0x03	; 3
 760:	a0 e0       	ldi	r26, 0x00	; 0
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	2d 81       	ldd	r18, Y+5	; 0x05
 766:	3e 81       	ldd	r19, Y+6	; 0x06
 768:	4f 81       	ldd	r20, Y+7	; 0x07
 76a:	58 85       	ldd	r21, Y+8	; 0x08
 76c:	bc 01       	movw	r22, r24
 76e:	cd 01       	movw	r24, r26
 770:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodsi4>
 774:	dc 01       	movw	r26, r24
 776:	cb 01       	movw	r24, r22
 778:	89 83       	std	Y+1, r24	; 0x01
 77a:	9a 83       	std	Y+2, r25	; 0x02
 77c:	ab 83       	std	Y+3, r26	; 0x03
 77e:	bc 83       	std	Y+4, r27	; 0x04
	if(Local_OvfFrac != 0)
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	9a 81       	ldd	r25, Y+2	; 0x02
 784:	ab 81       	ldd	r26, Y+3	; 0x03
 786:	bc 81       	ldd	r27, Y+4	; 0x04
 788:	00 97       	sbiw	r24, 0x00	; 0
 78a:	a1 05       	cpc	r26, r1
 78c:	b1 05       	cpc	r27, r1
 78e:	49 f1       	breq	.+82     	; 0x7e2 <RTO_voidInitialize+0xde>
	{
		RTO_u32OvfCount++;
 790:	80 91 6c 00 	lds	r24, 0x006C
 794:	90 91 6d 00 	lds	r25, 0x006D
 798:	a0 91 6e 00 	lds	r26, 0x006E
 79c:	b0 91 6f 00 	lds	r27, 0x006F
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	a1 1d       	adc	r26, r1
 7a4:	b1 1d       	adc	r27, r1
 7a6:	80 93 6c 00 	sts	0x006C, r24
 7aa:	90 93 6d 00 	sts	0x006D, r25
 7ae:	a0 93 6e 00 	sts	0x006E, r26
 7b2:	b0 93 6f 00 	sts	0x006F, r27
		RTO_u8_INITValue=(u8)((u16)(1 <<TIM_u8_TIM_RES) - (u16)((u32)( (u16) (1 << TIM_u8_TIM_RES) * (u32)Local_OvfFrac) / (u32)Local_Tovf));
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ba:	ab 81       	ldd	r26, Y+3	; 0x03
 7bc:	bc 81       	ldd	r27, Y+4	; 0x04
 7be:	ba 2f       	mov	r27, r26
 7c0:	a9 2f       	mov	r26, r25
 7c2:	98 2f       	mov	r25, r24
 7c4:	88 27       	eor	r24, r24
 7c6:	2d 81       	ldd	r18, Y+5	; 0x05
 7c8:	3e 81       	ldd	r19, Y+6	; 0x06
 7ca:	4f 81       	ldd	r20, Y+7	; 0x07
 7cc:	58 85       	ldd	r21, Y+8	; 0x08
 7ce:	bc 01       	movw	r22, r24
 7d0:	cd 01       	movw	r24, r26
 7d2:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodsi4>
 7d6:	da 01       	movw	r26, r20
 7d8:	c9 01       	movw	r24, r18
 7da:	81 95       	neg	r24
 7dc:	80 93 70 00 	sts	0x0070, r24
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <RTO_voidInitialize+0xe2>
	}
	else
	{
		RTO_u8_INITValue=0;
 7e2:	10 92 70 00 	sts	0x0070, r1
	}
}
 7e6:	28 96       	adiw	r28, 0x08	; 8
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	cd bf       	out	0x3d, r28	; 61
 7f2:	cf 91       	pop	r28
 7f4:	df 91       	pop	r29
 7f6:	08 95       	ret

000007f8 <RTO_voidCreateTask>:
/*This function creates a new task*/
void RTO_voidCreateTask(Task * TaskCpy, u8 u8Priority)
{
 7f8:	df 93       	push	r29
 7fa:	cf 93       	push	r28
 7fc:	00 d0       	rcall	.+0      	; 0x7fe <RTO_voidCreateTask+0x6>
 7fe:	0f 92       	push	r0
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
 804:	9a 83       	std	Y+2, r25	; 0x02
 806:	89 83       	std	Y+1, r24	; 0x01
 808:	6b 83       	std	Y+3, r22	; 0x03
	if(u8Priority< RTO_u8_NUM_OF_TASKS)
 80a:	8b 81       	ldd	r24, Y+3	; 0x03
 80c:	82 30       	cpi	r24, 0x02	; 2
 80e:	60 f4       	brcc	.+24     	; 0x828 <RTO_voidCreateTask+0x30>
	{
		RTO_SYSTASKS[u8Priority]=TaskCpy;
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	88 2f       	mov	r24, r24
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	fc 01       	movw	r30, r24
 81c:	eb 58       	subi	r30, 0x8B	; 139
 81e:	ff 4f       	sbci	r31, 0xFF	; 255
 820:	89 81       	ldd	r24, Y+1	; 0x01
 822:	9a 81       	ldd	r25, Y+2	; 0x02
 824:	91 83       	std	Z+1, r25	; 0x01
 826:	80 83       	st	Z, r24
	}
	else
	{
		/*Report Error*/
	}
}
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	cf 91       	pop	r28
 830:	df 91       	pop	r29
 832:	08 95       	ret

00000834 <RTO_voidDeleteTask>:
void RTO_voidDeleteTask(u8 u8Priority)
{
 834:	df 93       	push	r29
 836:	cf 93       	push	r28
 838:	0f 92       	push	r0
 83a:	cd b7       	in	r28, 0x3d	; 61
 83c:	de b7       	in	r29, 0x3e	; 62
 83e:	89 83       	std	Y+1, r24	; 0x01
	RTO_SYSTASKS[u8Priority]=(Task *)0;
 840:	89 81       	ldd	r24, Y+1	; 0x01
 842:	88 2f       	mov	r24, r24
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	fc 01       	movw	r30, r24
 84c:	eb 58       	subi	r30, 0x8B	; 139
 84e:	ff 4f       	sbci	r31, 0xFF	; 255
 850:	11 82       	std	Z+1, r1	; 0x01
 852:	10 82       	st	Z, r1
}
 854:	0f 90       	pop	r0
 856:	cf 91       	pop	r28
 858:	df 91       	pop	r29
 85a:	08 95       	ret

0000085c <RTO_voidSetTaskState>:

void RTO_voidSetTaskState(u8 u8Priority,u8 u8State)
{
 85c:	df 93       	push	r29
 85e:	cf 93       	push	r28
 860:	00 d0       	rcall	.+0      	; 0x862 <__stack+0x3>
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
 866:	89 83       	std	Y+1, r24	; 0x01
 868:	6a 83       	std	Y+2, r22	; 0x02
	RTO_SYSTASKS[u8Priority]->u8State=u8State;
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	88 2f       	mov	r24, r24
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	fc 01       	movw	r30, r24
 876:	eb 58       	subi	r30, 0x8B	; 139
 878:	ff 4f       	sbci	r31, 0xFF	; 255
 87a:	01 90       	ld	r0, Z+
 87c:	f0 81       	ld	r31, Z
 87e:	e0 2d       	mov	r30, r0
 880:	8a 81       	ldd	r24, Y+2	; 0x02
 882:	82 83       	std	Z+2, r24	; 0x02
}
 884:	0f 90       	pop	r0
 886:	0f 90       	pop	r0
 888:	cf 91       	pop	r28
 88a:	df 91       	pop	r29
 88c:	08 95       	ret

0000088e <TIM_voidInitialize>:

static void (* TIM_CallBack) (void);

/*Description: This function shall init the Timer prephiral*/
void TIM_voidInitialize(void)
{
 88e:	df 93       	push	r29
 890:	cf 93       	push	r28
 892:	cd b7       	in	r28, 0x3d	; 61
 894:	de b7       	in	r29, 0x3e	; 62
	/*clear flag*/
	SET_BIT(TIFR,0);
 896:	a8 e5       	ldi	r26, 0x58	; 88
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	e8 e5       	ldi	r30, 0x58	; 88
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	81 60       	ori	r24, 0x01	; 1
 8a2:	8c 93       	st	X, r24
	/*disable interrupt*/
	CLR_BIT(TIMSK,0);
 8a4:	a9 e5       	ldi	r26, 0x59	; 89
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	e9 e5       	ldi	r30, 0x59	; 89
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	8e 7f       	andi	r24, 0xFE	; 254
 8b0:	8c 93       	st	X, r24
	/*initialize timer register*/
	TCNT0=TIM_u8_INIT_VALUE;
 8b2:	e2 e5       	ldi	r30, 0x52	; 82
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	8d e2       	ldi	r24, 0x2D	; 45
 8b8:	80 83       	st	Z, r24
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_64
	TCCR0 = TIM_u8_DIV_BY_64_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_256
	TCCR0 = TIM_u8_DIV_BY_256_MASK;
#elif  TIM_u16_PRESCALER == TIM_u16_DIV_BY_1024
	TCCR0 = TIM_u8_DIV_BY_1024_MASK;
 8ba:	e3 e5       	ldi	r30, 0x53	; 83
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	85 e0       	ldi	r24, 0x05	; 5
 8c0:	80 83       	st	Z, r24
#endif
}
 8c2:	cf 91       	pop	r28
 8c4:	df 91       	pop	r29
 8c6:	08 95       	ret

000008c8 <TIM_voidEnableInt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInt(void)
{
 8c8:	df 93       	push	r29
 8ca:	cf 93       	push	r28
 8cc:	cd b7       	in	r28, 0x3d	; 61
 8ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
 8d0:	a9 e5       	ldi	r26, 0x59	; 89
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e9 e5       	ldi	r30, 0x59	; 89
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	8c 93       	st	X, r24
}
 8de:	cf 91       	pop	r28
 8e0:	df 91       	pop	r29
 8e2:	08 95       	ret

000008e4 <TIM_voidDisableInt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInt(void)
{
 8e4:	df 93       	push	r29
 8e6:	cf 93       	push	r28
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
 8ec:	a9 e5       	ldi	r26, 0x59	; 89
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	e9 e5       	ldi	r30, 0x59	; 89
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	8e 7f       	andi	r24, 0xFE	; 254
 8f8:	8c 93       	st	X, r24
}
 8fa:	cf 91       	pop	r28
 8fc:	df 91       	pop	r29
 8fe:	08 95       	ret

00000900 <TIM_voidSetCallBack>:

/*Description: set Timer callback function*/
void TIM_voidSetCallBack(void (* ptrCpy) (void))
{
 900:	df 93       	push	r29
 902:	cf 93       	push	r28
 904:	00 d0       	rcall	.+0      	; 0x906 <TIM_voidSetCallBack+0x6>
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	9a 83       	std	Y+2, r25	; 0x02
 90c:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBack=ptrCpy;
 90e:	89 81       	ldd	r24, Y+1	; 0x01
 910:	9a 81       	ldd	r25, Y+2	; 0x02
 912:	90 93 7a 00 	sts	0x007A, r25
 916:	80 93 79 00 	sts	0x0079, r24
}
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	cf 91       	pop	r28
 920:	df 91       	pop	r29
 922:	08 95       	ret

00000924 <TIM_voidInitRegister>:

/*Description: init timer register*/
void TIM_voidInitRegister(u8 u8ValueCpy)
{
 924:	df 93       	push	r29
 926:	cf 93       	push	r28
 928:	0f 92       	push	r0
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy;
 930:	e2 e5       	ldi	r30, 0x52	; 82
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	80 83       	st	Z, r24
}
 938:	0f 90       	pop	r0
 93a:	cf 91       	pop	r28
 93c:	df 91       	pop	r29
 93e:	08 95       	ret

00000940 <__vector_11>:


void __vector_11 (void)__attribute__((signal,used));
void __vector_11 (void)
{
 940:	1f 92       	push	r1
 942:	0f 92       	push	r0
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	0f 92       	push	r0
 948:	11 24       	eor	r1, r1
 94a:	2f 93       	push	r18
 94c:	3f 93       	push	r19
 94e:	4f 93       	push	r20
 950:	5f 93       	push	r21
 952:	6f 93       	push	r22
 954:	7f 93       	push	r23
 956:	8f 93       	push	r24
 958:	9f 93       	push	r25
 95a:	af 93       	push	r26
 95c:	bf 93       	push	r27
 95e:	ef 93       	push	r30
 960:	ff 93       	push	r31
 962:	df 93       	push	r29
 964:	cf 93       	push	r28
 966:	cd b7       	in	r28, 0x3d	; 61
 968:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBack();
 96a:	e0 91 79 00 	lds	r30, 0x0079
 96e:	f0 91 7a 00 	lds	r31, 0x007A
 972:	09 95       	icall
}
 974:	cf 91       	pop	r28
 976:	df 91       	pop	r29
 978:	ff 91       	pop	r31
 97a:	ef 91       	pop	r30
 97c:	bf 91       	pop	r27
 97e:	af 91       	pop	r26
 980:	9f 91       	pop	r25
 982:	8f 91       	pop	r24
 984:	7f 91       	pop	r23
 986:	6f 91       	pop	r22
 988:	5f 91       	pop	r21
 98a:	4f 91       	pop	r20
 98c:	3f 91       	pop	r19
 98e:	2f 91       	pop	r18
 990:	0f 90       	pop	r0
 992:	0f be       	out	0x3f, r0	; 63
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <main>:
static u8 onFlag=0;
Task TaskKeypad=
{200,0,RTO_u8_ACTIVE_STATE,KeypadTask};
Task TaskBuzzer ={0,0,RTO_u8_ACTIVE_STATE,BuzzerTask};
void main (void)
{
 99a:	df 93       	push	r29
 99c:	cf 93       	push	r28
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62

	DIO_voidInitialize();
 9a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInitialize>
	DIO_voidSetPinValue(DIO_u8_PIN_0,DIO_u8_HIGH); //Pull up resistor
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_1,DIO_u8_HIGH); //Pull up resistor
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_2,DIO_u8_HIGH); //Pull up resistor
 9b6:	82 e0       	ldi	r24, 0x02	; 2
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PIN_3,DIO_u8_HIGH); //Pull up resistor
 9be:	83 e0       	ldi	r24, 0x03	; 3
 9c0:	60 e0       	ldi	r22, 0x00	; 0
 9c2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
	TIM_voidInitialize();
 9c6:	0e 94 47 04 	call	0x88e	; 0x88e <TIM_voidInitialize>
	TIM_voidEnableInt();
 9ca:	0e 94 64 04 	call	0x8c8	; 0x8c8 <TIM_voidEnableInt>
	RTO_voidInitialize();
 9ce:	0e 94 82 03 	call	0x704	; 0x704 <RTO_voidInitialize>
	GIE_EnableGlobalInterrupt();
 9d2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GIE_EnableGlobalInterrupt>
	RTO_voidCreateTask(&TaskKeypad,0);
 9d6:	80 e6       	ldi	r24, 0x60	; 96
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <RTO_voidCreateTask>
 9e0:	ff cf       	rjmp	.-2      	; 0x9e0 <main+0x46>

000009e2 <BuzzerTask>:
	{

	}
}
void BuzzerTask(void)
{
 9e2:	df 93       	push	r29
 9e4:	cf 93       	push	r28
 9e6:	cd b7       	in	r28, 0x3d	; 61
 9e8:	de b7       	in	r29, 0x3e	; 62
	if(onFlag==0)
 9ea:	80 91 7c 00 	lds	r24, 0x007C
 9ee:	88 23       	and	r24, r24
 9f0:	41 f4       	brne	.+16     	; 0xa02 <BuzzerTask+0x20>
	{
		DIO_voidSetPinValue(DIO_u8_PIN_8,DIO_u8_HIGH);
 9f2:	88 e0       	ldi	r24, 0x08	; 8
 9f4:	60 e0       	ldi	r22, 0x00	; 0
 9f6:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
		onFlag=1;
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	80 93 7c 00 	sts	0x007C, r24
 a00:	0a c0       	rjmp	.+20     	; 0xa16 <BuzzerTask+0x34>
	}
	else if(onFlag==1)
 a02:	80 91 7c 00 	lds	r24, 0x007C
 a06:	81 30       	cpi	r24, 0x01	; 1
 a08:	31 f4       	brne	.+12     	; 0xa16 <BuzzerTask+0x34>
	{
		DIO_voidSetPinValue(DIO_u8_PIN_8,DIO_u8_LOW);
 a0a:	88 e0       	ldi	r24, 0x08	; 8
 a0c:	61 e0       	ldi	r22, 0x01	; 1
 a0e:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_voidSetPinValue>
		onFlag=0;
 a12:	10 92 7c 00 	sts	0x007C, r1
	}
}
 a16:	cf 91       	pop	r28
 a18:	df 91       	pop	r29
 a1a:	08 95       	ret

00000a1c <KeypadTask>:
void KeypadTask(void)
{
 a1c:	df 93       	push	r29
 a1e:	cf 93       	push	r28
 a20:	00 d0       	rcall	.+0      	; 0xa22 <KeypadTask+0x6>
 a22:	0f 92       	push	r0
 a24:	cd b7       	in	r28, 0x3d	; 61
 a26:	de b7       	in	r29, 0x3e	; 62
	u16 keyspressed;
	u8 i;
	static u8 TaskCreated=0;
	keyspressed=KEYPAD_u16GetStatus();
 a28:	0e 94 04 02 	call	0x408	; 0x408 <KEYPAD_u16GetStatus>
 a2c:	9b 83       	std	Y+3, r25	; 0x03
 a2e:	8a 83       	std	Y+2, r24	; 0x02
	for(i=0;i<16;i++)
 a30:	19 82       	std	Y+1, r1	; 0x01
 a32:	40 c0       	rjmp	.+128    	; 0xab4 <KeypadTask+0x98>
	{
		if(1==GET_BIT(keyspressed,i))
 a34:	89 81       	ldd	r24, Y+1	; 0x01
 a36:	28 2f       	mov	r18, r24
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <KeypadTask+0x28>
 a40:	88 0f       	add	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	2a 95       	dec	r18
 a46:	e2 f7       	brpl	.-8      	; 0xa40 <KeypadTask+0x24>
 a48:	9c 01       	movw	r18, r24
 a4a:	8a 81       	ldd	r24, Y+2	; 0x02
 a4c:	9b 81       	ldd	r25, Y+3	; 0x03
 a4e:	28 23       	and	r18, r24
 a50:	39 23       	and	r19, r25
 a52:	89 81       	ldd	r24, Y+1	; 0x01
 a54:	88 2f       	mov	r24, r24
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	a9 01       	movw	r20, r18
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <KeypadTask+0x44>
 a5c:	56 95       	lsr	r21
 a5e:	47 95       	ror	r20
 a60:	8a 95       	dec	r24
 a62:	e2 f7       	brpl	.-8      	; 0xa5c <KeypadTask+0x40>
 a64:	ca 01       	movw	r24, r20
 a66:	81 30       	cpi	r24, 0x01	; 1
 a68:	91 05       	cpc	r25, r1
 a6a:	81 f4       	brne	.+32     	; 0xa8c <KeypadTask+0x70>
		{
			if(0==TaskCreated)
 a6c:	80 91 7d 00 	lds	r24, 0x007D
 a70:	88 23       	and	r24, r24
 a72:	e9 f4       	brne	.+58     	; 0xaae <KeypadTask+0x92>
			{
				TaskBuzzer.u8periodicity=i;
 a74:	89 81       	ldd	r24, Y+1	; 0x01
 a76:	80 93 65 00 	sts	0x0065, r24
				RTO_voidCreateTask(&TaskBuzzer,1);
 a7a:	85 e6       	ldi	r24, 0x65	; 101
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	61 e0       	ldi	r22, 0x01	; 1
 a80:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <RTO_voidCreateTask>
				TaskCreated=1;
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	80 93 7d 00 	sts	0x007D, r24
 a8a:	11 c0       	rjmp	.+34     	; 0xaae <KeypadTask+0x92>
			}
		}
		else if(keyspressed==0)
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	9b 81       	ldd	r25, Y+3	; 0x03
 a90:	00 97       	sbiw	r24, 0x00	; 0
 a92:	69 f4       	brne	.+26     	; 0xaae <KeypadTask+0x92>
		{
			if(onFlag==1)
 a94:	80 91 7c 00 	lds	r24, 0x007C
 a98:	81 30       	cpi	r24, 0x01	; 1
 a9a:	21 f4       	brne	.+8      	; 0xaa4 <KeypadTask+0x88>
			{
				BuzzerTask();
 a9c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <BuzzerTask>
				onFlag=0;
 aa0:	10 92 7c 00 	sts	0x007C, r1
			}
				RTO_voidDeleteTask(1);
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	0e 94 1a 04 	call	0x834	; 0x834 <RTO_voidDeleteTask>
				TaskCreated=0;
 aaa:	10 92 7d 00 	sts	0x007D, r1
{
	u16 keyspressed;
	u8 i;
	static u8 TaskCreated=0;
	keyspressed=KEYPAD_u16GetStatus();
	for(i=0;i<16;i++)
 aae:	89 81       	ldd	r24, Y+1	; 0x01
 ab0:	8f 5f       	subi	r24, 0xFF	; 255
 ab2:	89 83       	std	Y+1, r24	; 0x01
 ab4:	89 81       	ldd	r24, Y+1	; 0x01
 ab6:	80 31       	cpi	r24, 0x10	; 16
 ab8:	08 f4       	brcc	.+2      	; 0xabc <KeypadTask+0xa0>
 aba:	bc cf       	rjmp	.-136    	; 0xa34 <KeypadTask+0x18>
				RTO_voidDeleteTask(1);
				TaskCreated=0;

		}
	}
}
 abc:	0f 90       	pop	r0
 abe:	0f 90       	pop	r0
 ac0:	0f 90       	pop	r0
 ac2:	cf 91       	pop	r28
 ac4:	df 91       	pop	r29
 ac6:	08 95       	ret

00000ac8 <__udivmodsi4>:
 ac8:	a1 e2       	ldi	r26, 0x21	; 33
 aca:	1a 2e       	mov	r1, r26
 acc:	aa 1b       	sub	r26, r26
 ace:	bb 1b       	sub	r27, r27
 ad0:	fd 01       	movw	r30, r26
 ad2:	0d c0       	rjmp	.+26     	; 0xaee <__udivmodsi4_ep>

00000ad4 <__udivmodsi4_loop>:
 ad4:	aa 1f       	adc	r26, r26
 ad6:	bb 1f       	adc	r27, r27
 ad8:	ee 1f       	adc	r30, r30
 ada:	ff 1f       	adc	r31, r31
 adc:	a2 17       	cp	r26, r18
 ade:	b3 07       	cpc	r27, r19
 ae0:	e4 07       	cpc	r30, r20
 ae2:	f5 07       	cpc	r31, r21
 ae4:	20 f0       	brcs	.+8      	; 0xaee <__udivmodsi4_ep>
 ae6:	a2 1b       	sub	r26, r18
 ae8:	b3 0b       	sbc	r27, r19
 aea:	e4 0b       	sbc	r30, r20
 aec:	f5 0b       	sbc	r31, r21

00000aee <__udivmodsi4_ep>:
 aee:	66 1f       	adc	r22, r22
 af0:	77 1f       	adc	r23, r23
 af2:	88 1f       	adc	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	1a 94       	dec	r1
 af8:	69 f7       	brne	.-38     	; 0xad4 <__udivmodsi4_loop>
 afa:	60 95       	com	r22
 afc:	70 95       	com	r23
 afe:	80 95       	com	r24
 b00:	90 95       	com	r25
 b02:	9b 01       	movw	r18, r22
 b04:	ac 01       	movw	r20, r24
 b06:	bd 01       	movw	r22, r26
 b08:	cf 01       	movw	r24, r30
 b0a:	08 95       	ret

00000b0c <_exit>:
 b0c:	f8 94       	cli

00000b0e <__stop_program>:
 b0e:	ff cf       	rjmp	.-2      	; 0xb0e <__stop_program>
